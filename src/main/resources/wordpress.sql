/*
 Navicat Premium Data Transfer

 Source Server         : 我的
 Source Server Type    : MySQL
 Source Server Version : 50646
 Source Host           : 49.232.51.103:3306
 Source Schema         : wordpress

 Target Server Type    : MySQL
 Target Server Version : 50646
 File Encoding         : 65001

 Date: 28/03/2020 10:19:17
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for wp_commentmeta
-- ----------------------------
DROP TABLE IF EXISTS `wp_commentmeta`;
CREATE TABLE `wp_commentmeta`  (
  `meta_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `comment_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `meta_key` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NULL DEFAULT NULL,
  `meta_value` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NULL,
  PRIMARY KEY (`meta_id`) USING BTREE,
  INDEX `comment_id`(`comment_id`) USING BTREE,
  INDEX `meta_key`(`meta_key`(191)) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_520_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for wp_comments
-- ----------------------------
DROP TABLE IF EXISTS `wp_comments`;
CREATE TABLE `wp_comments`  (
  `comment_ID` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `comment_post_ID` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `comment_author` tinytext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `comment_author_email` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_author_url` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_author_IP` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_date` datetime(0) NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_date_gmt` datetime(0) NOT NULL DEFAULT '0000-00-00 00:00:00',
  `comment_content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `comment_karma` int(11) NOT NULL DEFAULT 0,
  `comment_approved` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '1',
  `comment_agent` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_type` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_parent` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `user_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  PRIMARY KEY (`comment_ID`) USING BTREE,
  INDEX `comment_post_ID`(`comment_post_ID`) USING BTREE,
  INDEX `comment_approved_date_gmt`(`comment_approved`, `comment_date_gmt`) USING BTREE,
  INDEX `comment_date_gmt`(`comment_date_gmt`) USING BTREE,
  INDEX `comment_parent`(`comment_parent`) USING BTREE,
  INDEX `comment_author_email`(`comment_author_email`(10)) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_520_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of wp_comments
-- ----------------------------
INSERT INTO `wp_comments` VALUES (1, 1, '一位WordPress评论者', 'wapuu@wordpress.example', 'https://wordpress.org/', '', '2020-03-27 09:54:36', '2020-03-27 01:54:36', '嗨，这是一条评论。\n要开始审核、编辑及删除评论，请访问仪表盘的“评论”页面。\n评论者头像来自<a href=\"https://gravatar.com\">Gravatar</a>。', 0, 'post-trashed', '', '', 0, 0);

-- ----------------------------
-- Table structure for wp_links
-- ----------------------------
DROP TABLE IF EXISTS `wp_links`;
CREATE TABLE `wp_links`  (
  `link_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `link_url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_image` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_target` varchar(25) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_visible` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'Y',
  `link_owner` bigint(20) UNSIGNED NOT NULL DEFAULT 1,
  `link_rating` int(11) NOT NULL DEFAULT 0,
  `link_updated` datetime(0) NOT NULL DEFAULT '0000-00-00 00:00:00',
  `link_rel` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `link_notes` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `link_rss` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`link_id`) USING BTREE,
  INDEX `link_visible`(`link_visible`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_520_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for wp_options
-- ----------------------------
DROP TABLE IF EXISTS `wp_options`;
CREATE TABLE `wp_options`  (
  `option_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `option_name` varchar(191) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `option_value` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `autoload` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'yes',
  PRIMARY KEY (`option_id`) USING BTREE,
  UNIQUE INDEX `option_name`(`option_name`) USING BTREE,
  INDEX `autoload`(`autoload`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 441 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_520_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of wp_options
-- ----------------------------
INSERT INTO `wp_options` VALUES (1, 'siteurl', 'https://www.javashitang.com', 'yes');
INSERT INTO `wp_options` VALUES (2, 'home', 'https://www.javashitang.com', 'yes');
INSERT INTO `wp_options` VALUES (3, 'blogname', 'Java识堂', 'yes');
INSERT INTO `wp_options` VALUES (4, 'blogdescription', '一个有干货的网站', 'yes');
INSERT INTO `wp_options` VALUES (5, 'users_can_register', '0', 'yes');
INSERT INTO `wp_options` VALUES (6, 'admin_email', '290059742@qq.com', 'yes');
INSERT INTO `wp_options` VALUES (7, 'start_of_week', '1', 'yes');
INSERT INTO `wp_options` VALUES (8, 'use_balanceTags', '0', 'yes');
INSERT INTO `wp_options` VALUES (9, 'use_smilies', '1', 'yes');
INSERT INTO `wp_options` VALUES (10, 'require_name_email', '1', 'yes');
INSERT INTO `wp_options` VALUES (11, 'comments_notify', '1', 'yes');
INSERT INTO `wp_options` VALUES (12, 'posts_per_rss', '10', 'yes');
INSERT INTO `wp_options` VALUES (13, 'rss_use_excerpt', '0', 'yes');
INSERT INTO `wp_options` VALUES (14, 'mailserver_url', 'mail.example.com', 'yes');
INSERT INTO `wp_options` VALUES (15, 'mailserver_login', 'login@example.com', 'yes');
INSERT INTO `wp_options` VALUES (16, 'mailserver_pass', 'password', 'yes');
INSERT INTO `wp_options` VALUES (17, 'mailserver_port', '110', 'yes');
INSERT INTO `wp_options` VALUES (18, 'default_category', '1', 'yes');
INSERT INTO `wp_options` VALUES (19, 'default_comment_status', 'open', 'yes');
INSERT INTO `wp_options` VALUES (20, 'default_ping_status', 'open', 'yes');
INSERT INTO `wp_options` VALUES (21, 'default_pingback_flag', '1', 'yes');
INSERT INTO `wp_options` VALUES (22, 'posts_per_page', '10', 'yes');
INSERT INTO `wp_options` VALUES (23, 'date_format', 'Y年n月j日', 'yes');
INSERT INTO `wp_options` VALUES (24, 'time_format', 'ag:i', 'yes');
INSERT INTO `wp_options` VALUES (25, 'links_updated_date_format', 'Y年n月j日ag:i', 'yes');
INSERT INTO `wp_options` VALUES (26, 'comment_moderation', '0', 'yes');
INSERT INTO `wp_options` VALUES (27, 'moderation_notify', '1', 'yes');
INSERT INTO `wp_options` VALUES (28, 'permalink_structure', '', 'yes');
INSERT INTO `wp_options` VALUES (29, 'rewrite_rules', '', 'yes');
INSERT INTO `wp_options` VALUES (30, 'hack_file', '0', 'yes');
INSERT INTO `wp_options` VALUES (31, 'blog_charset', 'UTF-8', 'yes');
INSERT INTO `wp_options` VALUES (32, 'moderation_keys', '', 'no');
INSERT INTO `wp_options` VALUES (33, 'active_plugins', 'a:2:{i:0;s:21:\"beepress/beepress.php\";i:1;s:31:\"wp-statistics/wp-statistics.php\";}', 'yes');
INSERT INTO `wp_options` VALUES (34, 'category_base', '', 'yes');
INSERT INTO `wp_options` VALUES (35, 'ping_sites', 'http://rpc.pingomatic.com/', 'yes');
INSERT INTO `wp_options` VALUES (36, 'comment_max_links', '2', 'yes');
INSERT INTO `wp_options` VALUES (37, 'gmt_offset', '0', 'yes');
INSERT INTO `wp_options` VALUES (38, 'default_email_category', '1', 'yes');
INSERT INTO `wp_options` VALUES (39, 'recently_edited', '', 'no');
INSERT INTO `wp_options` VALUES (40, 'template', 'wordstar', 'yes');
INSERT INTO `wp_options` VALUES (41, 'stylesheet', 'wordstar', 'yes');
INSERT INTO `wp_options` VALUES (42, 'comment_whitelist', '1', 'yes');
INSERT INTO `wp_options` VALUES (43, 'blacklist_keys', '', 'no');
INSERT INTO `wp_options` VALUES (44, 'comment_registration', '0', 'yes');
INSERT INTO `wp_options` VALUES (45, 'html_type', 'text/html', 'yes');
INSERT INTO `wp_options` VALUES (46, 'use_trackback', '0', 'yes');
INSERT INTO `wp_options` VALUES (47, 'default_role', 'subscriber', 'yes');
INSERT INTO `wp_options` VALUES (48, 'db_version', '45805', 'yes');
INSERT INTO `wp_options` VALUES (49, 'uploads_use_yearmonth_folders', '1', 'yes');
INSERT INTO `wp_options` VALUES (50, 'upload_path', '', 'yes');
INSERT INTO `wp_options` VALUES (51, 'blog_public', '1', 'yes');
INSERT INTO `wp_options` VALUES (52, 'default_link_category', '2', 'yes');
INSERT INTO `wp_options` VALUES (53, 'show_on_front', 'posts', 'yes');
INSERT INTO `wp_options` VALUES (54, 'tag_base', '', 'yes');
INSERT INTO `wp_options` VALUES (55, 'show_avatars', '1', 'yes');
INSERT INTO `wp_options` VALUES (56, 'avatar_rating', 'G', 'yes');
INSERT INTO `wp_options` VALUES (57, 'upload_url_path', '', 'yes');
INSERT INTO `wp_options` VALUES (58, 'thumbnail_size_w', '150', 'yes');
INSERT INTO `wp_options` VALUES (59, 'thumbnail_size_h', '150', 'yes');
INSERT INTO `wp_options` VALUES (60, 'thumbnail_crop', '1', 'yes');
INSERT INTO `wp_options` VALUES (61, 'medium_size_w', '300', 'yes');
INSERT INTO `wp_options` VALUES (62, 'medium_size_h', '300', 'yes');
INSERT INTO `wp_options` VALUES (63, 'avatar_default', 'mystery', 'yes');
INSERT INTO `wp_options` VALUES (64, 'large_size_w', '1024', 'yes');
INSERT INTO `wp_options` VALUES (65, 'large_size_h', '1024', 'yes');
INSERT INTO `wp_options` VALUES (66, 'image_default_link_type', 'none', 'yes');
INSERT INTO `wp_options` VALUES (67, 'image_default_size', '', 'yes');
INSERT INTO `wp_options` VALUES (68, 'image_default_align', '', 'yes');
INSERT INTO `wp_options` VALUES (69, 'close_comments_for_old_posts', '0', 'yes');
INSERT INTO `wp_options` VALUES (70, 'close_comments_days_old', '14', 'yes');
INSERT INTO `wp_options` VALUES (71, 'thread_comments', '1', 'yes');
INSERT INTO `wp_options` VALUES (72, 'thread_comments_depth', '5', 'yes');
INSERT INTO `wp_options` VALUES (73, 'page_comments', '0', 'yes');
INSERT INTO `wp_options` VALUES (74, 'comments_per_page', '50', 'yes');
INSERT INTO `wp_options` VALUES (75, 'default_comments_page', 'newest', 'yes');
INSERT INTO `wp_options` VALUES (76, 'comment_order', 'asc', 'yes');
INSERT INTO `wp_options` VALUES (77, 'sticky_posts', 'a:0:{}', 'yes');
INSERT INTO `wp_options` VALUES (78, 'widget_categories', 'a:2:{i:2;a:4:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:12:\"hierarchical\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES (79, 'widget_text', 'a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES (80, 'widget_rss', 'a:2:{i:1;a:0:{}s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES (81, 'uninstall_plugins', 'a:0:{}', 'no');
INSERT INTO `wp_options` VALUES (82, 'timezone_string', 'Asia/Shanghai', 'yes');
INSERT INTO `wp_options` VALUES (83, 'page_for_posts', '0', 'yes');
INSERT INTO `wp_options` VALUES (84, 'page_on_front', '0', 'yes');
INSERT INTO `wp_options` VALUES (85, 'default_post_format', '0', 'yes');
INSERT INTO `wp_options` VALUES (86, 'link_manager_enabled', '0', 'yes');
INSERT INTO `wp_options` VALUES (87, 'finished_splitting_shared_terms', '1', 'yes');
INSERT INTO `wp_options` VALUES (88, 'site_icon', '0', 'yes');
INSERT INTO `wp_options` VALUES (89, 'medium_large_size_w', '768', 'yes');
INSERT INTO `wp_options` VALUES (90, 'medium_large_size_h', '0', 'yes');
INSERT INTO `wp_options` VALUES (91, 'wp_page_for_privacy_policy', '3', 'yes');
INSERT INTO `wp_options` VALUES (92, 'show_comments_cookies_opt_in', '1', 'yes');
INSERT INTO `wp_options` VALUES (93, 'admin_email_lifespan', '1600826075', 'yes');
INSERT INTO `wp_options` VALUES (94, 'initial_db_version', '45805', 'yes');
INSERT INTO `wp_options` VALUES (95, 'wp_user_roles', 'a:5:{s:13:\"administrator\";a:2:{s:4:\"name\";s:13:\"Administrator\";s:12:\"capabilities\";a:61:{s:13:\"switch_themes\";b:1;s:11:\"edit_themes\";b:1;s:16:\"activate_plugins\";b:1;s:12:\"edit_plugins\";b:1;s:10:\"edit_users\";b:1;s:10:\"edit_files\";b:1;s:14:\"manage_options\";b:1;s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:6:\"import\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:8:\"level_10\";b:1;s:7:\"level_9\";b:1;s:7:\"level_8\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;s:12:\"delete_users\";b:1;s:12:\"create_users\";b:1;s:17:\"unfiltered_upload\";b:1;s:14:\"edit_dashboard\";b:1;s:14:\"update_plugins\";b:1;s:14:\"delete_plugins\";b:1;s:15:\"install_plugins\";b:1;s:13:\"update_themes\";b:1;s:14:\"install_themes\";b:1;s:11:\"update_core\";b:1;s:10:\"list_users\";b:1;s:12:\"remove_users\";b:1;s:13:\"promote_users\";b:1;s:18:\"edit_theme_options\";b:1;s:13:\"delete_themes\";b:1;s:6:\"export\";b:1;}}s:6:\"editor\";a:2:{s:4:\"name\";s:6:\"Editor\";s:12:\"capabilities\";a:34:{s:17:\"moderate_comments\";b:1;s:17:\"manage_categories\";b:1;s:12:\"manage_links\";b:1;s:12:\"upload_files\";b:1;s:15:\"unfiltered_html\";b:1;s:10:\"edit_posts\";b:1;s:17:\"edit_others_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:10:\"edit_pages\";b:1;s:4:\"read\";b:1;s:7:\"level_7\";b:1;s:7:\"level_6\";b:1;s:7:\"level_5\";b:1;s:7:\"level_4\";b:1;s:7:\"level_3\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:17:\"edit_others_pages\";b:1;s:20:\"edit_published_pages\";b:1;s:13:\"publish_pages\";b:1;s:12:\"delete_pages\";b:1;s:19:\"delete_others_pages\";b:1;s:22:\"delete_published_pages\";b:1;s:12:\"delete_posts\";b:1;s:19:\"delete_others_posts\";b:1;s:22:\"delete_published_posts\";b:1;s:20:\"delete_private_posts\";b:1;s:18:\"edit_private_posts\";b:1;s:18:\"read_private_posts\";b:1;s:20:\"delete_private_pages\";b:1;s:18:\"edit_private_pages\";b:1;s:18:\"read_private_pages\";b:1;}}s:6:\"author\";a:2:{s:4:\"name\";s:6:\"Author\";s:12:\"capabilities\";a:10:{s:12:\"upload_files\";b:1;s:10:\"edit_posts\";b:1;s:20:\"edit_published_posts\";b:1;s:13:\"publish_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_2\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;s:22:\"delete_published_posts\";b:1;}}s:11:\"contributor\";a:2:{s:4:\"name\";s:11:\"Contributor\";s:12:\"capabilities\";a:5:{s:10:\"edit_posts\";b:1;s:4:\"read\";b:1;s:7:\"level_1\";b:1;s:7:\"level_0\";b:1;s:12:\"delete_posts\";b:1;}}s:10:\"subscriber\";a:2:{s:4:\"name\";s:10:\"Subscriber\";s:12:\"capabilities\";a:2:{s:4:\"read\";b:1;s:7:\"level_0\";b:1;}}}', 'yes');
INSERT INTO `wp_options` VALUES (96, 'fresh_site', '0', 'yes');
INSERT INTO `wp_options` VALUES (97, 'WPLANG', 'zh_CN', 'yes');
INSERT INTO `wp_options` VALUES (98, 'widget_search', 'a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES (99, 'widget_recent-posts', 'a:2:{i:2;a:2:{s:5:\"title\";s:0:\"\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES (100, 'widget_recent-comments', 'a:2:{i:2;a:2:{s:5:\"title\";s:21:\"原创微信公众号\";s:6:\"number\";i:5;}s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES (101, 'widget_archives', 'a:2:{i:2;a:3:{s:5:\"title\";s:0:\"\";s:5:\"count\";i:0;s:8:\"dropdown\";i:0;}s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES (102, 'widget_meta', 'a:2:{i:2;a:1:{s:5:\"title\";s:0:\"\";}s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES (103, 'sidebars_widgets', 'a:4:{s:19:\"wp_inactive_widgets\";a:2:{i:0;s:10:\"archives-2\";i:1;s:6:\"meta-2\";}s:16:\"wordstar-sidebar\";a:4:{i:0;s:8:\"search-2\";i:1;s:13:\"media_image-3\";i:2;s:13:\"media_image-4\";i:3;s:12:\"categories-2\";}s:22:\"wordstar-social-widget\";a:0:{}s:13:\"array_version\";i:3;}', 'yes');
INSERT INTO `wp_options` VALUES (104, 'cron', 'a:7:{i:1585362015;a:1:{s:28:\"wp_statistics_add_visit_hook\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1585362273;a:1:{s:30:\"wp_scheduled_auto_draft_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1585364081;a:1:{s:34:\"wp_privacy_delete_old_export_files\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:6:\"hourly\";s:4:\"args\";a:0:{}s:8:\"interval\";i:3600;}}}i:1585403681;a:3:{s:16:\"wp_version_check\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:17:\"wp_update_plugins\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}s:16:\"wp_update_themes\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:10:\"twicedaily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:43200;}}}i:1585446880;a:1:{s:32:\"recovery_mode_clean_expired_keys\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}i:1585447597;a:2:{s:19:\"wp_scheduled_delete\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}s:25:\"delete_expired_transients\";a:1:{s:32:\"40cd750bba9870f18aada2478b24840a\";a:3:{s:8:\"schedule\";s:5:\"daily\";s:4:\"args\";a:0:{}s:8:\"interval\";i:86400;}}}s:7:\"version\";i:2;}', 'yes');
INSERT INTO `wp_options` VALUES (105, 'widget_pages', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES (106, 'widget_calendar', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES (107, 'widget_media_audio', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES (108, 'widget_media_image', 'a:3:{s:12:\"_multiwidget\";i:1;i:3;a:15:{s:4:\"size\";s:6:\"medium\";s:5:\"width\";i:0;s:6:\"height\";i:0;s:7:\"caption\";s:0:\"\";s:3:\"alt\";s:0:\"\";s:9:\"link_type\";s:6:\"custom\";s:8:\"link_url\";s:0:\"\";s:13:\"image_classes\";s:0:\"\";s:12:\"link_classes\";s:0:\"\";s:8:\"link_rel\";s:0:\"\";s:17:\"link_target_blank\";b:0;s:11:\"image_title\";s:0:\"\";s:13:\"attachment_id\";i:0;s:3:\"url\";s:0:\"\";s:5:\"title\";s:0:\"\";}i:4;a:15:{s:4:\"size\";s:4:\"full\";s:5:\"width\";i:258;s:6:\"height\";i:258;s:7:\"caption\";s:0:\"\";s:3:\"alt\";s:0:\"\";s:9:\"link_type\";s:6:\"custom\";s:8:\"link_url\";s:0:\"\";s:13:\"image_classes\";s:0:\"\";s:12:\"link_classes\";s:0:\"\";s:8:\"link_rel\";s:0:\"\";s:17:\"link_target_blank\";b:0;s:11:\"image_title\";s:0:\"\";s:13:\"attachment_id\";i:41;s:3:\"url\";s:89:\"https://www.javashitang.com/wp-content/uploads/2020/03/qrcode_for_gh_3babbb21d155_258.jpg\";s:5:\"title\";s:33:\"一个有干货的微信公众号\";}}', 'yes');
INSERT INTO `wp_options` VALUES (109, 'widget_media_gallery', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES (110, 'widget_media_video', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES (111, 'nonce_key', 'FXS (6wJMx/1G[:BNsF(Seq602iP(a-LDF_7=3?chr*(-A6PGRL%^U:27n:5Wn|n', 'no');
INSERT INTO `wp_options` VALUES (112, 'nonce_salt', 'hNr#>wo#/e2INBDNYhw@:)9$.xxqi)O!L9,al=vrVNS,chJypr[@#5E)g!TZo*;-', 'no');
INSERT INTO `wp_options` VALUES (113, 'widget_tag_cloud', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES (114, 'widget_nav_menu', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES (115, 'widget_custom_html', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES (117, 'recovery_keys', 'a:0:{}', 'yes');
INSERT INTO `wp_options` VALUES (119, 'secure_auth_key', 'K)aK/DHq_|z}>OZ-U9~j/C>e^c tmd>=dp#i<b=14XNl[`8znS(+V.+Uw!#{5Jjo', 'no');
INSERT INTO `wp_options` VALUES (120, 'secure_auth_salt', '%uI*O7n$U[;L%9B;jUSj#~O+d|=]D4w 5iy2Kp]L#`7/LZ>GOq>|p9q(WBdSPuw$', 'no');
INSERT INTO `wp_options` VALUES (121, 'logged_in_key', 'A-E#qq*<;Oe}buPaNIo{,=08m75A*CWuzf^O)3%pl1fmgVc)k-}sa2y,#=kB} 7K', 'no');
INSERT INTO `wp_options` VALUES (122, 'logged_in_salt', 'Woj0)`LdPcESQ_EZy<}q9)fbt;X?k^N<ZruP-,qn#xK}WmpSTUz#1fbtXYJ.A>Cg', 'no');
INSERT INTO `wp_options` VALUES (133, '_site_transient_timeout_php_check_a4e7a3af7060c530d791075f6e3eb5fa', '1585878895', 'no');
INSERT INTO `wp_options` VALUES (134, '_site_transient_php_check_a4e7a3af7060c530d791075f6e3eb5fa', 'a:5:{s:19:\"recommended_version\";s:3:\"7.3\";s:15:\"minimum_version\";s:6:\"5.6.20\";s:12:\"is_supported\";b:1;s:9:\"is_secure\";b:1;s:13:\"is_acceptable\";b:1;}', 'no');
INSERT INTO `wp_options` VALUES (137, 'can_compress_scripts', '1', 'no');
INSERT INTO `wp_options` VALUES (141, 'theme_mods_twentytwenty', 'a:2:{s:18:\"custom_css_post_id\";i:-1;s:16:\"sidebars_widgets\";a:2:{s:4:\"time\";i:1585275042;s:4:\"data\";a:3:{s:19:\"wp_inactive_widgets\";a:0:{}s:9:\"sidebar-1\";a:3:{i:0;s:8:\"search-2\";i:1;s:14:\"recent-posts-2\";i:2;s:17:\"recent-comments-2\";}s:9:\"sidebar-2\";a:3:{i:0;s:10:\"archives-2\";i:1;s:12:\"categories-2\";i:2;s:6:\"meta-2\";}}}}', 'yes');
INSERT INTO `wp_options` VALUES (142, '_site_transient_timeout_browser_97fc230848bc304ccee289a55f3e5339', '1585879598', 'no');
INSERT INTO `wp_options` VALUES (143, '_site_transient_browser_97fc230848bc304ccee289a55f3e5339', 'a:10:{s:4:\"name\";s:6:\"Chrome\";s:7:\"version\";s:13:\"80.0.3987.132\";s:8:\"platform\";s:7:\"Windows\";s:10:\"update_url\";s:29:\"https://www.google.com/chrome\";s:7:\"img_src\";s:43:\"http://s.w.org/images/browsers/chrome.png?1\";s:11:\"img_src_ssl\";s:44:\"https://s.w.org/images/browsers/chrome.png?1\";s:15:\"current_version\";s:2:\"18\";s:7:\"upgrade\";b:0;s:8:\"insecure\";b:0;s:6:\"mobile\";b:0;}', 'no');
INSERT INTO `wp_options` VALUES (154, 'current_theme', 'WordStar', 'yes');
INSERT INTO `wp_options` VALUES (155, 'theme_mods_wordstar', 'a:3:{i:0;b:0;s:18:\"nav_menu_locations\";a:1:{s:7:\"primary\";i:7;}s:18:\"custom_css_post_id\";i:-1;}', 'yes');
INSERT INTO `wp_options` VALUES (156, 'theme_switched', '', 'yes');
INSERT INTO `wp_options` VALUES (159, '_transient_timeout_plugin_slugs', '1585363463', 'no');
INSERT INTO `wp_options` VALUES (160, '_transient_plugin_slugs', 'a:4:{i:0;s:19:\"akismet/akismet.php\";i:1;s:9:\"hello.php\";i:2;s:31:\"wp-statistics/wp-statistics.php\";i:3;s:21:\"beepress/beepress.php\";}', 'no');
INSERT INTO `wp_options` VALUES (161, 'recently_activated', 'a:0:{}', 'yes');
INSERT INTO `wp_options` VALUES (173, 'bp_count', '5', 'yes');
INSERT INTO `wp_options` VALUES (174, 'wp_statistics_plugin_version', '12.6.12', 'yes');
INSERT INTO `wp_options` VALUES (175, 'wp_statistics_db_version', '12.6.12', 'yes');
INSERT INTO `wp_options` VALUES (176, 'wp_statistics', 'a:28:{s:18:\"pending_db_updates\";a:2:{s:13:\"date_ip_agent\";b:0;s:11:\"unique_date\";b:0;}s:16:\"search_converted\";i:1;s:9:\"robotlist\";s:1715:\"007ac9\n5bot\nA6-Indexer\nAbachoBOT\naccoona\nAcoiRobot\nAddThis.com\nADmantX\nAdsBot-Google\nadvbot\nAhrefsBot\naiHitBot\nalexa\nalphabot\nAltaVista\nAntivirusPro\nanyevent\nappie\nApplebot\narchive.org_bot\nAsk Jeeves\nASPSeek\nBaiduspider\nBenjojo\nBeetleBot\nbingbot\nBlekkobot\nblexbot\nBOT for JCE\nbubing\nButterfly\ncbot\nclamantivirus\ncliqzbot\nclumboot\ncoccoc\ncrawler\nCrocCrawler\ncrowsnest.tv\ndbot\ndl2bot\ndotbot\ndownloadbot\nduckduckgo\nDumbot\nEasouSpider\neStyle\nEveryoneSocialBot\nExabot\nezooms\nfacebook.com\nfacebookexternalhit\nFAST\nFeedfetcher-Google\nfeedzirra\nfindxbot\nFirfly\nFriendFeedBot\nfroogle\nGeonaBot\nGigabot\ngirafabot\ngimme60bot\nglbot\nGooglebot\nGroupHigh\nia_archiver\nIDBot\nInfoSeek\ninktomi\nIstellaBot\njetmon\nKraken\nLeikibot\nlinkapediabot\nlinkdexbot\nLinkpadBot\nLoadTimeBot\nlooksmart\nltx71\nLycos\nMail.RU_Bot\nMe.dium\nmeanpathbot\nmediabot\nmedialbot\nMediapartners-Google\nMJ12bot\nmsnbot\nMojeekBot\nmonobot\nmoreover\nMRBOT\nNationalDirectory\nNerdyBot\nNetcraftSurveyAgent\nniki-bot\nnutch\nOpenbot\nOrangeBot\nowler\np4Bot\nPaperLiBot\npageanalyzer\nPagesInventory\nPimonster\nporkbun\npr-cy\nproximic\npwbot\nr4bot\nrabaz\nRambler\nRankivabot\nrevip\nriddler\nrogerbot\nScooter\nScrubby\nscrapy.org\nSearchmetricsBot\nsees.co\nSemanticBot\nSemrushBot\nSeznamBot\nsfFeedReader\nshareaholic-bot\nsistrix\nSiteExplorer\nSlurp\nSocialradarbot\nSocialSearch\nSogou web spider\nSpade\nspbot\nSpiderLing\nSputnikBot\nSuperfeedr\nSurveyBot\nTechnoratiSnoop\nTECNOSEEK\nTeoma\ntrendictionbot\nTweetmemeBot\nTwiceler\nTwitterbot\nTwitturls\nu2bot\nuMBot-LN\nuni5download\nunrulymedia\nUptimeRobot\nURL_Spider_SQL\nVagabondo\nvBSEO\nWASALive-Bot\nWebAlta Crawler\nWebBug\nWebFindBot\nWebMasterAid\nWeSEE\nWotbox\nwsowner\nwsr-agent\nwww.galaxy.com\nx100bot\nXoviBot\nxzybot\nyandex\nYahoo\nYammybot\nYoudaoBot\nZyBorg\nZemlyaCrawl\";s:13:\"anonymize_ips\";b:0;s:5:\"geoip\";b:0;s:10:\"useronline\";b:1;s:6:\"visits\";b:1;s:8:\"visitors\";b:1;s:5:\"pages\";b:1;s:12:\"check_online\";s:3:\"120\";s:8:\"menu_bar\";b:0;s:11:\"coefficient\";s:1:\"1\";s:12:\"stats_report\";b:0;s:11:\"time_report\";s:5:\"daily\";s:11:\"send_report\";s:4:\"mail\";s:14:\"content_report\";s:0:\"\";s:12:\"update_geoip\";b:1;s:8:\"store_ua\";b:0;s:21:\"exclude_administrator\";b:1;s:18:\"disable_se_clearch\";b:1;s:16:\"disable_se_qwant\";b:1;s:16:\"disable_se_baidu\";b:1;s:14:\"disable_se_ask\";b:1;s:8:\"map_type\";s:6:\"jqvmap\";s:9:\"ip_method\";s:11:\"REMOTE_ADDR\";s:18:\"force_robot_update\";b:1;s:17:\"show_welcome_page\";b:0;s:23:\"first_show_welcome_page\";b:1;}', 'yes');
INSERT INTO `wp_options` VALUES (177, 'widget_wp_statistics_widget', 'a:1:{s:12:\"_multiwidget\";i:1;}', 'yes');
INSERT INTO `wp_options` VALUES (178, 'wp_statistics_check_useronline', '1585390672', 'yes');
INSERT INTO `wp_options` VALUES (186, 'is_validate', '1', 'yes');
INSERT INTO `wp_options` VALUES (194, 'auth_key', '<3T+)nIN/jpkZm)20ggBkBhToe|$(EkBUFFHwV`}Uz8,nFv#Z)TWk<3,93mITO^[', 'no');
INSERT INTO `wp_options` VALUES (195, 'auth_salt', 'Z_l.%DTDL>QQeg4+1RUjf$L,T?2!23}FK(Ax@#L.PVsw*%6fmmm^^x5qsL:c9+c3', 'no');
INSERT INTO `wp_options` VALUES (198, 'nav_menu_options', 'a:2:{i:0;b:0;s:8:\"auto_add\";a:0:{}}', 'yes');
INSERT INTO `wp_options` VALUES (374, '_site_transient_timeout_theme_roots', '1585362405', 'no');
INSERT INTO `wp_options` VALUES (375, '_site_transient_theme_roots', 'a:4:{s:14:\"twentynineteen\";s:7:\"/themes\";s:15:\"twentyseventeen\";s:7:\"/themes\";s:12:\"twentytwenty\";s:7:\"/themes\";s:8:\"wordstar\";s:7:\"/themes\";}', 'no');
INSERT INTO `wp_options` VALUES (377, '_site_transient_update_core', 'O:8:\"stdClass\":4:{s:7:\"updates\";a:2:{i:0;O:8:\"stdClass\":10:{s:8:\"response\";s:6:\"latest\";s:8:\"download\";s:65:\"https://downloads.wordpress.org/release/zh_CN/wordpress-5.3.2.zip\";s:6:\"locale\";s:5:\"zh_CN\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:65:\"https://downloads.wordpress.org/release/zh_CN/wordpress-5.3.2.zip\";s:10:\"no_content\";b:0;s:11:\"new_bundled\";b:0;s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"5.3.2\";s:7:\"version\";s:5:\"5.3.2\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.3\";s:15:\"partial_version\";s:0:\"\";}i:1;O:8:\"stdClass\":10:{s:8:\"response\";s:6:\"latest\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-5.3.2.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-5.3.2.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-5.3.2-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-5.3.2-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"5.3.2\";s:7:\"version\";s:5:\"5.3.2\";s:11:\"php_version\";s:6:\"5.6.20\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"5.3\";s:15:\"partial_version\";s:0:\"\";}}s:12:\"last_checked\";i:1585360618;s:15:\"version_checked\";s:5:\"5.3.2\";s:12:\"translations\";a:0:{}}', 'no');
INSERT INTO `wp_options` VALUES (378, '_site_transient_update_themes', 'O:8:\"stdClass\":4:{s:12:\"last_checked\";i:1585360620;s:7:\"checked\";a:4:{s:14:\"twentynineteen\";s:3:\"1.4\";s:15:\"twentyseventeen\";s:3:\"2.2\";s:12:\"twentytwenty\";s:3:\"1.1\";s:8:\"wordstar\";s:5:\"4.3.1\";}s:8:\"response\";a:0:{}s:12:\"translations\";a:0:{}}', 'no');
INSERT INTO `wp_options` VALUES (379, '_site_transient_update_plugins', 'O:8:\"stdClass\":5:{s:12:\"last_checked\";i:1585360624;s:7:\"checked\";a:4:{s:19:\"akismet/akismet.php\";s:5:\"4.1.3\";s:9:\"hello.php\";s:5:\"1.7.2\";s:31:\"wp-statistics/wp-statistics.php\";s:7:\"12.6.12\";s:21:\"beepress/beepress.php\";s:5:\"6.3.3\";}s:8:\"response\";a:1:{s:19:\"akismet/akismet.php\";O:8:\"stdClass\":12:{s:2:\"id\";s:21:\"w.org/plugins/akismet\";s:4:\"slug\";s:7:\"akismet\";s:6:\"plugin\";s:19:\"akismet/akismet.php\";s:11:\"new_version\";s:5:\"4.1.4\";s:3:\"url\";s:38:\"https://wordpress.org/plugins/akismet/\";s:7:\"package\";s:56:\"https://downloads.wordpress.org/plugin/akismet.4.1.4.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:59:\"https://ps.w.org/akismet/assets/icon-256x256.png?rev=969272\";s:2:\"1x\";s:59:\"https://ps.w.org/akismet/assets/icon-128x128.png?rev=969272\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:61:\"https://ps.w.org/akismet/assets/banner-772x250.jpg?rev=479904\";}s:11:\"banners_rtl\";a:0:{}s:6:\"tested\";s:3:\"5.4\";s:12:\"requires_php\";b:0;s:13:\"compatibility\";O:8:\"stdClass\":0:{}}}s:12:\"translations\";a:0:{}s:9:\"no_update\";a:3:{s:9:\"hello.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:25:\"w.org/plugins/hello-dolly\";s:4:\"slug\";s:11:\"hello-dolly\";s:6:\"plugin\";s:9:\"hello.php\";s:11:\"new_version\";s:5:\"1.7.2\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/hello-dolly/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/plugin/hello-dolly.1.7.2.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:64:\"https://ps.w.org/hello-dolly/assets/icon-256x256.jpg?rev=2052855\";s:2:\"1x\";s:64:\"https://ps.w.org/hello-dolly/assets/icon-128x128.jpg?rev=2052855\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:66:\"https://ps.w.org/hello-dolly/assets/banner-772x250.jpg?rev=2052855\";}s:11:\"banners_rtl\";a:0:{}}s:31:\"wp-statistics/wp-statistics.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:27:\"w.org/plugins/wp-statistics\";s:4:\"slug\";s:13:\"wp-statistics\";s:6:\"plugin\";s:31:\"wp-statistics/wp-statistics.php\";s:11:\"new_version\";s:7:\"12.6.12\";s:3:\"url\";s:44:\"https://wordpress.org/plugins/wp-statistics/\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/plugin/wp-statistics.12.6.12.zip\";s:5:\"icons\";a:3:{s:2:\"2x\";s:66:\"https://ps.w.org/wp-statistics/assets/icon-256x256.png?rev=1673578\";s:2:\"1x\";s:58:\"https://ps.w.org/wp-statistics/assets/icon.svg?rev=2041108\";s:3:\"svg\";s:58:\"https://ps.w.org/wp-statistics/assets/icon.svg?rev=2041108\";}s:7:\"banners\";a:1:{s:2:\"1x\";s:68:\"https://ps.w.org/wp-statistics/assets/banner-772x250.png?rev=2041108\";}s:11:\"banners_rtl\";a:0:{}}s:21:\"beepress/beepress.php\";O:8:\"stdClass\":9:{s:2:\"id\";s:22:\"w.org/plugins/beepress\";s:4:\"slug\";s:8:\"beepress\";s:6:\"plugin\";s:21:\"beepress/beepress.php\";s:11:\"new_version\";s:5:\"6.3.3\";s:3:\"url\";s:39:\"https://wordpress.org/plugins/beepress/\";s:7:\"package\";s:51:\"https://downloads.wordpress.org/plugin/beepress.zip\";s:5:\"icons\";a:2:{s:2:\"2x\";s:61:\"https://ps.w.org/beepress/assets/icon-256x256.png?rev=1632878\";s:2:\"1x\";s:61:\"https://ps.w.org/beepress/assets/icon-128x128.png?rev=1632878\";}s:7:\"banners\";a:0:{}s:11:\"banners_rtl\";a:0:{}}}}', 'no');
INSERT INTO `wp_options` VALUES (380, '_transient_timeout_dash_v2_5438fb5baf31c513fff2b9a1067656a6', '1585404091', 'no');
INSERT INTO `wp_options` VALUES (381, '_transient_dash_v2_5438fb5baf31c513fff2b9a1067656a6', '<div class=\"rss-widget\"><ul><li>发生了一个错误，feed可能宕，请稍后再试。</li></ul></div><div class=\"rss-widget\"><ul><li>发生了一个错误，feed可能宕，请稍后再试。</li></ul></div>', 'no');
INSERT INTO `wp_options` VALUES (382, '_site_transient_timeout_community-events-93661833d5ba9a27a7878bdfc530cc7c', '1585404093', 'no');
INSERT INTO `wp_options` VALUES (383, '_site_transient_community-events-93661833d5ba9a27a7878bdfc530cc7c', 'a:3:{s:9:\"sandboxed\";b:0;s:8:\"location\";a:1:{s:2:\"ip\";s:12:\"120.244.56.0\";}s:6:\"events\";a:0:{}}', 'no');
INSERT INTO `wp_options` VALUES (384, 'wp_statistics_overview_page_ads', 'a:3:{s:9:\"timestamp\";i:1585389706;s:3:\"ads\";a:6:{s:2:\"ID\";s:8:\"variant5\";s:5:\"title\";s:41:\"The world\'s simplest Rank Tracker for SEO\";s:4:\"link\";s:146:\"https://www.wincher.com/?referer=wp-statistics&adreferer=variant5&utm_source=wp-statistics&utm_medium=banner&utm_campaign=3mo&utm_content=variant5\";s:5:\"image\";s:20:\"https://j.mp/2KOjaHc\";s:7:\"_target\";s:3:\"yes\";s:6:\"status\";s:3:\"yes\";}s:4:\"view\";s:0:\"\";}', 'no');
INSERT INTO `wp_options` VALUES (385, '_transient_timeout_wps_top_referring', '1585404107', 'no');
INSERT INTO `wp_options` VALUES (386, '_transient_wps_top_referring', 'a:3:{s:19:\"www.javashitang.com\";s:2:\"30\";s:9:\"baidu.com\";s:1:\"2\";s:17:\"www.google.com.hk\";s:1:\"1\";}', 'no');
INSERT INTO `wp_options` VALUES (387, 'wp_statistics_referrals_detail', 'a:3:{s:19:\"www.javashitang.com\";a:3:{s:2:\"ip\";s:13:\"49.232.51.103\";s:7:\"country\";s:0:\"\";s:5:\"title\";s:0:\"\";}s:9:\"baidu.com\";a:3:{s:2:\"ip\";s:12:\"39.156.69.79\";s:7:\"country\";s:0:\"\";s:5:\"title\";s:0:\"\";}s:17:\"www.google.com.hk\";a:3:{s:2:\"ip\";s:10:\"31.13.84.8\";s:7:\"country\";s:0:\"\";s:5:\"title\";s:0:\"\";}}', 'no');
INSERT INTO `wp_options` VALUES (396, 'category_children', 'a:0:{}', 'yes');
INSERT INTO `wp_options` VALUES (439, '_transient_is_multi_author', '0', 'yes');
INSERT INTO `wp_options` VALUES (440, '_transient_wordstar_categories', '2', 'yes');

-- ----------------------------
-- Table structure for wp_postmeta
-- ----------------------------
DROP TABLE IF EXISTS `wp_postmeta`;
CREATE TABLE `wp_postmeta`  (
  `meta_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `post_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `meta_key` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NULL DEFAULT NULL,
  `meta_value` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NULL,
  PRIMARY KEY (`meta_id`) USING BTREE,
  INDEX `post_id`(`post_id`) USING BTREE,
  INDEX `meta_key`(`meta_key`(191)) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 464 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_520_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of wp_postmeta
-- ----------------------------
INSERT INTO `wp_postmeta` VALUES (1, 2, '_wp_page_template', 'default');
INSERT INTO `wp_postmeta` VALUES (2, 3, '_wp_page_template', 'default');
INSERT INTO `wp_postmeta` VALUES (3, 5, '_edit_lock', '1585275873:1');
INSERT INTO `wp_postmeta` VALUES (4, 6, '_menu_item_type', 'taxonomy');
INSERT INTO `wp_postmeta` VALUES (5, 6, '_menu_item_menu_item_parent', '0');
INSERT INTO `wp_postmeta` VALUES (6, 6, '_menu_item_object_id', '2');
INSERT INTO `wp_postmeta` VALUES (7, 6, '_menu_item_object', 'category');
INSERT INTO `wp_postmeta` VALUES (8, 6, '_menu_item_target', '');
INSERT INTO `wp_postmeta` VALUES (9, 6, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (10, 6, '_menu_item_xfn', '');
INSERT INTO `wp_postmeta` VALUES (11, 6, '_menu_item_url', '');
INSERT INTO `wp_postmeta` VALUES (13, 7, '_menu_item_type', 'taxonomy');
INSERT INTO `wp_postmeta` VALUES (14, 7, '_menu_item_menu_item_parent', '0');
INSERT INTO `wp_postmeta` VALUES (15, 7, '_menu_item_object_id', '3');
INSERT INTO `wp_postmeta` VALUES (16, 7, '_menu_item_object', 'category');
INSERT INTO `wp_postmeta` VALUES (17, 7, '_menu_item_target', '');
INSERT INTO `wp_postmeta` VALUES (18, 7, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (19, 7, '_menu_item_xfn', '');
INSERT INTO `wp_postmeta` VALUES (20, 7, '_menu_item_url', '');
INSERT INTO `wp_postmeta` VALUES (22, 8, '_menu_item_type', 'taxonomy');
INSERT INTO `wp_postmeta` VALUES (23, 8, '_menu_item_menu_item_parent', '0');
INSERT INTO `wp_postmeta` VALUES (24, 8, '_menu_item_object_id', '4');
INSERT INTO `wp_postmeta` VALUES (25, 8, '_menu_item_object', 'category');
INSERT INTO `wp_postmeta` VALUES (26, 8, '_menu_item_target', '');
INSERT INTO `wp_postmeta` VALUES (27, 8, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (28, 8, '_menu_item_xfn', '');
INSERT INTO `wp_postmeta` VALUES (29, 8, '_menu_item_url', '');
INSERT INTO `wp_postmeta` VALUES (31, 9, '_menu_item_type', 'taxonomy');
INSERT INTO `wp_postmeta` VALUES (32, 9, '_menu_item_menu_item_parent', '0');
INSERT INTO `wp_postmeta` VALUES (33, 9, '_menu_item_object_id', '6');
INSERT INTO `wp_postmeta` VALUES (34, 9, '_menu_item_object', 'category');
INSERT INTO `wp_postmeta` VALUES (35, 9, '_menu_item_target', '');
INSERT INTO `wp_postmeta` VALUES (36, 9, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (37, 9, '_menu_item_xfn', '');
INSERT INTO `wp_postmeta` VALUES (38, 9, '_menu_item_url', '');
INSERT INTO `wp_postmeta` VALUES (40, 10, '_menu_item_type', 'taxonomy');
INSERT INTO `wp_postmeta` VALUES (41, 10, '_menu_item_menu_item_parent', '0');
INSERT INTO `wp_postmeta` VALUES (42, 10, '_menu_item_object_id', '5');
INSERT INTO `wp_postmeta` VALUES (43, 10, '_menu_item_object', 'category');
INSERT INTO `wp_postmeta` VALUES (44, 10, '_menu_item_target', '');
INSERT INTO `wp_postmeta` VALUES (45, 10, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (46, 10, '_menu_item_xfn', '');
INSERT INTO `wp_postmeta` VALUES (47, 10, '_menu_item_url', '');
INSERT INTO `wp_postmeta` VALUES (49, 11, 'is_bp', '1');
INSERT INTO `wp_postmeta` VALUES (50, 12, '_wp_attached_file', '2020/03/beepress6-1585277081.jpeg');
INSERT INTO `wp_postmeta` VALUES (51, 12, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:897;s:6:\"height\";i:383;s:4:\"file\";s:33:\"2020/03/beepress6-1585277081.jpeg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress6-1585277081-300x128.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:128;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress6-1585277081-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress6-1585277081-768x328.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:328;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress6-1585277081-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress6-1585277081-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress6-1585277081-703x300.jpeg\";s:5:\"width\";i:703;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (52, 11, '_thumbnail_id', '12');
INSERT INTO `wp_postmeta` VALUES (53, 13, '_wp_attached_file', '2020/03/beepress0-1585277081.png');
INSERT INTO `wp_postmeta` VALUES (54, 13, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:833;s:6:\"height\";i:325;s:4:\"file\";s:32:\"2020/03/beepress0-1585277081.png\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress0-1585277081-300x117.png\";s:5:\"width\";i:300;s:6:\"height\";i:117;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress0-1585277081-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress0-1585277081-768x300.png\";s:5:\"width\";i:768;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress0-1585277081-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress0-1585277081-400x250.png\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress0-1585277081-769x300.png\";s:5:\"width\";i:769;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (55, 14, '_wp_attached_file', '2020/03/beepress5-1585277082.jpg');
INSERT INTO `wp_postmeta` VALUES (56, 14, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:371;s:4:\"file\";s:32:\"2020/03/beepress5-1585277082.jpg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress5-1585277082-300x103.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:103;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress5-1585277082-1024x352.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:352;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress5-1585277082-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress5-1585277082-768x264.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:264;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress5-1585277082-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress5-1585277082-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress5-1585277082-850x292.jpg\";s:5:\"width\";i:850;s:6:\"height\";i:292;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (57, 15, '_wp_attached_file', '2020/03/beepress9-1585277082.jpg');
INSERT INTO `wp_postmeta` VALUES (58, 15, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:441;s:4:\"file\";s:32:\"2020/03/beepress9-1585277082.jpg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress9-1585277082-300x123.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:123;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress9-1585277082-1024x418.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:418;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress9-1585277082-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress9-1585277082-768x314.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:314;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress9-1585277082-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress9-1585277082-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress9-1585277082-735x300.jpg\";s:5:\"width\";i:735;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (59, 16, '_wp_attached_file', '2020/03/beepress7-1585277083.png');
INSERT INTO `wp_postmeta` VALUES (60, 16, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:632;s:6:\"height\";i:230;s:4:\"file\";s:32:\"2020/03/beepress7-1585277083.png\";s:5:\"sizes\";a:4:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress7-1585277083-300x109.png\";s:5:\"width\";i:300;s:6:\"height\";i:109;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress7-1585277083-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress7-1585277083-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress7-1585277083-400x230.png\";s:5:\"width\";i:400;s:6:\"height\";i:230;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (61, 17, '_wp_attached_file', '2020/03/beepress3-1585277083.png');
INSERT INTO `wp_postmeta` VALUES (62, 17, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:466;s:6:\"height\";i:254;s:4:\"file\";s:32:\"2020/03/beepress3-1585277083.png\";s:5:\"sizes\";a:4:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress3-1585277083-300x164.png\";s:5:\"width\";i:300;s:6:\"height\";i:164;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress3-1585277083-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress3-1585277083-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress3-1585277083-400x250.png\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (63, 18, '_wp_attached_file', '2020/03/beepress10-1585277083.png');
INSERT INTO `wp_postmeta` VALUES (64, 18, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:245;s:6:\"height\";i:410;s:4:\"file\";s:33:\"2020/03/beepress10-1585277083.png\";s:5:\"sizes\";a:5:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress10-1585277083-179x300.png\";s:5:\"width\";i:179;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress10-1585277083-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress10-1585277083-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress10-1585277083-245x250.png\";s:5:\"width\";i:245;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress10-1585277083-179x300.png\";s:5:\"width\";i:179;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (65, 19, '_wp_attached_file', '2020/03/beepress10-1585277084.png');
INSERT INTO `wp_postmeta` VALUES (66, 19, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:64;s:6:\"height\";i:64;s:4:\"file\";s:33:\"2020/03/beepress10-1585277084.png\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (67, 20, '_wp_attached_file', '2020/03/beepress7-1585277084.png');
INSERT INTO `wp_postmeta` VALUES (68, 20, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:64;s:6:\"height\";i:64;s:4:\"file\";s:32:\"2020/03/beepress7-1585277084.png\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (69, 21, '_wp_attached_file', '2020/03/beepress8-1585277084.png');
INSERT INTO `wp_postmeta` VALUES (70, 21, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:64;s:6:\"height\";i:64;s:4:\"file\";s:32:\"2020/03/beepress8-1585277084.png\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (71, 22, '_wp_attached_file', '2020/03/beepress4-1585277084.png');
INSERT INTO `wp_postmeta` VALUES (72, 22, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:64;s:6:\"height\";i:64;s:4:\"file\";s:32:\"2020/03/beepress4-1585277084.png\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (73, 23, '_wp_attached_file', '2020/03/beepress8-1585277085.gif');
INSERT INTO `wp_postmeta` VALUES (74, 23, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:600;s:6:\"height\";i:600;s:4:\"file\";s:32:\"2020/03/beepress8-1585277085.gif\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress8-1585277085-300x300.gif\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/gif\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress8-1585277085-150x150.gif\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/gif\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress8-1585277085-150x150.gif\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/gif\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress8-1585277085-400x250.gif\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/gif\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress8-1585277085-300x300.gif\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/gif\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:32:\"beepress8-1585277085-600x500.gif\";s:5:\"width\";i:600;s:6:\"height\";i:500;s:9:\"mime-type\";s:9:\"image/gif\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (75, 24, '_wp_attached_file', '2020/03/beepress6-1585277085.jpeg');
INSERT INTO `wp_postmeta` VALUES (76, 24, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:82;s:6:\"height\";i:92;s:4:\"file\";s:33:\"2020/03/beepress6-1585277085.jpeg\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (77, 25, '_wp_attached_file', '2020/03/beepress5-1585277085.png');
INSERT INTO `wp_postmeta` VALUES (78, 25, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:66;s:6:\"height\";i:65;s:4:\"file\";s:32:\"2020/03/beepress5-1585277085.png\";s:5:\"sizes\";a:0:{}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (81, 11, '_wp_old_date', '2020-03-27');
INSERT INTO `wp_postmeta` VALUES (82, 27, 'is_bp', '1');
INSERT INTO `wp_postmeta` VALUES (83, 28, '_wp_attached_file', '2020/03/beepress9-1585277132.jpeg');
INSERT INTO `wp_postmeta` VALUES (84, 28, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:800;s:6:\"height\";i:340;s:4:\"file\";s:33:\"2020/03/beepress9-1585277132.jpeg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress9-1585277132-300x128.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:128;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress9-1585277132-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress9-1585277132-768x326.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:326;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress9-1585277132-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress9-1585277132-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress9-1585277132-706x300.jpeg\";s:5:\"width\";i:706;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (85, 27, '_thumbnail_id', '28');
INSERT INTO `wp_postmeta` VALUES (86, 29, '_wp_attached_file', '2020/03/beepress7-1585277132.png');
INSERT INTO `wp_postmeta` VALUES (87, 29, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:813;s:6:\"height\";i:327;s:4:\"file\";s:32:\"2020/03/beepress7-1585277132.png\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress7-1585277132-300x121.png\";s:5:\"width\";i:300;s:6:\"height\";i:121;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress7-1585277132-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress7-1585277132-768x309.png\";s:5:\"width\";i:768;s:6:\"height\";i:309;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress7-1585277132-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress7-1585277132-400x250.png\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress7-1585277132-746x300.png\";s:5:\"width\";i:746;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (90, 27, '_wp_old_date', '2020-03-27');
INSERT INTO `wp_postmeta` VALUES (91, 31, 'is_bp', '1');
INSERT INTO `wp_postmeta` VALUES (92, 32, '_wp_attached_file', '2020/03/beepress2-1585277177.jpeg');
INSERT INTO `wp_postmeta` VALUES (93, 32, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:539;s:6:\"height\";i:230;s:4:\"file\";s:33:\"2020/03/beepress2-1585277177.jpeg\";s:5:\"sizes\";a:4:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress2-1585277177-300x128.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:128;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress2-1585277177-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress2-1585277177-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress2-1585277177-400x230.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:230;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (94, 31, '_thumbnail_id', '32');
INSERT INTO `wp_postmeta` VALUES (95, 33, '_wp_attached_file', '2020/03/beepress5-1585277178.jpg');
INSERT INTO `wp_postmeta` VALUES (96, 33, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:834;s:6:\"height\";i:564;s:4:\"file\";s:32:\"2020/03/beepress5-1585277178.jpg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress5-1585277178-300x203.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:203;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress5-1585277178-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress5-1585277178-768x519.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:519;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress5-1585277178-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress5-1585277178-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress5-1585277178-444x300.jpg\";s:5:\"width\";i:444;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:32:\"beepress5-1585277178-834x500.jpg\";s:5:\"width\";i:834;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (97, 34, '_wp_attached_file', '2020/03/beepress3-1585277178.png');
INSERT INTO `wp_postmeta` VALUES (98, 34, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:286;s:4:\"file\";s:32:\"2020/03/beepress3-1585277178.png\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"beepress3-1585277178-300x79.png\";s:5:\"width\";i:300;s:6:\"height\";i:79;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress3-1585277178-1024x271.png\";s:5:\"width\";i:1024;s:6:\"height\";i:271;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress3-1585277178-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress3-1585277178-768x203.png\";s:5:\"width\";i:768;s:6:\"height\";i:203;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress3-1585277178-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress3-1585277178-400x250.png\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress3-1585277178-850x225.png\";s:5:\"width\";i:850;s:6:\"height\";i:225;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (99, 35, '_wp_attached_file', '2020/03/beepress5-1585277179.jpg');
INSERT INTO `wp_postmeta` VALUES (100, 35, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:723;s:6:\"height\";i:819;s:4:\"file\";s:32:\"2020/03/beepress5-1585277179.jpg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress5-1585277179-265x300.jpg\";s:5:\"width\";i:265;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress5-1585277179-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress5-1585277179-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress5-1585277179-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress5-1585277179-265x300.jpg\";s:5:\"width\";i:265;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:32:\"beepress5-1585277179-723x500.jpg\";s:5:\"width\";i:723;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (101, 36, '_wp_attached_file', '2020/03/beepress7-1585277179.jpg');
INSERT INTO `wp_postmeta` VALUES (102, 36, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:773;s:4:\"file\";s:32:\"2020/03/beepress7-1585277179.jpg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress7-1585277179-300x215.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:215;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress7-1585277179-1024x733.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:733;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress7-1585277179-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress7-1585277179-768x550.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:550;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress7-1585277179-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress7-1585277179-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress7-1585277179-419x300.jpg\";s:5:\"width\";i:419;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:33:\"beepress7-1585277179-1080x500.jpg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (103, 37, '_wp_attached_file', '2020/03/beepress3-1585277180.jpg');
INSERT INTO `wp_postmeta` VALUES (104, 37, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:746;s:6:\"height\";i:590;s:4:\"file\";s:32:\"2020/03/beepress3-1585277180.jpg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress3-1585277180-300x237.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:237;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress3-1585277180-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress3-1585277180-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress3-1585277180-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress3-1585277180-379x300.jpg\";s:5:\"width\";i:379;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:32:\"beepress3-1585277180-746x500.jpg\";s:5:\"width\";i:746;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (105, 38, '_wp_attached_file', '2020/03/beepress2-1585277180.jpg');
INSERT INTO `wp_postmeta` VALUES (106, 38, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:626;s:6:\"height\";i:693;s:4:\"file\";s:32:\"2020/03/beepress2-1585277180.jpg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress2-1585277180-271x300.jpg\";s:5:\"width\";i:271;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress2-1585277180-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress2-1585277180-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress2-1585277180-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress2-1585277180-271x300.jpg\";s:5:\"width\";i:271;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:32:\"beepress2-1585277180-626x500.jpg\";s:5:\"width\";i:626;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (109, 31, '_wp_old_date', '2020-03-27');
INSERT INTO `wp_postmeta` VALUES (110, 40, '_edit_lock', '1585277509:1');
INSERT INTO `wp_postmeta` VALUES (111, 41, '_wp_attached_file', '2020/03/qrcode_for_gh_3babbb21d155_258.jpg');
INSERT INTO `wp_postmeta` VALUES (112, 41, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:258;s:6:\"height\";i:258;s:4:\"file\";s:42:\"2020/03/qrcode_for_gh_3babbb21d155_258.jpg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:42:\"qrcode_for_gh_3babbb21d155_258-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:42:\"qrcode_for_gh_3babbb21d155_258-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:42:\"qrcode_for_gh_3babbb21d155_258-258x250.jpg\";s:5:\"width\";i:258;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (113, 40, '_wp_trash_meta_status', 'publish');
INSERT INTO `wp_postmeta` VALUES (114, 40, '_wp_trash_meta_time', '1585277527');
INSERT INTO `wp_postmeta` VALUES (115, 1, '_wp_trash_meta_status', 'publish');
INSERT INTO `wp_postmeta` VALUES (116, 1, '_wp_trash_meta_time', '1585360941');
INSERT INTO `wp_postmeta` VALUES (117, 1, '_wp_desired_post_slug', 'hello-world');
INSERT INTO `wp_postmeta` VALUES (118, 1, '_wp_trash_meta_comments_status', 'a:1:{i:1;s:1:\"1\";}');
INSERT INTO `wp_postmeta` VALUES (119, 43, '_menu_item_type', 'taxonomy');
INSERT INTO `wp_postmeta` VALUES (120, 43, '_menu_item_menu_item_parent', '0');
INSERT INTO `wp_postmeta` VALUES (121, 43, '_menu_item_object_id', '8');
INSERT INTO `wp_postmeta` VALUES (122, 43, '_menu_item_object', 'category');
INSERT INTO `wp_postmeta` VALUES (123, 43, '_menu_item_target', '');
INSERT INTO `wp_postmeta` VALUES (124, 43, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (125, 43, '_menu_item_xfn', '');
INSERT INTO `wp_postmeta` VALUES (126, 43, '_menu_item_url', '');
INSERT INTO `wp_postmeta` VALUES (128, 44, '_wp_trash_meta_status', 'publish');
INSERT INTO `wp_postmeta` VALUES (129, 44, '_wp_trash_meta_time', '1585361080');
INSERT INTO `wp_postmeta` VALUES (130, 45, '_wp_trash_meta_status', 'publish');
INSERT INTO `wp_postmeta` VALUES (131, 45, '_wp_trash_meta_time', '1585361253');
INSERT INTO `wp_postmeta` VALUES (132, 46, '_wp_trash_meta_status', 'publish');
INSERT INTO `wp_postmeta` VALUES (133, 46, '_wp_trash_meta_time', '1585361302');
INSERT INTO `wp_postmeta` VALUES (134, 47, '_menu_item_type', 'taxonomy');
INSERT INTO `wp_postmeta` VALUES (135, 47, '_menu_item_menu_item_parent', '0');
INSERT INTO `wp_postmeta` VALUES (136, 47, '_menu_item_object_id', '9');
INSERT INTO `wp_postmeta` VALUES (137, 47, '_menu_item_object', 'category');
INSERT INTO `wp_postmeta` VALUES (138, 47, '_menu_item_target', '');
INSERT INTO `wp_postmeta` VALUES (139, 47, '_menu_item_classes', 'a:1:{i:0;s:0:\"\";}');
INSERT INTO `wp_postmeta` VALUES (140, 47, '_menu_item_xfn', '');
INSERT INTO `wp_postmeta` VALUES (141, 47, '_menu_item_url', '');
INSERT INTO `wp_postmeta` VALUES (143, 48, 'is_bp', '1');
INSERT INTO `wp_postmeta` VALUES (144, 49, '_wp_attached_file', '2020/03/beepress8-1585361409.jpeg');
INSERT INTO `wp_postmeta` VALUES (145, 49, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:900;s:6:\"height\";i:381;s:4:\"file\";s:33:\"2020/03/beepress8-1585361409.jpeg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361409-300x127.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:127;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361409-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361409-768x325.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:325;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361409-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361409-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361409-709x300.jpeg\";s:5:\"width\";i:709;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (146, 48, '_thumbnail_id', '49');
INSERT INTO `wp_postmeta` VALUES (147, 50, '_wp_attached_file', '2020/03/beepress4-1585361409.jpeg');
INSERT INTO `wp_postmeta` VALUES (148, 50, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:270;s:4:\"file\";s:33:\"2020/03/beepress4-1585361409.jpeg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361409-300x75.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:75;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:34:\"beepress4-1585361409-1024x256.jpeg\";s:5:\"width\";i:1024;s:6:\"height\";i:256;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361409-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361409-768x192.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:192;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361409-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361409-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361409-850x213.jpeg\";s:5:\"width\";i:850;s:6:\"height\";i:213;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (149, 51, '_wp_attached_file', '2020/03/beepress6-1585361410.jpeg');
INSERT INTO `wp_postmeta` VALUES (150, 51, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:462;s:4:\"file\";s:33:\"2020/03/beepress6-1585361410.jpeg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361410-300x128.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:128;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:34:\"beepress6-1585361410-1024x438.jpeg\";s:5:\"width\";i:1024;s:6:\"height\";i:438;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361410-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361410-768x329.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:329;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361410-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361410-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361410-701x300.jpeg\";s:5:\"width\";i:701;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (151, 52, '_wp_attached_file', '2020/03/beepress1-1585361410.jpeg');
INSERT INTO `wp_postmeta` VALUES (152, 52, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:690;s:6:\"height\";i:191;s:4:\"file\";s:33:\"2020/03/beepress1-1585361410.jpeg\";s:5:\"sizes\";a:4:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361410-300x83.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:83;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress1-1585361410-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress1-1585361410-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress1-1585361410-400x191.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:191;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (153, 53, '_wp_attached_file', '2020/03/beepress9-1585361410.jpg');
INSERT INTO `wp_postmeta` VALUES (154, 53, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:516;s:4:\"file\";s:32:\"2020/03/beepress9-1585361410.jpg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361410-300x143.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:143;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361410-1024x489.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:489;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361410-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361410-768x367.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:367;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361410-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361410-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361410-628x300.jpg\";s:5:\"width\";i:628;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361410-1080x500.jpg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (155, 54, '_wp_attached_file', '2020/03/beepress4-1585361411.jpg');
INSERT INTO `wp_postmeta` VALUES (156, 54, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:789;s:6:\"height\";i:566;s:4:\"file\";s:32:\"2020/03/beepress4-1585361411.jpg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361411-300x215.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:215;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361411-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361411-768x551.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:551;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361411-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361411-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361411-418x300.jpg\";s:5:\"width\";i:418;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361411-789x500.jpg\";s:5:\"width\";i:789;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (157, 55, '_wp_attached_file', '2020/03/beepress1-1585361412.jpg');
INSERT INTO `wp_postmeta` VALUES (158, 55, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:756;s:6:\"height\";i:652;s:4:\"file\";s:32:\"2020/03/beepress1-1585361412.jpg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361412-300x259.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:259;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361412-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361412-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361412-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361412-348x300.jpg\";s:5:\"width\";i:348;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361412-756x500.jpg\";s:5:\"width\";i:756;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (159, 56, '_wp_attached_file', '2020/03/beepress6-1585361412.png');
INSERT INTO `wp_postmeta` VALUES (160, 56, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:762;s:6:\"height\";i:203;s:4:\"file\";s:32:\"2020/03/beepress6-1585361412.png\";s:5:\"sizes\";a:4:{s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"beepress6-1585361412-300x80.png\";s:5:\"width\";i:300;s:6:\"height\";i:80;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress6-1585361412-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress6-1585361412-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress6-1585361412-400x203.png\";s:5:\"width\";i:400;s:6:\"height\";i:203;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (161, 57, '_wp_attached_file', '2020/03/beepress4-1585361412.jpeg');
INSERT INTO `wp_postmeta` VALUES (162, 57, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:401;s:4:\"file\";s:33:\"2020/03/beepress4-1585361412.jpeg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361412-300x111.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:111;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:34:\"beepress4-1585361412-1024x380.jpeg\";s:5:\"width\";i:1024;s:6:\"height\";i:380;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361412-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361412-768x285.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:285;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361412-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361412-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361412-808x300.jpeg\";s:5:\"width\";i:808;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (163, 58, '_wp_attached_file', '2020/03/beepress2-1585361413.jpeg');
INSERT INTO `wp_postmeta` VALUES (164, 58, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:258;s:6:\"height\";i:258;s:4:\"file\";s:33:\"2020/03/beepress2-1585361413.jpeg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress2-1585361413-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress2-1585361413-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress2-1585361413-258x250.jpeg\";s:5:\"width\";i:258;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (167, 48, '_wp_old_date', '2020-03-28');
INSERT INTO `wp_postmeta` VALUES (168, 60, 'is_bp', '1');
INSERT INTO `wp_postmeta` VALUES (169, 61, '_wp_attached_file', '2020/03/beepress10-1585361443.jpeg');
INSERT INTO `wp_postmeta` VALUES (170, 61, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:900;s:6:\"height\";i:384;s:4:\"file\";s:34:\"2020/03/beepress10-1585361443.jpeg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361443-300x128.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:128;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361443-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361443-768x328.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:328;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361443-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361443-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361443-703x300.jpeg\";s:5:\"width\";i:703;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (171, 60, '_thumbnail_id', '61');
INSERT INTO `wp_postmeta` VALUES (172, 62, '_wp_attached_file', '2020/03/beepress10-1585361443.jpg');
INSERT INTO `wp_postmeta` VALUES (173, 62, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:500;s:6:\"height\";i:403;s:4:\"file\";s:33:\"2020/03/beepress10-1585361443.jpg\";s:5:\"sizes\";a:5:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361443-300x242.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:242;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361443-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361443-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361443-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361443-372x300.jpg\";s:5:\"width\";i:372;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (174, 63, '_wp_attached_file', '2020/03/beepress8-1585361444.jpg');
INSERT INTO `wp_postmeta` VALUES (175, 63, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:500;s:6:\"height\";i:509;s:4:\"file\";s:32:\"2020/03/beepress8-1585361444.jpg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361444-295x300.jpg\";s:5:\"width\";i:295;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361444-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361444-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361444-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361444-295x300.jpg\";s:5:\"width\";i:295;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361444-500x500.jpg\";s:5:\"width\";i:500;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (176, 64, '_wp_attached_file', '2020/03/beepress8-1585361444.png');
INSERT INTO `wp_postmeta` VALUES (177, 64, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:780;s:6:\"height\";i:552;s:4:\"file\";s:32:\"2020/03/beepress8-1585361444.png\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361444-300x212.png\";s:5:\"width\";i:300;s:6:\"height\";i:212;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361444-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361444-768x544.png\";s:5:\"width\";i:768;s:6:\"height\";i:544;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361444-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361444-400x250.png\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361444-424x300.png\";s:5:\"width\";i:424;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361444-780x500.png\";s:5:\"width\";i:780;s:6:\"height\";i:500;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (178, 65, '_wp_attached_file', '2020/03/beepress9-1585361445.png');
INSERT INTO `wp_postmeta` VALUES (179, 65, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:617;s:6:\"height\";i:429;s:4:\"file\";s:32:\"2020/03/beepress9-1585361445.png\";s:5:\"sizes\";a:5:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361445-300x209.png\";s:5:\"width\";i:300;s:6:\"height\";i:209;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361445-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361445-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361445-400x250.png\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361445-431x300.png\";s:5:\"width\";i:431;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (180, 66, '_wp_attached_file', '2020/03/beepress5-1585361445.jpg');
INSERT INTO `wp_postmeta` VALUES (181, 66, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:187;s:4:\"file\";s:32:\"2020/03/beepress5-1585361445.jpg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"beepress5-1585361445-300x52.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:52;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress5-1585361445-1024x177.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:177;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361445-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361445-768x133.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:133;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361445-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361445-400x187.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:187;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361445-850x147.jpg\";s:5:\"width\";i:850;s:6:\"height\";i:147;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (182, 67, '_wp_attached_file', '2020/03/beepress5-1585361445.png');
INSERT INTO `wp_postmeta` VALUES (183, 67, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:504;s:6:\"height\";i:222;s:4:\"file\";s:32:\"2020/03/beepress5-1585361445.png\";s:5:\"sizes\";a:4:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361445-300x132.png\";s:5:\"width\";i:300;s:6:\"height\";i:132;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361445-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361445-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361445-400x222.png\";s:5:\"width\";i:400;s:6:\"height\";i:222;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (184, 68, '_wp_attached_file', '2020/03/beepress9-1585361446.jpg');
INSERT INTO `wp_postmeta` VALUES (185, 68, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:500;s:6:\"height\";i:386;s:4:\"file\";s:32:\"2020/03/beepress9-1585361446.jpg\";s:5:\"sizes\";a:5:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361446-300x232.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:232;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361446-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361446-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361446-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361446-389x300.jpg\";s:5:\"width\";i:389;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (186, 69, '_wp_attached_file', '2020/03/beepress7-1585361446.jpeg');
INSERT INTO `wp_postmeta` VALUES (187, 69, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:258;s:6:\"height\";i:258;s:4:\"file\";s:33:\"2020/03/beepress7-1585361446.jpeg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361446-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361446-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361446-258x250.jpeg\";s:5:\"width\";i:258;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (190, 60, '_wp_old_date', '2020-03-28');
INSERT INTO `wp_postmeta` VALUES (191, 60, '_oembed_7867a1e7da90e9ffa3e5a3370043d64e', '{{unknown}}');
INSERT INTO `wp_postmeta` VALUES (192, 71, 'is_bp', '1');
INSERT INTO `wp_postmeta` VALUES (193, 72, '_wp_attached_file', '2020/03/beepress4-1585361476.jpeg');
INSERT INTO `wp_postmeta` VALUES (194, 72, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:900;s:6:\"height\";i:384;s:4:\"file\";s:33:\"2020/03/beepress4-1585361476.jpeg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361476-300x128.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:128;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361476-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361476-768x328.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:328;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361476-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361476-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361476-703x300.jpeg\";s:5:\"width\";i:703;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (195, 71, '_thumbnail_id', '72');
INSERT INTO `wp_postmeta` VALUES (196, 73, '_wp_attached_file', '2020/03/beepress0-1585361476.png');
INSERT INTO `wp_postmeta` VALUES (197, 73, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:789;s:6:\"height\";i:329;s:4:\"file\";s:32:\"2020/03/beepress0-1585361476.png\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361476-300x125.png\";s:5:\"width\";i:300;s:6:\"height\";i:125;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361476-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361476-768x320.png\";s:5:\"width\";i:768;s:6:\"height\";i:320;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361476-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361476-400x250.png\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361476-719x300.png\";s:5:\"width\";i:719;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (198, 74, '_wp_attached_file', '2020/03/beepress10-1585361477.png');
INSERT INTO `wp_postmeta` VALUES (199, 74, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:763;s:6:\"height\";i:419;s:4:\"file\";s:33:\"2020/03/beepress10-1585361477.png\";s:5:\"sizes\";a:5:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361477-300x165.png\";s:5:\"width\";i:300;s:6:\"height\";i:165;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361477-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361477-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361477-400x250.png\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361477-546x300.png\";s:5:\"width\";i:546;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (200, 75, '_wp_attached_file', '2020/03/beepress0-1585361477.jpeg');
INSERT INTO `wp_postmeta` VALUES (201, 75, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:258;s:6:\"height\";i:258;s:4:\"file\";s:33:\"2020/03/beepress0-1585361477.jpeg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361477-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361477-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361477-258x250.jpeg\";s:5:\"width\";i:258;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (204, 71, '_wp_old_date', '2020-03-28');
INSERT INTO `wp_postmeta` VALUES (205, 77, 'is_bp', '1');
INSERT INTO `wp_postmeta` VALUES (206, 78, '_wp_attached_file', '2020/03/beepress6-1585361506.jpeg');
INSERT INTO `wp_postmeta` VALUES (207, 78, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:889;s:6:\"height\";i:379;s:4:\"file\";s:33:\"2020/03/beepress6-1585361506.jpeg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361506-300x128.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:128;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361506-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361506-768x327.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:327;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361506-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361506-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361506-704x300.jpeg\";s:5:\"width\";i:704;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (208, 77, '_thumbnail_id', '78');
INSERT INTO `wp_postmeta` VALUES (209, 79, '_wp_attached_file', '2020/03/beepress4-1585361506.jpg');
INSERT INTO `wp_postmeta` VALUES (210, 79, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:833;s:6:\"height\";i:524;s:4:\"file\";s:32:\"2020/03/beepress4-1585361506.jpg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361506-300x189.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361506-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361506-768x483.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:483;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361506-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361506-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361506-477x300.jpg\";s:5:\"width\";i:477;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361506-833x500.jpg\";s:5:\"width\";i:833;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (211, 80, '_wp_attached_file', '2020/03/beepress0-1585361507.jpeg');
INSERT INTO `wp_postmeta` VALUES (212, 80, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:367;s:4:\"file\";s:33:\"2020/03/beepress0-1585361507.jpeg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361507-300x102.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:102;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:34:\"beepress0-1585361507-1024x348.jpeg\";s:5:\"width\";i:1024;s:6:\"height\";i:348;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361507-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361507-768x261.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:261;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361507-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361507-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361507-850x289.jpeg\";s:5:\"width\";i:850;s:6:\"height\";i:289;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (213, 81, '_wp_attached_file', '2020/03/beepress8-1585361507.jpeg');
INSERT INTO `wp_postmeta` VALUES (214, 81, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:307;s:4:\"file\";s:33:\"2020/03/beepress8-1585361507.jpeg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361507-300x85.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:85;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:34:\"beepress8-1585361507-1024x291.jpeg\";s:5:\"width\";i:1024;s:6:\"height\";i:291;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361507-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361507-768x218.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:218;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361507-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361507-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361507-850x242.jpeg\";s:5:\"width\";i:850;s:6:\"height\";i:242;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (215, 82, '_wp_attached_file', '2020/03/beepress10-1585361507.jpeg');
INSERT INTO `wp_postmeta` VALUES (216, 82, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:862;s:6:\"height\";i:316;s:4:\"file\";s:34:\"2020/03/beepress10-1585361507.jpeg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361507-300x110.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:110;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361507-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361507-768x282.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:282;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361507-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361507-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361507-818x300.jpeg\";s:5:\"width\";i:818;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (217, 83, '_wp_attached_file', '2020/03/beepress9-1585361508.jpeg');
INSERT INTO `wp_postmeta` VALUES (218, 83, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:844;s:6:\"height\";i:482;s:4:\"file\";s:33:\"2020/03/beepress9-1585361508.jpeg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361508-300x171.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:171;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361508-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361508-768x439.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:439;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361508-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361508-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361508-525x300.jpeg\";s:5:\"width\";i:525;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (219, 84, '_wp_attached_file', '2020/03/beepress1-1585361508.jpeg');
INSERT INTO `wp_postmeta` VALUES (220, 84, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:900;s:6:\"height\";i:548;s:4:\"file\";s:33:\"2020/03/beepress1-1585361508.jpeg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress1-1585361508-300x183.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:183;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress1-1585361508-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress1-1585361508-768x468.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:468;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress1-1585361508-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress1-1585361508-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress1-1585361508-493x300.jpeg\";s:5:\"width\";i:493;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:33:\"beepress1-1585361508-900x500.jpeg\";s:5:\"width\";i:900;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (221, 85, '_wp_attached_file', '2020/03/beepress8-1585361508.jpeg');
INSERT INTO `wp_postmeta` VALUES (222, 85, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:854;s:6:\"height\";i:336;s:4:\"file\";s:33:\"2020/03/beepress8-1585361508.jpeg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361508-300x118.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:118;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361508-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361508-768x302.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:302;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361508-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361508-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361508-763x300.jpeg\";s:5:\"width\";i:763;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (223, 86, '_wp_attached_file', '2020/03/beepress7-1585361509.jpeg');
INSERT INTO `wp_postmeta` VALUES (224, 86, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:106;s:4:\"file\";s:33:\"2020/03/beepress7-1585361509.jpeg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress7-1585361509-300x29.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:29;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:34:\"beepress7-1585361509-1024x101.jpeg\";s:5:\"width\";i:1024;s:6:\"height\";i:101;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361509-150x106.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:106;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress7-1585361509-768x75.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:75;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361509-150x106.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:106;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361509-400x106.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:106;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress7-1585361509-850x83.jpeg\";s:5:\"width\";i:850;s:6:\"height\";i:83;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (225, 87, '_wp_attached_file', '2020/03/beepress6-1585361509.jpeg');
INSERT INTO `wp_postmeta` VALUES (226, 87, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:920;s:6:\"height\";i:742;s:4:\"file\";s:33:\"2020/03/beepress6-1585361509.jpeg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361509-300x242.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:242;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361509-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361509-768x619.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:619;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361509-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361509-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361509-372x300.jpeg\";s:5:\"width\";i:372;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361509-920x500.jpeg\";s:5:\"width\";i:920;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (227, 88, '_wp_attached_file', '2020/03/beepress6-1585361510.jpeg');
INSERT INTO `wp_postmeta` VALUES (228, 88, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:766;s:4:\"file\";s:33:\"2020/03/beepress6-1585361510.jpeg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361510-300x213.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:213;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:34:\"beepress6-1585361510-1024x726.jpeg\";s:5:\"width\";i:1024;s:6:\"height\";i:726;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361510-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361510-768x545.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:545;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361510-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361510-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361510-423x300.jpeg\";s:5:\"width\";i:423;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:34:\"beepress6-1585361510-1080x500.jpeg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (229, 89, '_wp_attached_file', '2020/03/beepress0-1585361510.jpeg');
INSERT INTO `wp_postmeta` VALUES (230, 89, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:258;s:6:\"height\";i:258;s:4:\"file\";s:33:\"2020/03/beepress0-1585361510.jpeg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361510-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361510-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361510-258x250.jpeg\";s:5:\"width\";i:258;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (233, 77, '_wp_old_date', '2020-03-28');
INSERT INTO `wp_postmeta` VALUES (234, 77, '_oembed_01aa292984120a2d7bb8fe444f3c3572', '{{unknown}}');
INSERT INTO `wp_postmeta` VALUES (235, 91, 'is_bp', '1');
INSERT INTO `wp_postmeta` VALUES (236, 92, '_wp_attached_file', '2020/03/beepress6-1585361551.jpeg');
INSERT INTO `wp_postmeta` VALUES (237, 92, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:900;s:6:\"height\";i:383;s:4:\"file\";s:33:\"2020/03/beepress6-1585361551.jpeg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361551-300x128.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:128;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361551-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361551-768x327.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:327;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361551-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361551-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361551-705x300.jpeg\";s:5:\"width\";i:705;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (238, 91, '_thumbnail_id', '92');
INSERT INTO `wp_postmeta` VALUES (239, 93, '_wp_attached_file', '2020/03/beepress9-1585361551.png');
INSERT INTO `wp_postmeta` VALUES (240, 93, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:886;s:6:\"height\";i:160;s:4:\"file\";s:32:\"2020/03/beepress9-1585361551.png\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"beepress9-1585361551-300x54.png\";s:5:\"width\";i:300;s:6:\"height\";i:54;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361551-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361551-768x139.png\";s:5:\"width\";i:768;s:6:\"height\";i:139;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361551-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361551-400x160.png\";s:5:\"width\";i:400;s:6:\"height\";i:160;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361551-850x153.png\";s:5:\"width\";i:850;s:6:\"height\";i:153;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (241, 94, '_wp_attached_file', '2020/03/beepress3-1585361551.jpg');
INSERT INTO `wp_postmeta` VALUES (242, 94, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:407;s:4:\"file\";s:32:\"2020/03/beepress3-1585361551.jpg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361551-300x113.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:113;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361551-1024x386.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:386;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361551-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361551-768x289.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:289;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361551-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361551-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361551-796x300.jpg\";s:5:\"width\";i:796;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (243, 95, '_wp_attached_file', '2020/03/beepress9-1585361552.jpg');
INSERT INTO `wp_postmeta` VALUES (244, 95, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:178;s:4:\"file\";s:32:\"2020/03/beepress9-1585361552.jpg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"beepress9-1585361552-300x49.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:49;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361552-1024x169.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:169;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361552-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361552-768x127.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:127;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361552-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361552-400x178.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:178;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361552-850x140.jpg\";s:5:\"width\";i:850;s:6:\"height\";i:140;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (245, 96, '_wp_attached_file', '2020/03/beepress10-1585361552.jpg');
INSERT INTO `wp_postmeta` VALUES (246, 96, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:1159;s:4:\"file\";s:33:\"2020/03/beepress10-1585361552.jpg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361552-280x300.jpg\";s:5:\"width\";i:280;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361552-954x1024.jpg\";s:5:\"width\";i:954;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361552-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361552-768x824.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:824;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361552-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361552-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361552-280x300.jpg\";s:5:\"width\";i:280;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361552-1080x500.jpg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (247, 97, '_wp_attached_file', '2020/03/beepress3-1585361553.png');
INSERT INTO `wp_postmeta` VALUES (248, 97, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:505;s:6:\"height\";i:129;s:4:\"file\";s:32:\"2020/03/beepress3-1585361553.png\";s:5:\"sizes\";a:4:{s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"beepress3-1585361553-300x77.png\";s:5:\"width\";i:300;s:6:\"height\";i:77;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361553-150x129.png\";s:5:\"width\";i:150;s:6:\"height\";i:129;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361553-150x129.png\";s:5:\"width\";i:150;s:6:\"height\";i:129;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361553-400x129.png\";s:5:\"width\";i:400;s:6:\"height\";i:129;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (249, 98, '_wp_attached_file', '2020/03/beepress0-1585361553.png');
INSERT INTO `wp_postmeta` VALUES (250, 98, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:781;s:6:\"height\";i:126;s:4:\"file\";s:32:\"2020/03/beepress0-1585361553.png\";s:5:\"sizes\";a:5:{s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"beepress0-1585361553-300x48.png\";s:5:\"width\";i:300;s:6:\"height\";i:48;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361553-150x126.png\";s:5:\"width\";i:150;s:6:\"height\";i:126;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361553-768x124.png\";s:5:\"width\";i:768;s:6:\"height\";i:124;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361553-150x126.png\";s:5:\"width\";i:150;s:6:\"height\";i:126;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361553-400x126.png\";s:5:\"width\";i:400;s:6:\"height\";i:126;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (251, 99, '_wp_attached_file', '2020/03/beepress4-1585361554.png');
INSERT INTO `wp_postmeta` VALUES (252, 99, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:796;s:6:\"height\";i:135;s:4:\"file\";s:32:\"2020/03/beepress4-1585361554.png\";s:5:\"sizes\";a:5:{s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"beepress4-1585361554-300x51.png\";s:5:\"width\";i:300;s:6:\"height\";i:51;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361554-150x135.png\";s:5:\"width\";i:150;s:6:\"height\";i:135;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361554-768x130.png\";s:5:\"width\";i:768;s:6:\"height\";i:130;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361554-150x135.png\";s:5:\"width\";i:150;s:6:\"height\";i:135;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361554-400x135.png\";s:5:\"width\";i:400;s:6:\"height\";i:135;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (253, 100, '_wp_attached_file', '2020/03/beepress1-1585361554.png');
INSERT INTO `wp_postmeta` VALUES (254, 100, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:483;s:6:\"height\";i:135;s:4:\"file\";s:32:\"2020/03/beepress1-1585361554.png\";s:5:\"sizes\";a:4:{s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"beepress1-1585361554-300x84.png\";s:5:\"width\";i:300;s:6:\"height\";i:84;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361554-150x135.png\";s:5:\"width\";i:150;s:6:\"height\";i:135;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361554-150x135.png\";s:5:\"width\";i:150;s:6:\"height\";i:135;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361554-400x135.png\";s:5:\"width\";i:400;s:6:\"height\";i:135;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (255, 101, '_wp_attached_file', '2020/03/beepress4-1585361554-1.png');
INSERT INTO `wp_postmeta` VALUES (256, 101, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:906;s:6:\"height\";i:123;s:4:\"file\";s:34:\"2020/03/beepress4-1585361554-1.png\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361554-1-300x41.png\";s:5:\"width\";i:300;s:6:\"height\";i:41;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:34:\"beepress4-1585361554-1-150x123.png\";s:5:\"width\";i:150;s:6:\"height\";i:123;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:34:\"beepress4-1585361554-1-768x104.png\";s:5:\"width\";i:768;s:6:\"height\";i:104;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:34:\"beepress4-1585361554-1-150x123.png\";s:5:\"width\";i:150;s:6:\"height\";i:123;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:34:\"beepress4-1585361554-1-400x123.png\";s:5:\"width\";i:400;s:6:\"height\";i:123;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:34:\"beepress4-1585361554-1-850x115.png\";s:5:\"width\";i:850;s:6:\"height\";i:115;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (257, 102, '_wp_attached_file', '2020/03/beepress0-1585361554.jpeg');
INSERT INTO `wp_postmeta` VALUES (258, 102, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:258;s:6:\"height\";i:258;s:4:\"file\";s:33:\"2020/03/beepress0-1585361554.jpeg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361554-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361554-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361554-258x250.jpeg\";s:5:\"width\";i:258;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (261, 91, '_wp_old_date', '2020-03-28');
INSERT INTO `wp_postmeta` VALUES (262, 104, 'is_bp', '1');
INSERT INTO `wp_postmeta` VALUES (263, 105, '_wp_attached_file', '2020/03/beepress4-1585361576.jpeg');
INSERT INTO `wp_postmeta` VALUES (264, 105, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:900;s:6:\"height\";i:383;s:4:\"file\";s:33:\"2020/03/beepress4-1585361576.jpeg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361576-300x128.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:128;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361576-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361576-768x327.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:327;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361576-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361576-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361576-705x300.jpeg\";s:5:\"width\";i:705;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (265, 104, '_thumbnail_id', '105');
INSERT INTO `wp_postmeta` VALUES (266, 106, '_wp_attached_file', '2020/03/beepress7-1585361576.jpeg');
INSERT INTO `wp_postmeta` VALUES (267, 106, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:551;s:4:\"file\";s:33:\"2020/03/beepress7-1585361576.jpeg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361576-300x153.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:153;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:34:\"beepress7-1585361576-1024x522.jpeg\";s:5:\"width\";i:1024;s:6:\"height\";i:522;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361576-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361576-768x392.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:392;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361576-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361576-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361576-588x300.jpeg\";s:5:\"width\";i:588;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:34:\"beepress7-1585361576-1080x500.jpeg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (268, 107, '_wp_attached_file', '2020/03/beepress0-1585361577.jpeg');
INSERT INTO `wp_postmeta` VALUES (269, 107, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:681;s:4:\"file\";s:33:\"2020/03/beepress0-1585361577.jpeg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361577-300x189.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:189;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:34:\"beepress0-1585361577-1024x646.jpeg\";s:5:\"width\";i:1024;s:6:\"height\";i:646;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361577-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361577-768x484.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:484;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361577-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361577-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361577-476x300.jpeg\";s:5:\"width\";i:476;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:34:\"beepress0-1585361577-1080x500.jpeg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (270, 108, '_wp_attached_file', '2020/03/beepress6-1585361577.jpeg');
INSERT INTO `wp_postmeta` VALUES (271, 108, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:708;s:4:\"file\";s:33:\"2020/03/beepress6-1585361577.jpeg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361577-300x197.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:197;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:34:\"beepress6-1585361577-1024x671.jpeg\";s:5:\"width\";i:1024;s:6:\"height\";i:671;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361577-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361577-768x503.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:503;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361577-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361577-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361577-458x300.jpeg\";s:5:\"width\";i:458;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:34:\"beepress6-1585361577-1080x500.jpeg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (272, 109, '_wp_attached_file', '2020/03/beepress6-1585361578.jpeg');
INSERT INTO `wp_postmeta` VALUES (273, 109, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:783;s:4:\"file\";s:33:\"2020/03/beepress6-1585361578.jpeg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361578-300x218.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:218;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:34:\"beepress6-1585361578-1024x742.jpeg\";s:5:\"width\";i:1024;s:6:\"height\";i:742;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361578-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361578-768x557.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:557;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361578-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361578-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361578-414x300.jpeg\";s:5:\"width\";i:414;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:34:\"beepress6-1585361578-1080x500.jpeg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (274, 110, '_wp_attached_file', '2020/03/beepress5-1585361579.jpeg');
INSERT INTO `wp_postmeta` VALUES (275, 110, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:393;s:4:\"file\";s:33:\"2020/03/beepress5-1585361579.jpeg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress5-1585361579-300x109.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:109;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:34:\"beepress5-1585361579-1024x373.jpeg\";s:5:\"width\";i:1024;s:6:\"height\";i:373;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress5-1585361579-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress5-1585361579-768x279.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:279;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress5-1585361579-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress5-1585361579-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress5-1585361579-824x300.jpeg\";s:5:\"width\";i:824;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (276, 111, '_wp_attached_file', '2020/03/beepress2-1585361579.jpeg');
INSERT INTO `wp_postmeta` VALUES (277, 111, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:258;s:6:\"height\";i:258;s:4:\"file\";s:33:\"2020/03/beepress2-1585361579.jpeg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress2-1585361579-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress2-1585361579-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress2-1585361579-258x250.jpeg\";s:5:\"width\";i:258;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (280, 104, '_wp_old_date', '2020-03-28');
INSERT INTO `wp_postmeta` VALUES (281, 113, 'is_bp', '1');
INSERT INTO `wp_postmeta` VALUES (282, 114, '_wp_attached_file', '2020/03/beepress3-1585361605.jpeg');
INSERT INTO `wp_postmeta` VALUES (283, 114, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:896;s:6:\"height\";i:382;s:4:\"file\";s:33:\"2020/03/beepress3-1585361605.jpeg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361605-300x128.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:128;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361605-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361605-768x327.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:327;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361605-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361605-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361605-704x300.jpeg\";s:5:\"width\";i:704;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (284, 113, '_thumbnail_id', '114');
INSERT INTO `wp_postmeta` VALUES (285, 115, '_wp_attached_file', '2020/03/beepress9-1585361605.jpeg');
INSERT INTO `wp_postmeta` VALUES (286, 115, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:347;s:4:\"file\";s:33:\"2020/03/beepress9-1585361605.jpeg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361605-300x96.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:96;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:34:\"beepress9-1585361605-1024x329.jpeg\";s:5:\"width\";i:1024;s:6:\"height\";i:329;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361605-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361605-768x247.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:247;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361605-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361605-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361605-850x273.jpeg\";s:5:\"width\";i:850;s:6:\"height\";i:273;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (287, 116, '_wp_attached_file', '2020/03/beepress4-1585361605.jpeg');
INSERT INTO `wp_postmeta` VALUES (288, 116, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:968;s:6:\"height\";i:370;s:4:\"file\";s:33:\"2020/03/beepress4-1585361605.jpeg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361605-300x115.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:115;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361605-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361605-768x294.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:294;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361605-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361605-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361605-785x300.jpeg\";s:5:\"width\";i:785;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (289, 117, '_wp_attached_file', '2020/03/beepress0-1585361606.jpeg');
INSERT INTO `wp_postmeta` VALUES (290, 117, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1068;s:6:\"height\";i:492;s:4:\"file\";s:33:\"2020/03/beepress0-1585361606.jpeg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361606-300x138.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:138;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:34:\"beepress0-1585361606-1024x472.jpeg\";s:5:\"width\";i:1024;s:6:\"height\";i:472;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361606-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361606-768x354.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:354;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361606-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361606-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361606-651x300.jpeg\";s:5:\"width\";i:651;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (291, 118, '_wp_attached_file', '2020/03/beepress8-1585361606.jpeg');
INSERT INTO `wp_postmeta` VALUES (292, 118, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:906;s:6:\"height\";i:230;s:4:\"file\";s:33:\"2020/03/beepress8-1585361606.jpeg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361606-300x76.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:76;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361606-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361606-768x195.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:195;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361606-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361606-400x230.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:230;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361606-850x216.jpeg\";s:5:\"width\";i:850;s:6:\"height\";i:216;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (293, 119, '_wp_attached_file', '2020/03/beepress3-1585361606.jpeg');
INSERT INTO `wp_postmeta` VALUES (294, 119, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:972;s:4:\"file\";s:33:\"2020/03/beepress3-1585361606.jpeg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361606-300x270.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:270;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:34:\"beepress3-1585361606-1024x922.jpeg\";s:5:\"width\";i:1024;s:6:\"height\";i:922;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361606-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361606-768x691.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:691;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361606-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361606-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361606-333x300.jpeg\";s:5:\"width\";i:333;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:34:\"beepress3-1585361606-1080x500.jpeg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (295, 120, '_wp_attached_file', '2020/03/beepress0-1585361607.jpeg');
INSERT INTO `wp_postmeta` VALUES (296, 120, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:1095;s:4:\"file\";s:33:\"2020/03/beepress0-1585361607.jpeg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361607-296x300.jpeg\";s:5:\"width\";i:296;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:35:\"beepress0-1585361607-1010x1024.jpeg\";s:5:\"width\";i:1010;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361607-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361607-768x779.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:779;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361607-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361607-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361607-296x300.jpeg\";s:5:\"width\";i:296;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:34:\"beepress0-1585361607-1080x500.jpeg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (297, 121, '_wp_attached_file', '2020/03/beepress0-1585361608.jpeg');
INSERT INTO `wp_postmeta` VALUES (298, 121, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:258;s:6:\"height\";i:258;s:4:\"file\";s:33:\"2020/03/beepress0-1585361608.jpeg\";s:5:\"sizes\";a:3:{s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361608-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361608-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361608-258x250.jpeg\";s:5:\"width\";i:258;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (301, 113, '_wp_old_date', '2020-03-28');
INSERT INTO `wp_postmeta` VALUES (302, 123, 'is_bp', '1');
INSERT INTO `wp_postmeta` VALUES (303, 124, '_wp_attached_file', '2020/03/beepress4-1585361629.jpeg');
INSERT INTO `wp_postmeta` VALUES (304, 124, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:417;s:6:\"height\";i:177;s:4:\"file\";s:33:\"2020/03/beepress4-1585361629.jpeg\";s:5:\"sizes\";a:4:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361629-300x127.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:127;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361629-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361629-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361629-400x177.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:177;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (305, 123, '_thumbnail_id', '124');
INSERT INTO `wp_postmeta` VALUES (306, 125, '_wp_attached_file', '2020/03/beepress8-1585361629.jpg');
INSERT INTO `wp_postmeta` VALUES (307, 125, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:513;s:4:\"file\";s:32:\"2020/03/beepress8-1585361629.jpg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361629-300x143.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:143;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361629-1024x486.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:486;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361629-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361629-768x365.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:365;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361629-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361629-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361629-632x300.jpg\";s:5:\"width\";i:632;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361629-1080x500.jpg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (308, 126, '_wp_attached_file', '2020/03/beepress10-1585361630.jpg');
INSERT INTO `wp_postmeta` VALUES (309, 126, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:785;s:4:\"file\";s:33:\"2020/03/beepress10-1585361630.jpg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361630-300x218.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:218;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361630-1024x744.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:744;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361630-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361630-768x558.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:558;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361630-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361630-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361630-413x300.jpg\";s:5:\"width\";i:413;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361630-1080x500.jpg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (310, 127, '_wp_attached_file', '2020/03/beepress10-1585361630-1.jpg');
INSERT INTO `wp_postmeta` VALUES (311, 127, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:880;s:4:\"file\";s:35:\"2020/03/beepress10-1585361630-1.jpg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:35:\"beepress10-1585361630-1-300x244.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:244;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:36:\"beepress10-1585361630-1-1024x834.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:834;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:35:\"beepress10-1585361630-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:35:\"beepress10-1585361630-1-768x626.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:626;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:35:\"beepress10-1585361630-1-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:35:\"beepress10-1585361630-1-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:35:\"beepress10-1585361630-1-368x300.jpg\";s:5:\"width\";i:368;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:36:\"beepress10-1585361630-1-1080x500.jpg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (312, 128, '_wp_attached_file', '2020/03/beepress8-1585361631.jpg');
INSERT INTO `wp_postmeta` VALUES (313, 128, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:772;s:4:\"file\";s:32:\"2020/03/beepress8-1585361631.jpg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361631-300x214.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:214;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361631-1024x732.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:732;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361631-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361631-768x549.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:549;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361631-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361631-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361631-420x300.jpg\";s:5:\"width\";i:420;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361631-1080x500.jpg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (314, 129, '_wp_attached_file', '2020/03/beepress1-1585361632.jpg');
INSERT INTO `wp_postmeta` VALUES (315, 129, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:658;s:4:\"file\";s:32:\"2020/03/beepress1-1585361632.jpg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361632-300x183.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:183;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress1-1585361632-1024x624.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:624;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361632-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361632-768x468.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:468;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361632-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361632-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361632-492x300.jpg\";s:5:\"width\";i:492;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:33:\"beepress1-1585361632-1080x500.jpg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (316, 130, '_wp_attached_file', '2020/03/beepress8-1585361632.jpg');
INSERT INTO `wp_postmeta` VALUES (317, 130, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:912;s:4:\"file\";s:32:\"2020/03/beepress8-1585361632.jpg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361632-300x253.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:253;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361632-1024x865.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:865;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361632-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361632-768x649.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:649;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361632-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361632-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361632-355x300.jpg\";s:5:\"width\";i:355;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361632-1080x500.jpg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (318, 131, '_wp_attached_file', '2020/03/beepress3-1585361633.jpg');
INSERT INTO `wp_postmeta` VALUES (319, 131, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:642;s:4:\"file\";s:32:\"2020/03/beepress3-1585361633.jpg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361633-300x178.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:178;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361633-1024x609.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:609;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361633-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361633-768x457.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:457;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361633-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361633-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361633-505x300.jpg\";s:5:\"width\";i:505;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361633-1080x500.jpg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (320, 132, '_wp_attached_file', '2020/03/beepress1-1585361633.jpg');
INSERT INTO `wp_postmeta` VALUES (321, 132, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:474;s:4:\"file\";s:32:\"2020/03/beepress1-1585361633.jpg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361633-300x132.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:132;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress1-1585361633-1024x449.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:449;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361633-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361633-768x337.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:337;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361633-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361633-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361633-684x300.jpg\";s:5:\"width\";i:684;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (322, 133, '_wp_attached_file', '2020/03/beepress10-1585361634.jpg');
INSERT INTO `wp_postmeta` VALUES (323, 133, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:484;s:4:\"file\";s:33:\"2020/03/beepress10-1585361634.jpg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361634-300x134.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:134;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361634-1024x459.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:459;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361634-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361634-768x344.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:344;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361634-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361634-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361634-669x300.jpg\";s:5:\"width\";i:669;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (324, 134, '_wp_attached_file', '2020/03/beepress4-1585361634.jpg');
INSERT INTO `wp_postmeta` VALUES (325, 134, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:459;s:4:\"file\";s:32:\"2020/03/beepress4-1585361634.jpg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361634-300x128.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:128;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361634-1024x435.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:435;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361634-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361634-768x326.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:326;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361634-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361634-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361634-706x300.jpg\";s:5:\"width\";i:706;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (326, 135, '_wp_attached_file', '2020/03/beepress7-1585361635.jpg');
INSERT INTO `wp_postmeta` VALUES (327, 135, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:314;s:4:\"file\";s:32:\"2020/03/beepress7-1585361635.jpg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"beepress7-1585361635-300x87.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:87;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361635-1024x298.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:298;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress7-1585361635-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress7-1585361635-768x223.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:223;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress7-1585361635-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress7-1585361635-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress7-1585361635-850x247.jpg\";s:5:\"width\";i:850;s:6:\"height\";i:247;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (328, 136, '_wp_attached_file', '2020/03/beepress3-1585361635.jpg');
INSERT INTO `wp_postmeta` VALUES (329, 136, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:930;s:6:\"height\";i:488;s:4:\"file\";s:32:\"2020/03/beepress3-1585361635.jpg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361635-300x157.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:157;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361635-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361635-768x403.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:403;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361635-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361635-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361635-572x300.jpg\";s:5:\"width\";i:572;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (330, 137, '_wp_attached_file', '2020/03/beepress8-1585361636.jpg');
INSERT INTO `wp_postmeta` VALUES (331, 137, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:554;s:4:\"file\";s:32:\"2020/03/beepress8-1585361636.jpg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361636-300x154.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:154;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361636-1024x525.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:525;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361636-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361636-768x394.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:394;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361636-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361636-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361636-585x300.jpg\";s:5:\"width\";i:585;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361636-1080x500.jpg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (332, 138, '_wp_attached_file', '2020/03/beepress0-1585361636.jpg');
INSERT INTO `wp_postmeta` VALUES (333, 138, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:1017;s:4:\"file\";s:32:\"2020/03/beepress0-1585361636.jpg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361636-300x283.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:283;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361636-1024x964.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:964;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361636-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361636-768x723.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:723;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361636-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361636-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361636-319x300.jpg\";s:5:\"width\";i:319;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361636-1080x500.jpg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (334, 139, '_wp_attached_file', '2020/03/beepress3-1585361637.jpg');
INSERT INTO `wp_postmeta` VALUES (335, 139, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1014;s:6:\"height\";i:360;s:4:\"file\";s:32:\"2020/03/beepress3-1585361637.jpg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361637-300x107.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:107;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361637-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361637-768x273.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:273;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361637-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361637-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361637-845x300.jpg\";s:5:\"width\";i:845;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (336, 140, '_wp_attached_file', '2020/03/beepress5-1585361637.jpg');
INSERT INTO `wp_postmeta` VALUES (337, 140, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:877;s:4:\"file\";s:32:\"2020/03/beepress5-1585361637.jpg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361637-300x244.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:244;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress5-1585361637-1024x832.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:832;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361637-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361637-768x624.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:624;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361637-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361637-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361637-369x300.jpg\";s:5:\"width\";i:369;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:33:\"beepress5-1585361637-1080x500.jpg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (338, 141, '_wp_attached_file', '2020/03/beepress6-1585361638.jpg');
INSERT INTO `wp_postmeta` VALUES (339, 141, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:1006;s:4:\"file\";s:32:\"2020/03/beepress6-1585361638.jpg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress6-1585361638-300x279.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:279;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361638-1024x954.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:954;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress6-1585361638-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress6-1585361638-768x715.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:715;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress6-1585361638-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress6-1585361638-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress6-1585361638-322x300.jpg\";s:5:\"width\";i:322;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361638-1080x500.jpg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (340, 142, '_wp_attached_file', '2020/03/beepress0-1585361639.jpg');
INSERT INTO `wp_postmeta` VALUES (341, 142, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:984;s:6:\"height\";i:404;s:4:\"file\";s:32:\"2020/03/beepress0-1585361639.jpg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361639-300x123.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:123;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361639-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361639-768x315.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:315;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361639-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361639-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361639-731x300.jpg\";s:5:\"width\";i:731;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (342, 143, '_wp_attached_file', '2020/03/beepress4-1585361639.jpg');
INSERT INTO `wp_postmeta` VALUES (343, 143, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:992;s:6:\"height\";i:560;s:4:\"file\";s:32:\"2020/03/beepress4-1585361639.jpg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361639-300x169.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:169;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361639-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361639-768x434.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:434;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361639-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361639-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361639-531x300.jpg\";s:5:\"width\";i:531;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361639-992x500.jpg\";s:5:\"width\";i:992;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (344, 144, '_wp_attached_file', '2020/03/beepress7-1585361639.jpg');
INSERT INTO `wp_postmeta` VALUES (345, 144, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:824;s:6:\"height\";i:288;s:4:\"file\";s:32:\"2020/03/beepress7-1585361639.jpg\";s:5:\"sizes\";a:5:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress7-1585361639-300x105.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:105;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress7-1585361639-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress7-1585361639-768x268.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:268;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress7-1585361639-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress7-1585361639-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (346, 145, '_wp_attached_file', '2020/03/beepress7-1585361640.jpg');
INSERT INTO `wp_postmeta` VALUES (347, 145, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:1019;s:4:\"file\";s:32:\"2020/03/beepress7-1585361640.jpg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress7-1585361640-300x283.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:283;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361640-1024x966.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:966;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress7-1585361640-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress7-1585361640-768x725.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:725;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress7-1585361640-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress7-1585361640-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress7-1585361640-318x300.jpg\";s:5:\"width\";i:318;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361640-1080x500.jpg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (348, 146, '_wp_attached_file', '2020/03/beepress10-1585361640.jpg');
INSERT INTO `wp_postmeta` VALUES (349, 146, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:977;s:4:\"file\";s:33:\"2020/03/beepress10-1585361640.jpg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361640-300x271.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:271;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361640-1024x926.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:926;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361640-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361640-768x695.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:695;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361640-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361640-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361640-332x300.jpg\";s:5:\"width\";i:332;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361640-1080x500.jpg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (350, 147, '_wp_attached_file', '2020/03/beepress1-1585361641.jpg');
INSERT INTO `wp_postmeta` VALUES (351, 147, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:960;s:6:\"height\";i:404;s:4:\"file\";s:32:\"2020/03/beepress1-1585361641.jpg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361641-300x126.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:126;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361641-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361641-768x323.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:323;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361641-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361641-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361641-713x300.jpg\";s:5:\"width\";i:713;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (352, 148, '_wp_attached_file', '2020/03/beepress10-1585361641.jpeg');
INSERT INTO `wp_postmeta` VALUES (353, 148, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:860;s:6:\"height\";i:860;s:4:\"file\";s:34:\"2020/03/beepress10-1585361641.jpeg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361641-300x300.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361641-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361641-768x768.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:768;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361641-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361641-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361641-300x300.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361641-860x500.jpeg\";s:5:\"width\";i:860;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (356, 123, '_wp_old_date', '2020-03-28');
INSERT INTO `wp_postmeta` VALUES (357, 150, 'is_bp', '1');
INSERT INTO `wp_postmeta` VALUES (358, 151, '_wp_attached_file', '2020/03/beepress6-1585361701.jpeg');
INSERT INTO `wp_postmeta` VALUES (359, 151, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:658;s:6:\"height\";i:280;s:4:\"file\";s:33:\"2020/03/beepress6-1585361701.jpeg\";s:5:\"sizes\";a:4:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361701-300x128.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:128;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361701-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361701-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress6-1585361701-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (360, 150, '_thumbnail_id', '151');
INSERT INTO `wp_postmeta` VALUES (361, 152, '_wp_attached_file', '2020/03/beepress2-1585361702.png');
INSERT INTO `wp_postmeta` VALUES (362, 152, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:750;s:6:\"height\";i:281;s:4:\"file\";s:32:\"2020/03/beepress2-1585361702.png\";s:5:\"sizes\";a:4:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress2-1585361702-300x112.png\";s:5:\"width\";i:300;s:6:\"height\";i:112;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress2-1585361702-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress2-1585361702-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress2-1585361702-400x250.png\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (363, 153, '_wp_attached_file', '2020/03/beepress9-1585361702.png');
INSERT INTO `wp_postmeta` VALUES (364, 153, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:503;s:6:\"height\";i:208;s:4:\"file\";s:32:\"2020/03/beepress9-1585361702.png\";s:5:\"sizes\";a:4:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361702-300x124.png\";s:5:\"width\";i:300;s:6:\"height\";i:124;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361702-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361702-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361702-400x208.png\";s:5:\"width\";i:400;s:6:\"height\";i:208;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (365, 154, '_wp_attached_file', '2020/03/beepress10-1585361702.png');
INSERT INTO `wp_postmeta` VALUES (366, 154, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:618;s:6:\"height\";i:407;s:4:\"file\";s:33:\"2020/03/beepress10-1585361702.png\";s:5:\"sizes\";a:5:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361702-300x198.png\";s:5:\"width\";i:300;s:6:\"height\";i:198;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361702-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361702-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361702-400x250.png\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361702-456x300.png\";s:5:\"width\";i:456;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (367, 155, '_wp_attached_file', '2020/03/beepress9-1585361703.jpeg');
INSERT INTO `wp_postmeta` VALUES (368, 155, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:604;s:6:\"height\";i:452;s:4:\"file\";s:33:\"2020/03/beepress9-1585361703.jpeg\";s:5:\"sizes\";a:5:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361703-300x225.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:225;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361703-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361703-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361703-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361703-401x300.jpeg\";s:5:\"width\";i:401;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (371, 150, '_wp_old_date', '2020-03-28');
INSERT INTO `wp_postmeta` VALUES (372, 157, 'is_bp', '1');
INSERT INTO `wp_postmeta` VALUES (373, 158, '_wp_attached_file', '2020/03/beepress7-1585361795.jpeg');
INSERT INTO `wp_postmeta` VALUES (374, 158, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:512;s:6:\"height\";i:218;s:4:\"file\";s:33:\"2020/03/beepress7-1585361795.jpeg\";s:5:\"sizes\";a:4:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361795-300x128.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:128;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361795-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361795-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361795-400x218.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:218;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (375, 157, '_thumbnail_id', '158');
INSERT INTO `wp_postmeta` VALUES (376, 159, '_wp_attached_file', '2020/03/beepress10-1585361795.jpeg');
INSERT INTO `wp_postmeta` VALUES (377, 159, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:750;s:6:\"height\";i:407;s:4:\"file\";s:34:\"2020/03/beepress10-1585361795.jpeg\";s:5:\"sizes\";a:5:{s:6:\"medium\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361795-300x163.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:163;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361795-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361795-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361795-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361795-553x300.jpeg\";s:5:\"width\";i:553;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (378, 160, '_wp_attached_file', '2020/03/beepress9-1585361795.jpg');
INSERT INTO `wp_postmeta` VALUES (379, 160, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:371;s:4:\"file\";s:32:\"2020/03/beepress9-1585361795.jpg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361795-300x103.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:103;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361795-1024x352.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:352;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361795-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361795-768x264.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:264;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361795-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361795-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361795-850x292.jpg\";s:5:\"width\";i:850;s:6:\"height\";i:292;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (380, 161, '_wp_attached_file', '2020/03/beepress10-1585361796.jpeg');
INSERT INTO `wp_postmeta` VALUES (381, 161, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:413;s:4:\"file\";s:34:\"2020/03/beepress10-1585361796.jpeg\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361796-300x115.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:115;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:35:\"beepress10-1585361796-1024x392.jpeg\";s:5:\"width\";i:1024;s:6:\"height\";i:392;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361796-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361796-768x294.jpeg\";s:5:\"width\";i:768;s:6:\"height\";i:294;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361796-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361796-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:34:\"beepress10-1585361796-785x300.jpeg\";s:5:\"width\";i:785;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (384, 157, '_wp_old_date', '2020-03-28');
INSERT INTO `wp_postmeta` VALUES (385, 163, 'is_bp', '1');
INSERT INTO `wp_postmeta` VALUES (386, 164, '_wp_attached_file', '2020/03/beepress4-1585361833.jpeg');
INSERT INTO `wp_postmeta` VALUES (387, 164, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:500;s:6:\"height\";i:212;s:4:\"file\";s:33:\"2020/03/beepress4-1585361833.jpeg\";s:5:\"sizes\";a:4:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361833-300x127.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:127;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361833-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361833-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361833-400x212.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:212;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (388, 163, '_thumbnail_id', '164');
INSERT INTO `wp_postmeta` VALUES (389, 165, '_wp_attached_file', '2020/03/beepress1-1585361833.jpeg');
INSERT INTO `wp_postmeta` VALUES (390, 165, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:739;s:6:\"height\";i:980;s:4:\"file\";s:33:\"2020/03/beepress1-1585361833.jpeg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress1-1585361833-226x300.jpeg\";s:5:\"width\";i:226;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress1-1585361833-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress1-1585361833-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress1-1585361833-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress1-1585361833-226x300.jpeg\";s:5:\"width\";i:226;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:33:\"beepress1-1585361833-739x500.jpeg\";s:5:\"width\";i:739;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (391, 166, '_wp_attached_file', '2020/03/beepress1-1585361834.png');
INSERT INTO `wp_postmeta` VALUES (392, 166, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:502;s:6:\"height\";i:297;s:4:\"file\";s:32:\"2020/03/beepress1-1585361834.png\";s:5:\"sizes\";a:4:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361834-300x177.png\";s:5:\"width\";i:300;s:6:\"height\";i:177;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361834-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361834-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361834-400x250.png\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (395, 163, '_wp_old_date', '2020-03-28');
INSERT INTO `wp_postmeta` VALUES (396, 168, 'is_bp', '1');
INSERT INTO `wp_postmeta` VALUES (397, 169, '_wp_attached_file', '2020/03/beepress5-1585361870.jpeg');
INSERT INTO `wp_postmeta` VALUES (398, 169, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:658;s:6:\"height\";i:280;s:4:\"file\";s:33:\"2020/03/beepress5-1585361870.jpeg\";s:5:\"sizes\";a:4:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress5-1585361870-300x128.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:128;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress5-1585361870-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress5-1585361870-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress5-1585361870-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (399, 168, '_thumbnail_id', '169');
INSERT INTO `wp_postmeta` VALUES (400, 170, '_wp_attached_file', '2020/03/beepress2-1585361871.jpeg');
INSERT INTO `wp_postmeta` VALUES (401, 170, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:750;s:6:\"height\";i:747;s:4:\"file\";s:33:\"2020/03/beepress2-1585361871.jpeg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress2-1585361871-300x300.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress2-1585361871-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress2-1585361871-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress2-1585361871-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress2-1585361871-301x300.jpeg\";s:5:\"width\";i:301;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:33:\"beepress2-1585361871-750x500.jpeg\";s:5:\"width\";i:750;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (402, 171, '_wp_attached_file', '2020/03/beepress3-1585361871.jpeg');
INSERT INTO `wp_postmeta` VALUES (403, 171, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:750;s:6:\"height\";i:748;s:4:\"file\";s:33:\"2020/03/beepress3-1585361871.jpeg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361871-300x300.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361871-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361871-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361871-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361871-301x300.jpeg\";s:5:\"width\";i:301;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361871-750x500.jpeg\";s:5:\"width\";i:750;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (404, 172, '_wp_attached_file', '2020/03/beepress9-1585361872.png');
INSERT INTO `wp_postmeta` VALUES (405, 172, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:772;s:6:\"height\";i:509;s:4:\"file\";s:32:\"2020/03/beepress9-1585361872.png\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361872-300x198.png\";s:5:\"width\";i:300;s:6:\"height\";i:198;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361872-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361872-768x506.png\";s:5:\"width\";i:768;s:6:\"height\";i:506;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361872-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361872-400x250.png\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361872-455x300.png\";s:5:\"width\";i:455;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361872-772x500.png\";s:5:\"width\";i:772;s:6:\"height\";i:500;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (406, 173, '_wp_attached_file', '2020/03/beepress8-1585361872.png');
INSERT INTO `wp_postmeta` VALUES (407, 173, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:769;s:6:\"height\";i:504;s:4:\"file\";s:32:\"2020/03/beepress8-1585361872.png\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361872-300x197.png\";s:5:\"width\";i:300;s:6:\"height\";i:197;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361872-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361872-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361872-400x250.png\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361872-458x300.png\";s:5:\"width\";i:458;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361872-769x500.png\";s:5:\"width\";i:769;s:6:\"height\";i:500;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (408, 174, '_wp_attached_file', '2020/03/beepress9-1585361873.jpeg');
INSERT INTO `wp_postmeta` VALUES (409, 174, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:456;s:6:\"height\";i:472;s:4:\"file\";s:33:\"2020/03/beepress9-1585361873.jpeg\";s:5:\"sizes\";a:5:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361873-290x300.jpeg\";s:5:\"width\";i:290;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361873-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361873-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361873-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress9-1585361873-290x300.jpeg\";s:5:\"width\";i:290;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (410, 175, '_wp_attached_file', '2020/03/beepress5-1585361873.png');
INSERT INTO `wp_postmeta` VALUES (411, 175, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:506;s:6:\"height\";i:467;s:4:\"file\";s:32:\"2020/03/beepress5-1585361873.png\";s:5:\"sizes\";a:5:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361873-300x277.png\";s:5:\"width\";i:300;s:6:\"height\";i:277;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361873-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361873-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361873-400x250.png\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361873-325x300.png\";s:5:\"width\";i:325;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (412, 176, '_wp_attached_file', '2020/03/beepress3-1585361873.jpeg');
INSERT INTO `wp_postmeta` VALUES (413, 176, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:534;s:6:\"height\";i:477;s:4:\"file\";s:33:\"2020/03/beepress3-1585361873.jpeg\";s:5:\"sizes\";a:5:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361873-300x268.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:268;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361873-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361873-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361873-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361873-336x300.jpeg\";s:5:\"width\";i:336;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (414, 177, '_wp_attached_file', '2020/03/beepress0-1585361874.jpeg');
INSERT INTO `wp_postmeta` VALUES (415, 177, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:530;s:6:\"height\";i:513;s:4:\"file\";s:33:\"2020/03/beepress0-1585361874.jpeg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361874-300x290.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:290;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361874-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361874-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361874-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361874-310x300.jpeg\";s:5:\"width\";i:310;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361874-530x500.jpeg\";s:5:\"width\";i:530;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (416, 178, '_wp_attached_file', '2020/03/beepress4-1585361874.jpeg');
INSERT INTO `wp_postmeta` VALUES (417, 178, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:539;s:6:\"height\";i:469;s:4:\"file\";s:33:\"2020/03/beepress4-1585361874.jpeg\";s:5:\"sizes\";a:5:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361874-300x261.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:261;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361874-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361874-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361874-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress4-1585361874-345x300.jpeg\";s:5:\"width\";i:345;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (418, 179, '_wp_attached_file', '2020/03/beepress7-1585361874.jpeg');
INSERT INTO `wp_postmeta` VALUES (419, 179, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:512;s:6:\"height\";i:510;s:4:\"file\";s:33:\"2020/03/beepress7-1585361874.jpeg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361874-300x300.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361874-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361874-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361874-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361874-301x300.jpeg\";s:5:\"width\";i:301;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:33:\"beepress7-1585361874-512x500.jpeg\";s:5:\"width\";i:512;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (420, 180, '_wp_attached_file', '2020/03/beepress0-1585361874-1.jpeg');
INSERT INTO `wp_postmeta` VALUES (421, 180, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:509;s:6:\"height\";i:503;s:4:\"file\";s:35:\"2020/03/beepress0-1585361874-1.jpeg\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:35:\"beepress0-1585361874-1-300x296.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:296;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:35:\"beepress0-1585361874-1-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:35:\"beepress0-1585361874-1-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:35:\"beepress0-1585361874-1-400x250.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:35:\"beepress0-1585361874-1-304x300.jpeg\";s:5:\"width\";i:304;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:35:\"beepress0-1585361874-1-509x500.jpeg\";s:5:\"width\";i:509;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (424, 168, '_wp_old_date', '2020-03-28');
INSERT INTO `wp_postmeta` VALUES (425, 182, 'is_bp', '1');
INSERT INTO `wp_postmeta` VALUES (426, 183, '_wp_attached_file', '2020/03/beepress5-1585361910.jpeg');
INSERT INTO `wp_postmeta` VALUES (427, 183, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:512;s:6:\"height\";i:218;s:4:\"file\";s:33:\"2020/03/beepress5-1585361910.jpeg\";s:5:\"sizes\";a:4:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress5-1585361910-300x128.jpeg\";s:5:\"width\";i:300;s:6:\"height\";i:128;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress5-1585361910-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress5-1585361910-150x150.jpeg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress5-1585361910-400x218.jpeg\";s:5:\"width\";i:400;s:6:\"height\";i:218;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (428, 182, '_thumbnail_id', '183');
INSERT INTO `wp_postmeta` VALUES (429, 184, '_wp_attached_file', '2020/03/beepress3-1585361911.jpg');
INSERT INTO `wp_postmeta` VALUES (430, 184, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:531;s:4:\"file\";s:32:\"2020/03/beepress3-1585361911.jpg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361911-300x148.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:148;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361911-1024x503.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:503;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361911-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361911-768x378.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:378;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361911-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361911-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361911-610x300.jpg\";s:5:\"width\";i:610;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361911-1080x500.jpg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (431, 185, '_wp_attached_file', '2020/03/beepress5-1585361911.png');
INSERT INTO `wp_postmeta` VALUES (432, 185, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1040;s:6:\"height\";i:296;s:4:\"file\";s:32:\"2020/03/beepress5-1585361911.png\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"beepress5-1585361911-300x85.png\";s:5:\"width\";i:300;s:6:\"height\";i:85;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress5-1585361911-1024x291.png\";s:5:\"width\";i:1024;s:6:\"height\";i:291;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361911-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361911-768x219.png\";s:5:\"width\";i:768;s:6:\"height\";i:219;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361911-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361911-400x250.png\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress5-1585361911-850x242.png\";s:5:\"width\";i:850;s:6:\"height\";i:242;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (433, 186, '_wp_attached_file', '2020/03/beepress1-1585361912.jpg');
INSERT INTO `wp_postmeta` VALUES (434, 186, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:862;s:6:\"height\";i:1142;s:4:\"file\";s:32:\"2020/03/beepress1-1585361912.jpg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361912-226x300.jpg\";s:5:\"width\";i:226;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress1-1585361912-773x1024.jpg\";s:5:\"width\";i:773;s:6:\"height\";i:1024;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361912-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:33:\"beepress1-1585361912-768x1017.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:1017;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361912-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361912-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361912-226x300.jpg\";s:5:\"width\";i:226;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:32:\"beepress1-1585361912-862x500.jpg\";s:5:\"width\";i:862;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (435, 187, '_wp_attached_file', '2020/03/beepress3-1585361912.png');
INSERT INTO `wp_postmeta` VALUES (436, 187, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1038;s:6:\"height\";i:354;s:4:\"file\";s:32:\"2020/03/beepress3-1585361912.png\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361912-300x102.png\";s:5:\"width\";i:300;s:6:\"height\";i:102;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress3-1585361912-1024x349.png\";s:5:\"width\";i:1024;s:6:\"height\";i:349;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361912-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361912-768x262.png\";s:5:\"width\";i:768;s:6:\"height\";i:262;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361912-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361912-400x250.png\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361912-850x290.png\";s:5:\"width\";i:850;s:6:\"height\";i:290;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (437, 188, '_wp_attached_file', '2020/03/beepress0-1585361913.png');
INSERT INTO `wp_postmeta` VALUES (438, 188, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1038;s:6:\"height\";i:362;s:4:\"file\";s:32:\"2020/03/beepress0-1585361913.png\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361913-300x105.png\";s:5:\"width\";i:300;s:6:\"height\";i:105;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361913-1024x357.png\";s:5:\"width\";i:1024;s:6:\"height\";i:357;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361913-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361913-768x268.png\";s:5:\"width\";i:768;s:6:\"height\";i:268;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361913-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361913-400x250.png\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361913-850x296.png\";s:5:\"width\";i:850;s:6:\"height\";i:296;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (439, 189, '_wp_attached_file', '2020/03/beepress8-1585361914.png');
INSERT INTO `wp_postmeta` VALUES (440, 189, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1026;s:6:\"height\";i:302;s:4:\"file\";s:32:\"2020/03/beepress8-1585361914.png\";s:5:\"sizes\";a:7:{s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"beepress8-1585361914-300x88.png\";s:5:\"width\";i:300;s:6:\"height\";i:88;s:9:\"mime-type\";s:9:\"image/png\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361914-1024x301.png\";s:5:\"width\";i:1024;s:6:\"height\";i:301;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361914-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361914-768x226.png\";s:5:\"width\";i:768;s:6:\"height\";i:226;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361914-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361914-400x250.png\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress8-1585361914-850x250.png\";s:5:\"width\";i:850;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (441, 190, '_wp_attached_file', '2020/03/beepress8-1585361914-1.png');
INSERT INTO `wp_postmeta` VALUES (442, 190, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1016;s:6:\"height\";i:286;s:4:\"file\";s:34:\"2020/03/beepress8-1585361914-1.png\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress8-1585361914-1-300x84.png\";s:5:\"width\";i:300;s:6:\"height\";i:84;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:34:\"beepress8-1585361914-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:34:\"beepress8-1585361914-1-768x216.png\";s:5:\"width\";i:768;s:6:\"height\";i:216;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:34:\"beepress8-1585361914-1-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:34:\"beepress8-1585361914-1-400x250.png\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:34:\"beepress8-1585361914-1-850x239.png\";s:5:\"width\";i:850;s:6:\"height\";i:239;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (443, 191, '_wp_attached_file', '2020/03/beepress4-1585361915.png');
INSERT INTO `wp_postmeta` VALUES (444, 191, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:984;s:6:\"height\";i:428;s:4:\"file\";s:32:\"2020/03/beepress4-1585361915.png\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361915-300x130.png\";s:5:\"width\";i:300;s:6:\"height\";i:130;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361915-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361915-768x334.png\";s:5:\"width\";i:768;s:6:\"height\";i:334;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361915-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361915-400x250.png\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress4-1585361915-690x300.png\";s:5:\"width\";i:690;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (445, 192, '_wp_attached_file', '2020/03/beepress9-1585361915.png');
INSERT INTO `wp_postmeta` VALUES (446, 192, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1010;s:6:\"height\";i:380;s:4:\"file\";s:32:\"2020/03/beepress9-1585361915.png\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361915-300x113.png\";s:5:\"width\";i:300;s:6:\"height\";i:113;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361915-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361915-768x289.png\";s:5:\"width\";i:768;s:6:\"height\";i:289;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361915-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361915-400x250.png\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361915-797x300.png\";s:5:\"width\";i:797;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (447, 193, '_wp_attached_file', '2020/03/beepress10-1585361916.png');
INSERT INTO `wp_postmeta` VALUES (448, 193, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:678;s:6:\"height\";i:276;s:4:\"file\";s:33:\"2020/03/beepress10-1585361916.png\";s:5:\"sizes\";a:4:{s:6:\"medium\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361916-300x122.png\";s:5:\"width\";i:300;s:6:\"height\";i:122;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361916-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361916-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:33:\"beepress10-1585361916-400x250.png\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (449, 194, '_wp_attached_file', '2020/03/beepress4-1585361916.png');
INSERT INTO `wp_postmeta` VALUES (450, 194, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:525;s:6:\"height\";i:61;s:4:\"file\";s:32:\"2020/03/beepress4-1585361916.png\";s:5:\"sizes\";a:4:{s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"beepress4-1585361916-300x35.png\";s:5:\"width\";i:300;s:6:\"height\";i:35;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:31:\"beepress4-1585361916-150x61.png\";s:5:\"width\";i:150;s:6:\"height\";i:61;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:31:\"beepress4-1585361916-150x61.png\";s:5:\"width\";i:150;s:6:\"height\";i:61;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:31:\"beepress4-1585361916-400x61.png\";s:5:\"width\";i:400;s:6:\"height\";i:61;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (451, 195, '_wp_attached_file', '2020/03/beepress3-1585361916.png');
INSERT INTO `wp_postmeta` VALUES (452, 195, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:519;s:6:\"height\";i:133;s:4:\"file\";s:32:\"2020/03/beepress3-1585361916.png\";s:5:\"sizes\";a:4:{s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"beepress3-1585361916-300x77.png\";s:5:\"width\";i:300;s:6:\"height\";i:77;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361916-150x133.png\";s:5:\"width\";i:150;s:6:\"height\";i:133;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361916-150x133.png\";s:5:\"width\";i:150;s:6:\"height\";i:133;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361916-400x133.png\";s:5:\"width\";i:400;s:6:\"height\";i:133;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (453, 196, '_wp_attached_file', '2020/03/beepress0-1585361916.jpg');
INSERT INTO `wp_postmeta` VALUES (454, 196, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:1080;s:6:\"height\";i:786;s:4:\"file\";s:32:\"2020/03/beepress0-1585361916.jpg\";s:5:\"sizes\";a:8:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361916-300x218.jpg\";s:5:\"width\";i:300;s:6:\"height\";i:218;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:5:\"large\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361916-1024x745.jpg\";s:5:\"width\";i:1024;s:6:\"height\";i:745;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361916-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361916-768x559.jpg\";s:5:\"width\";i:768;s:6:\"height\";i:559;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361916-150x150.jpg\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361916-400x250.jpg\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress0-1585361916-412x300.jpg\";s:5:\"width\";i:412;s:6:\"height\";i:300;s:9:\"mime-type\";s:10:\"image/jpeg\";}s:18:\"wordstar-post-wide\";a:4:{s:4:\"file\";s:33:\"beepress0-1585361916-1080x500.jpg\";s:5:\"width\";i:1080;s:6:\"height\";i:500;s:9:\"mime-type\";s:10:\"image/jpeg\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (455, 197, '_wp_attached_file', '2020/03/beepress2-1585361917.png');
INSERT INTO `wp_postmeta` VALUES (456, 197, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:642;s:6:\"height\";i:107;s:4:\"file\";s:32:\"2020/03/beepress2-1585361917.png\";s:5:\"sizes\";a:4:{s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"beepress2-1585361917-300x50.png\";s:5:\"width\";i:300;s:6:\"height\";i:50;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress2-1585361917-150x107.png\";s:5:\"width\";i:150;s:6:\"height\";i:107;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress2-1585361917-150x107.png\";s:5:\"width\";i:150;s:6:\"height\";i:107;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress2-1585361917-400x107.png\";s:5:\"width\";i:400;s:6:\"height\";i:107;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (457, 198, '_wp_attached_file', '2020/03/beepress3-1585361917.png');
INSERT INTO `wp_postmeta` VALUES (458, 198, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:511;s:6:\"height\";i:128;s:4:\"file\";s:32:\"2020/03/beepress3-1585361917.png\";s:5:\"sizes\";a:4:{s:6:\"medium\";a:4:{s:4:\"file\";s:31:\"beepress3-1585361917-300x75.png\";s:5:\"width\";i:300;s:6:\"height\";i:75;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361917-150x128.png\";s:5:\"width\";i:150;s:6:\"height\";i:128;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361917-150x128.png\";s:5:\"width\";i:150;s:6:\"height\";i:128;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress3-1585361917-400x128.png\";s:5:\"width\";i:400;s:6:\"height\";i:128;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (459, 199, '_wp_attached_file', '2020/03/beepress9-1585361917.png');
INSERT INTO `wp_postmeta` VALUES (460, 199, '_wp_attachment_metadata', 'a:5:{s:5:\"width\";i:873;s:6:\"height\";i:378;s:4:\"file\";s:32:\"2020/03/beepress9-1585361917.png\";s:5:\"sizes\";a:6:{s:6:\"medium\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361917-300x130.png\";s:5:\"width\";i:300;s:6:\"height\";i:130;s:9:\"mime-type\";s:9:\"image/png\";}s:9:\"thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361917-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:12:\"medium_large\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361917-768x333.png\";s:5:\"width\";i:768;s:6:\"height\";i:333;s:9:\"mime-type\";s:9:\"image/png\";}s:14:\"post-thumbnail\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361917-150x150.png\";s:5:\"width\";i:150;s:6:\"height\";i:150;s:9:\"mime-type\";s:9:\"image/png\";}s:20:\"wordstar-post-medium\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361917-400x250.png\";s:5:\"width\";i:400;s:6:\"height\";i:250;s:9:\"mime-type\";s:9:\"image/png\";}s:17:\"wordstar-post-big\";a:4:{s:4:\"file\";s:32:\"beepress9-1585361917-693x300.png\";s:5:\"width\";i:693;s:6:\"height\";i:300;s:9:\"mime-type\";s:9:\"image/png\";}}s:10:\"image_meta\";a:12:{s:8:\"aperture\";s:1:\"0\";s:6:\"credit\";s:0:\"\";s:6:\"camera\";s:0:\"\";s:7:\"caption\";s:0:\"\";s:17:\"created_timestamp\";s:1:\"0\";s:9:\"copyright\";s:0:\"\";s:12:\"focal_length\";s:1:\"0\";s:3:\"iso\";s:1:\"0\";s:13:\"shutter_speed\";s:1:\"0\";s:5:\"title\";s:0:\"\";s:11:\"orientation\";s:1:\"0\";s:8:\"keywords\";a:0:{}}}');
INSERT INTO `wp_postmeta` VALUES (463, 182, '_wp_old_date', '2020-03-28');

-- ----------------------------
-- Table structure for wp_posts
-- ----------------------------
DROP TABLE IF EXISTS `wp_posts`;
CREATE TABLE `wp_posts`  (
  `ID` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `post_author` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `post_date` datetime(0) NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_date_gmt` datetime(0) NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_title` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_excerpt` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_status` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'publish',
  `comment_status` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'open',
  `ping_status` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'open',
  `post_password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `post_name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `to_ping` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `pinged` text CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_modified` datetime(0) NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_modified_gmt` datetime(0) NOT NULL DEFAULT '0000-00-00 00:00:00',
  `post_content_filtered` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `post_parent` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `guid` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `menu_order` int(11) NOT NULL DEFAULT 0,
  `post_type` varchar(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT 'post',
  `post_mime_type` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `comment_count` bigint(20) NOT NULL DEFAULT 0,
  PRIMARY KEY (`ID`) USING BTREE,
  INDEX `post_name`(`post_name`(191)) USING BTREE,
  INDEX `type_status_date`(`post_type`, `post_status`, `post_date`, `ID`) USING BTREE,
  INDEX `post_parent`(`post_parent`) USING BTREE,
  INDEX `post_author`(`post_author`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 201 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_520_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of wp_posts
-- ----------------------------
INSERT INTO `wp_posts` VALUES (1, 1, '2020-03-27 09:54:36', '2020-03-27 01:54:36', '<!-- wp:paragraph -->\n<p>欢迎使用WordPress。这是您的第一篇文章。编辑或删除它，然后开始写作吧！</p>\n<!-- /wp:paragraph -->', '世界，您好！', '', 'trash', 'open', 'open', '', 'hello-world__trashed', '', '', '2020-03-28 10:02:21', '2020-03-28 02:02:21', '', 0, 'https://www.javashitang.com/?p=1', 0, 'post', '', 1);
INSERT INTO `wp_posts` VALUES (2, 1, '2020-03-27 09:54:36', '2020-03-27 01:54:36', '<!-- wp:paragraph -->\n<p>这是示范页面。页面和博客文章不同，它的位置是固定的，通常会在站点导航栏显示。很多用户都创建一个“关于”页面，向访客介绍自己。例如：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>欢迎！我白天是个邮递员，晚上就是个有抱负的演员。这是我的网站。我住在天朝的帝都，有条叫做Jack的狗。</p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>……或这个：</p>\n<!-- /wp:paragraph -->\n\n<!-- wp:quote -->\n<blockquote class=\"wp-block-quote\"><p>XYZ Doohickey公司成立于1971年，自从建立以来，我们一直向社会贡献着优秀doohickies。我们的公司总部位于天朝魔都，有着超过两千名员工，对魔都政府税收有着巨大贡献。</p></blockquote>\n<!-- /wp:quote -->\n\n<!-- wp:paragraph -->\n<p>而您，作为一个WordPress用户，我们建议您访问<a href=\"https://www.javashitang.com/wp-admin/\">控制板</a>，删除本页面，然后添加您自己的页面。祝您使用愉快！</p>\n<!-- /wp:paragraph -->', '示例页面', '', 'publish', 'closed', 'open', '', 'sample-page', '', '', '2020-03-27 09:54:36', '2020-03-27 01:54:36', '', 0, 'https://www.javashitang.com/?page_id=2', 0, 'page', '', 0);
INSERT INTO `wp_posts` VALUES (3, 1, '2020-03-27 09:54:36', '2020-03-27 01:54:36', '<!-- wp:heading --><h2>我们是谁</h2><!-- /wp:heading --><!-- wp:paragraph --><p>我们的站点地址是：https://www.javashitang.com。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>我们收集何种及为何收集个人数据</h2><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>评论</h3><!-- /wp:heading --><!-- wp:paragraph --><p>当访客留下评论时，我们会收集评论表单所显示的数据，和访客的IP地址及浏览器的user agent字符串来帮助检查垃圾评论。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>由您的电子邮件地址所生成的匿名化字符串（又称为哈希）可能会被提供给Gravatar服务确认您是否有使用该服务。Gravatar服务的隐私政策在此：https://automattic.com/privacy/。在您的评论获批准后，您的资料图片将在您的评论旁公开展示。</p><!-- /wp:paragraph --><!-- wp:heading {\"level\":3} --><h3>媒体</h3><!-- /wp:heading --><!-- wp:paragraph --><p>如果您向此网站上传图片，您应当避免上传那些有嵌入地理位置信息（EXIF GPS）的图片。此网站的访客将可以下载并提取此网站的图片中的位置信息。</p><!-- /wp:paragraph --><!-- wp:heading {\"level\":3} --><h3>联系表单</h3><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>Cookies</h3><!-- /wp:heading --><!-- wp:paragraph --><p>如果您在我们的站点上留下评论，您可以选择用cookies保存您的姓名、电子邮件地址和网站。这是通过让您可以不用在评论时再次填写相关内容而向您提供方便。这些cookies会保留一年。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>如果您访问我们的登录页，我们会设置一个临时的cookie来确认您的浏览器是否接受cookies。此cookie不包含个人数据，且会在您关闭浏览器时被丢弃。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>当您登录时，我们也会设置多个cookies来保存您的登录信息及屏幕显示选项。登录cookies会保留两天，而屏幕显示选项cookies会保留一年。如果您选择了“记住我”，您的登录会保留两周。如果您注销，登录cookies将被移除。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>如果您编辑或发布文章，我们会在您的浏览器中保存一个额外的cookie。这个cookie不包含个人数据而只记录了您刚才编辑的文章的ID。这个小甜饼会保留一天。</p><!-- /wp:paragraph --><!-- wp:heading {\"level\":3} --><h3>其他站点的嵌入内容</h3><!-- /wp:heading --><!-- wp:paragraph --><p>此站点上的文章可能会包含嵌入的内容（如视频、图像、文章等）。来自其他站点的嵌入内容的行为和您直接访问这些其他站点没有区别。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>这些站点可能会收集关于您的数据、使用cookies、嵌入额外的第三方跟踪程序及监视您与这些嵌入内容的交互，包括在您有这些站点的账户并登录了这些站点时，跟踪您与嵌入内容的交互。</p><!-- /wp:paragraph --><!-- wp:heading {\"level\":3} --><h3>统计</h3><!-- /wp:heading --><!-- wp:heading --><h2>我们与谁共享您的信息</h2><!-- /wp:heading --><!-- wp:heading --><h2>我们保留多久您的信息</h2><!-- /wp:heading --><!-- wp:paragraph --><p>如果您留下评论，评论和其元数据将被无限期保存。我们这样做以便能识别并自动批准任何后续评论，而不用将这些后续评论加入待审队列。</p><!-- /wp:paragraph --><!-- wp:paragraph --><p>对于本网站的注册用户，我们也会保存用户在个人资料中提供的个人信息。所有用户可以在任何时候查看、编辑或删除他们的个人信息（除了不能变更用户名外）、站点管理员也可以查看及编辑那些信息。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>您对您的信息有什么权利</h2><!-- /wp:heading --><!-- wp:paragraph --><p>如果您有此站点的账户，或曾经留下评论，您可以请求我们提供我们所拥有的您的个人数据的导出文件，这也包括了所有您提供给我们的数据。您也可以要求我们抹除所有关于您的个人数据。这不包括我们因管理、法规或安全需要而必须保留的数据。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>我们将您的信息发送到哪</h2><!-- /wp:heading --><!-- wp:paragraph --><p>访客评论可能会被自动垃圾评论监测服务检查。</p><!-- /wp:paragraph --><!-- wp:heading --><h2>您的联系信息</h2><!-- /wp:heading --><!-- wp:heading --><h2>其他信息</h2><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>我们如何保护您的数据</h3><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>我们有何种数据泄露处理流程</h3><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>我们从哪些第三方接收数据</h3><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>我们通过用户数据进行何种自动决策及/或归纳</h3><!-- /wp:heading --><!-- wp:heading {\"level\":3} --><h3>行业监管披露要求</h3><!-- /wp:heading -->', '隐私政策', '', 'draft', 'closed', 'open', '', 'privacy-policy', '', '', '2020-03-27 09:54:36', '2020-03-27 01:54:36', '', 0, 'https://www.javashitang.com/?page_id=3', 0, 'page', '', 0);
INSERT INTO `wp_posts` VALUES (4, 1, '2020-03-27 09:54:55', '0000-00-00 00:00:00', '', '自动草稿', '', 'auto-draft', 'open', 'open', '', '', '', '', '2020-03-27 09:54:55', '0000-00-00 00:00:00', '', 0, 'https://www.javashitang.com/?p=4', 0, 'post', '', 0);
INSERT INTO `wp_posts` VALUES (5, 1, '2020-03-27 10:24:33', '0000-00-00 00:00:00', '', '自动草稿', '', 'auto-draft', 'open', 'open', '', '', '', '', '2020-03-27 10:24:33', '0000-00-00 00:00:00', '', 0, 'https://www.javashitang.com/?p=5', 0, 'post', '', 0);
INSERT INTO `wp_posts` VALUES (6, 1, '2020-03-27 10:26:05', '2020-03-27 02:26:05', ' ', '', '', 'publish', 'closed', 'closed', '', '6', '', '', '2020-03-28 10:09:34', '2020-03-28 02:09:34', '', 0, 'https://www.javashitang.com/?p=6', 1, 'nav_menu_item', '', 0);
INSERT INTO `wp_posts` VALUES (7, 1, '2020-03-27 10:26:05', '2020-03-27 02:26:05', ' ', '', '', 'publish', 'closed', 'closed', '', '7', '', '', '2020-03-28 10:09:35', '2020-03-28 02:09:35', '', 0, 'https://www.javashitang.com/?p=7', 2, 'nav_menu_item', '', 0);
INSERT INTO `wp_posts` VALUES (8, 1, '2020-03-27 10:26:05', '2020-03-27 02:26:05', ' ', '', '', 'publish', 'closed', 'closed', '', '8', '', '', '2020-03-28 10:09:35', '2020-03-28 02:09:35', '', 0, 'https://www.javashitang.com/?p=8', 4, 'nav_menu_item', '', 0);
INSERT INTO `wp_posts` VALUES (9, 1, '2020-03-27 10:26:05', '2020-03-27 02:26:05', ' ', '', '', 'publish', 'closed', 'closed', '', '9', '', '', '2020-03-28 10:09:35', '2020-03-28 02:09:35', '', 0, 'https://www.javashitang.com/?p=9', 6, 'nav_menu_item', '', 0);
INSERT INTO `wp_posts` VALUES (10, 1, '2020-03-27 10:26:05', '2020-03-27 02:26:05', ' ', '', '', 'publish', 'closed', 'closed', '', '10', '', '', '2020-03-28 10:09:35', '2020-03-28 02:09:35', '', 0, 'https://www.javashitang.com/?p=10', 7, 'nav_menu_item', '', 0);
INSERT INTO `wp_posts` VALUES (11, 1, '2020-02-20 00:51:50', '2020-03-27 02:44:41', '<div class=\"bpp-post-content\">                                                                                                                            <section style=\"font-size: 15px;color: rgb(62, 62, 62);line-height: 1.8;word-spacing: 2px;letter-spacing: 2px;font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\" ><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><img          style=\"font-weight: 400;height: 224px;color: rgb(51, 51, 51);font-size: 16px;text-align: center;border-radius: 14px;box-shadow: rgb(140, 140, 140) 0em 0em 1em 0px;width: 574px;border-color: rgb(228, 21, 21);\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585277081.png\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  /><br  /></h2><section  mpa-from-tpl=\"t\"><section  mpa-from-tpl=\"t\"><section mpa-from-tpl=\"t\" style=\"text-align: justify;color: rgb(62, 62, 62);font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\"><section  mpa-from-tpl=\"t\"><section  mpa-from-tpl=\"t\" style=\"color: rgb(51, 51, 51);font-size: 17px;text-align: right;\"><span style=\"font-size: 14px;color: rgb(0, 82, 255);\">本文公众号来源：孤独烟</span></section><section  mpa-from-tpl=\"t\" style=\"color: rgb(51, 51, 51);font-size: 17px;text-align: right;\"><span style=\"font-size: 14px;color: rgb(0, 82, 255);\">作者：孤独烟</span><span style=\"font-size: 14px;color: rgb(0, 82, 255);\"></span></section><section  mpa-from-tpl=\"t\" style=\"color: rgb(51, 51, 51);font-size: 17px;text-align: right;\"><span style=\"font-size: 14px;color: rgb(0, 82, 255);\">本文已收录至我的</span><strong mpa-from-tpl=\"t\"><span style=\"font-size: 14px;color: rgb(217, 33, 66);\">GitHub</span></strong></section></section></section></section></section><p><br mpa-from-tpl=\"t\"  /></p><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">引言</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">好久没写文章了，今天回来重操旧业。<br  />今天讲的这个主题，是<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MzIwMDgzMjc3NA==&amp;mid=2247484720&amp;idx=1&amp;sn=7bd7774058e7886eeb3dedb38aa8657a&amp;chksm=96f66759a181ee4f4c177a755c3ac6b6e97fef148bbf4afea8616f4edec33bf6d4f18cda9f69&amp;scene=21#wechat_redirect\" textvalue=\"《面试官:谈谈你对mysql索引的认识》\" tab=\"innerlink\" rel=\"noopener noreferrer\">《面试官:谈谈你对mysql索引的认识》</a>，里头提到的一个坑。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">也就是说，如果面试官问的是，为什么Mysql中Innodb的索引结构采取B+树？这个问题时，给自己留一条后路，不要把B树喷的一文不值。因为网上有些答案是说，B树不适合做文件存储系统的索引结构。如果按照那种答法，自己就给自己挖了一个坑，很难收场。因此，就有了这篇文章的诞生~</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">文末附面试指南！</p><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">正文</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这里的Mysql指的是Innodb的存储引擎下的索引结构，其他存储引擎我们暂时不讨论。</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">B树和B+树</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">开头，我们先回忆一下，B树和B+树的结构以及特点，如下所示:<br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">B树</strong><br  /></p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585277082.jpg\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  /></p><br  />注意一下B树的两个明显特点<ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">树内的每个节点都存储数据</span></p></li><li><p>叶子节点之间无指针相邻</p></li></ul><p><br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">B+树</strong><br  /></p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585277082.jpg\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  /></p><p><br  />注意一下B+树的两个明显特点</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">数据只出现在叶子节点</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">所有叶子节点增加了一个链指针</span></p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">针对上面的B+树和B树的特点，我们做一个总结<br  /><span style=\"color: rgb(172, 57, 255);\"><strong>(1)</strong></span>B树的树内存储数据，因此查询单条数据的时候，B树的查询效率不固定，最好的情况是O(1)。我们可以认为在做单一数据查询的时候，使用B树平均性能更好。但是，由于B树中各节点之间没有指针相邻，因此B树不适合做一些数据遍历操作。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"color: rgb(172, 57, 255);\"><strong>(2)</strong></span>B+树的数据只出现在叶子节点上，因此在查询单条数据的时候，查询速度非常稳定。因此，在做单一数据的查询上，其平均性能并不如B树。但是，B+树的叶子节点上有指针进行相连，因此在做数据遍历的时候，只需要对叶子节点进行遍历即可，这个特性使得B+树非常适合做范围查询。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">因此，我们可以做一个推论:没准是Mysql中数据遍历操作比较多，所以用B+树作为索引结构。而Mongodb是做单一查询比较多，数据遍历操作比较少，所以用B树作为索引结构。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">那么为什么Mysql做数据遍历操作多？而Mongodb做数据遍历操作少呢？</em><br  />因为Mysql是关系型数据库，而Mongodb是非关系型数据。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">那为什么关系型数据库，做数据遍历操作多？</em></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">而非关系型数据库，做数据遍历操作少呢？</em><br  />我们继续往下看</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">关系型VS非关系型</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">假设，我们此时有两个逻辑实体:学生(Student)和班级(Class)，这两个逻辑实体之间是一对多的关系。毕竟一个班级有多个学生，一个学生只能属于一个班级。<br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">关系型数据库</strong><br  />我们在关系型数据库中，考虑的是用几张表来表示这二者之间的实体关系。常见的无外乎是，一对一关系，用一张表就行。一对多关系，用两张表。多对多关系，用三张表。<br  />那这里，我们需要用两张表表示二者之间逻辑关系，如下所示</p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585277083.png\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  /></p><br  />那我们，此时要查<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">cname</code>为<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">1班</code>的班级，有多少学生怎么办？<br  />假设<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">cname</code>这列，我们建了索引！<br  />执行SQL，如下所示！<pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;*<br  /><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;t_student&nbsp;t1,&nbsp;(<br  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;cid<br  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;t_class<br  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;cname&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);overflow-wrap: inherit !important;word-break: inherit !important;\">\'1班\'</span><br  />&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;t2<br  /><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;t1.cid&nbsp;=&nbsp;t2.cid<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">而这，就涉及到了数据遍历操作！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">因为但凡做这种关联查询，你躲不开join操作的！既然涉及到了join操作，无外乎从一个表中取一个数据，去另一个表中逐行匹配，如果索引结构是B+树，叶子节点上是有指针的，能够极大的提高这种一行一行的匹配速度！</p><section style=\"font-size: 15px;color: rgb(62, 62, 62);line-height: 1.8;word-spacing: 2px;letter-spacing: 2px;font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">有的人或许会抬杠说，如果我先执行</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;cid<br  /><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;t_class<br  /><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;cname&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);overflow-wrap: inherit !important;word-break: inherit !important;\">\'1班\'</span><br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">获得cid后，再去循环执行</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;*<br  /><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;t_student<br  /><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;cid&nbsp;=&nbsp;...<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">就可以避开join操作呀？</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">对此，我想说。你确实避开了join操作，但是你数据遍历操作还是没避开。你还是需要在student的这张表的叶子节点上，一遍又一遍的遍历！</p></section><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">那在非关系型数据库中，我们如何查询<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">cname</code>为<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">1班</code>的班级，有多少学生？<br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">非关系型数据库</strong><br  />有人说，你可以这么设计？也就是弄两个集合如下所示</p></section><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585277083.png\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  /></p><section style=\"font-size: 15px;color: rgb(62, 62, 62);line-height: 1.8;word-spacing: 2px;letter-spacing: 2px;font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\">然后，执行两次查询去获得结果！一次去class集合查，获得id后再去student集合查。<p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">确实，这么设计是可以的，我没说不行。只是不符合非关系型数据库的设计初衷。在MongoDB中，根本不推荐这么设计。虽然，Mongodb中有一个$lookup操作，可以做join查询。但是理想情况下，这个$lookup操作应该不会经常使用，如果你需要经常使用它，那么你就使用了错误的数据存储了（数据库）：如果你有相关联的数据，应该使用关系型数据库（SQL）。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">因此，正规的设计应该如下<br  /></p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585277083.png\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  /></p><br  />假设<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">name</code>这列，我们建了索引！<br  />我只需执行一次语句<pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">db</span><span style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);overflow-wrap: inherit !important;word-break: inherit !important;\">.class</span><span style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);overflow-wrap: inherit !important;word-break: inherit !important;\">.find</span>(&nbsp;{&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);overflow-wrap: inherit !important;word-break: inherit !important;\">name</span>:&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);overflow-wrap: inherit !important;word-break: inherit !important;\">\'1班\'</span>&nbsp;}&nbsp;)<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这样就能查询出自己想要的结果。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">而这，就是一种单一数据查询!毕竟你不需要去逐行匹配，不涉及遍历操作,幸运的情况下，有可能一次IO就能够得到你想要的结果。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">因此，由于关系型数据库和非关系型数据的设计方式上的不同。导致在关系型数据中，遍历操作比较常见，因此采用B+树作为索引，比较合适。而在非关系型数据库中，单一查询比较常见，因此采用B树作为索引，比较合适。</p><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">面试套路</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">目前套路有如下几种</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">套路一</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">你简历写了mysql，没写mongodb!<br  />面试官:\"说说mysql索引结构？\"<br  />我:\"巴拉巴拉\"<br  />面试官:\"知道为什么用B+树，不用B树么？\"<br  />这个时候正常的面试者就蒙了，会把B树的缺点喷一通！于是乎下一问就是<br  />面试官:\"其实一些非关系型数据库，如mongodb用的就是B树，你知道原因么？\"<br  />然后你就回去等通知了！</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">套路二</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">你简历写了mysql，也写了mongodb!<br  />这种情况更完美！<br  />面试官:\"说说mysql索引结构？\"<br  />我:\"巴拉巴拉\"<br  />面试官:\"你简历写了Mongodb，有了解过他的索引结构么？\"<br  />我:\"巴拉巴拉\"<br  />面试官:\"为什么Mongodb索引用B树，而Mysql用B+树？\"<br  />然后你就回去等通知了！</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">套路三</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">你简历既没写mysql，没写mongodb!<br  />面试官；\"如果你来设计数据库，你会对他的索引用什么数据结构？\"<br  />我:\"首先不考虑红黑树这类，巴拉巴拉…应该会用B树或者B+树。\"<br  />面试官；“如果我要设计一个像Mongodb那样的非关系型数据库，我要用什么数据结构当索引比较合适?”<br  />然后你就可以回去等通知了！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">上面三个套路都是真实存在的！总之，只要面试官想问这个问题，都可以绕到这个问题上去！</p><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">总结</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">其实这篇文章很早以前就想写，后来一直耽搁着。今天有时间刚好补上，希望大家有所收获。</p></section><p><br mpa-from-tpl=\"t\"  /></p><section  mpa-from-tpl=\"t\"><section  mpa-from-tpl=\"t\"><p style=\"clear: both;min-height: 1em;color: rgb(51, 51, 51);font-size: 17px;letter-spacing: 0.544px;text-align: justify;\"><a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247486567&amp;idx=1&amp;sn=181b97f64f53edfba841c3453813226c&amp;chksm=ebd74d66dca0c470f0b839a1f4d498ad2841a53413341ca80e5449a42609809bae4dda491d81&amp;scene=21#wechat_redirect\" tab=\"innerlink\" hasload=\"1\" style=\"color: rgb(0, 82, 255);-webkit-tap-highlight-color: rgba(0, 0, 0, 0);cursor: pointer;font-size: 24px;\" rel=\"noopener noreferrer\">戳：百万字长文带你学习「Java」</a><br mpa-from-tpl=\"t\"  /></p><p style=\"clear: both;min-height: 1em;color: rgb(51, 51, 51);font-size: 17px;letter-spacing: 0.544px;text-align: justify;\"><br mpa-from-tpl=\"t\"  /></p><section  mpa-from-tpl=\"t\" style=\"color: rgb(51, 51, 51);font-size: 17px;letter-spacing: 0.544px;text-align: justify;\"><section  mpa-from-tpl=\"t\"><section  mpa-from-tpl=\"t\" style=\"color: rgb(0, 0, 0);font-size: 16px;\"><section  mpa-from-tpl=\"t\"><pre  style=\"margin-top: 10px;margin-bottom: 10px;word-spacing: 2px;\"><p style=\"margin-bottom: 16px;clear: both;min-height: 1em;letter-spacing: 0.544px;white-space: normal;color: rgb(36, 41, 46);\">如果大家想要<span style=\"font-weight: 600;\">实时</span>关注我更新的文章以及分享的干货的话，可以关注我的公众号<span style=\"color: rgb(217, 33, 66);\"><strong mpa-from-tpl=\"t\">Java3y</strong></span>。</p><ul class=\"list-paddingleft-2\" mpa-from-tpl=\"t\" style=\"list-style-type: circle;\"><li><p style=\"clear: both;min-height: 1em;\">获取Java精美<strong mpa-from-tpl=\"t\">脑图<img    style=\"display: inline-block;vertical-align: text-bottom;height: auto !important;visibility: visible !important;width: 20px !important;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585277084.png\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  /></strong><span style=\"text-indent: 2em;\"></span></p></li><li><p style=\"clear: both;min-height: 1em;\"><span style=\"caret-color: rgb(51, 51, 51);orphans: 4;white-space: pre-wrap;text-size-adjust: auto;\">🔥</span>获取Java学习<strong mpa-from-tpl=\"t\">路线<img    style=\"display: inline-block;vertical-align: text-bottom;height: auto !important;visibility: visible !important;width: 20px !important;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585277084.png\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  /></strong></p></li><li><p style=\"clear: both;min-height: 1em;\">获取开发常用<strong mpa-from-tpl=\"t\">工具<img    style=\"display: inline-block;vertical-align: text-bottom;height: auto !important;visibility: visible !important;width: 20px !important;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585277084.png\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  /></strong></p></li><li><p style=\"clear: both;min-height: 1em;\"><span style=\"text-indent: 2em;\"><span style=\"caret-color: rgb(51, 51, 51);orphans: 4;white-space: pre-wrap;text-size-adjust: auto;\">🔥加入技术<strong mpa-from-tpl=\"t\">交流群</strong></span></span><strong mpa-from-tpl=\"t\" style=\"text-indent: 2em;\"><img    style=\"display: inline-block;vertical-align: text-bottom;height: auto !important;visibility: visible !important;width: 20px !important;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585277084.png\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  /></strong></p></li></ul><p style=\"margin-bottom: 16px;clear: both;min-height: 1em;letter-spacing: 0.544px;white-space: normal;color: rgb(36, 41, 46);\">在公众号下回复「<span style=\"font-weight: 600;font-size: 20px;color: rgb(255, 76, 0);\">888</span>」即可获取！！<br mpa-from-tpl=\"t\"  /></p><p style=\"clear: both;min-height: 1em;letter-spacing: 0.544px;white-space: normal;text-align: center;\"><img class=\"rich_pages\"      style=\"height: auto !important;visibility: visible !important;width: 600px !important;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585277085.gif\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  /></p><p style=\"clear: both;min-height: 1em;letter-spacing: 0.544px;white-space: normal;text-align: center;\"><strong mpa-from-tpl=\"t\">点个在看<img     style=\"caret-color: rgb(51, 51, 51);letter-spacing: 0.544px;text-align: right;text-size-adjust: auto;vertical-align: middle;height: auto !important;visibility: visible !important;width: 19.825px !important;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585277085.jpeg\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  />，分享到朋友圈<img    style=\"height: auto !important;max-height: 20px !important;visibility: visible !important;width: 20.3077px !important;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585277085.png\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  />，对我真的很重要！！</strong></p></pre></section></section></section></section></section></section> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（Java3y）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/ZbkRWFT5rXIA9ZXzwTZTTA\" rel=\"noopener noreferrer\">为什么Mongodb索引用B树，而Mysql用B+树?</a></p></blockquote></div>', '为什么Mongodb索引用B树，而Mysql用B+树?', '', 'publish', 'open', 'open', '', '3fce5cbf37', '', '', '2020-03-27 10:44:45', '2020-03-27 02:44:45', '', 0, 'https://www.javashitang.com/?p=11', 0, 'post', '', 0);
INSERT INTO `wp_posts` VALUES (12, 1, '2020-03-27 10:44:41', '2020-03-27 02:44:41', '', 'beepress6-1585277081', '', 'inherit', 'open', 'closed', '', 'beepress6-1585277081', '', '', '2020-03-27 10:44:41', '2020-03-27 02:44:41', '', 11, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585277081.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (13, 1, '2020-03-27 10:44:41', '2020-03-27 02:44:41', '', 'beepress0-1585277081', '', 'inherit', 'open', 'closed', '', 'beepress0-1585277081', '', '', '2020-03-27 10:44:41', '2020-03-27 02:44:41', '', 11, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585277081.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (14, 1, '2020-03-27 10:44:42', '2020-03-27 02:44:42', '', 'beepress5-1585277082', '', 'inherit', 'open', 'closed', '', 'beepress5-1585277082', '', '', '2020-03-27 10:44:42', '2020-03-27 02:44:42', '', 11, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585277082.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (15, 1, '2020-03-27 10:44:42', '2020-03-27 02:44:42', '', 'beepress9-1585277082', '', 'inherit', 'open', 'closed', '', 'beepress9-1585277082', '', '', '2020-03-27 10:44:42', '2020-03-27 02:44:42', '', 11, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585277082.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (16, 1, '2020-03-27 10:44:43', '2020-03-27 02:44:43', '', 'beepress7-1585277083', '', 'inherit', 'open', 'closed', '', 'beepress7-1585277083', '', '', '2020-03-27 10:44:43', '2020-03-27 02:44:43', '', 11, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585277083.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (17, 1, '2020-03-27 10:44:43', '2020-03-27 02:44:43', '', 'beepress3-1585277083', '', 'inherit', 'open', 'closed', '', 'beepress3-1585277083', '', '', '2020-03-27 10:44:43', '2020-03-27 02:44:43', '', 11, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585277083.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (18, 1, '2020-03-27 10:44:43', '2020-03-27 02:44:43', '', 'beepress10-1585277083', '', 'inherit', 'open', 'closed', '', 'beepress10-1585277083', '', '', '2020-03-27 10:44:43', '2020-03-27 02:44:43', '', 11, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585277083.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (19, 1, '2020-03-27 10:44:44', '2020-03-27 02:44:44', '', 'beepress10-1585277084', '', 'inherit', 'open', 'closed', '', 'beepress10-1585277084', '', '', '2020-03-27 10:44:44', '2020-03-27 02:44:44', '', 11, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585277084.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (20, 1, '2020-03-27 10:44:44', '2020-03-27 02:44:44', '', 'beepress7-1585277084', '', 'inherit', 'open', 'closed', '', 'beepress7-1585277084', '', '', '2020-03-27 10:44:44', '2020-03-27 02:44:44', '', 11, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585277084.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (21, 1, '2020-03-27 10:44:44', '2020-03-27 02:44:44', '', 'beepress8-1585277084', '', 'inherit', 'open', 'closed', '', 'beepress8-1585277084', '', '', '2020-03-27 10:44:44', '2020-03-27 02:44:44', '', 11, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585277084.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (22, 1, '2020-03-27 10:44:44', '2020-03-27 02:44:44', '', 'beepress4-1585277084', '', 'inherit', 'open', 'closed', '', 'beepress4-1585277084', '', '', '2020-03-27 10:44:44', '2020-03-27 02:44:44', '', 11, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585277084.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (23, 1, '2020-03-27 10:44:45', '2020-03-27 02:44:45', '', 'beepress8-1585277085', '', 'inherit', 'open', 'closed', '', 'beepress8-1585277085', '', '', '2020-03-27 10:44:45', '2020-03-27 02:44:45', '', 11, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585277085.gif', 0, 'attachment', 'image/gif', 0);
INSERT INTO `wp_posts` VALUES (24, 1, '2020-03-27 10:44:45', '2020-03-27 02:44:45', '', 'beepress6-1585277085', '', 'inherit', 'open', 'closed', '', 'beepress6-1585277085', '', '', '2020-03-27 10:44:45', '2020-03-27 02:44:45', '', 11, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585277085.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (25, 1, '2020-03-27 10:44:45', '2020-03-27 02:44:45', '', 'beepress5-1585277085', '', 'inherit', 'open', 'closed', '', 'beepress5-1585277085', '', '', '2020-03-27 10:44:45', '2020-03-27 02:44:45', '', 11, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585277085.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (26, 1, '2020-03-27 10:44:45', '2020-03-27 02:44:45', '<div class=\"bpp-post-content\">                                                                                                                            <section style=\"font-size: 15px;color: rgb(62, 62, 62);line-height: 1.8;word-spacing: 2px;letter-spacing: 2px;font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\" ><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><img          style=\"font-weight: 400;height: 224px;color: rgb(51, 51, 51);font-size: 16px;text-align: center;border-radius: 14px;box-shadow: rgb(140, 140, 140) 0em 0em 1em 0px;width: 574px;border-color: rgb(228, 21, 21);\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585277081.png\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  /><br  /></h2><section  mpa-from-tpl=\"t\"><section  mpa-from-tpl=\"t\"><section mpa-from-tpl=\"t\" style=\"text-align: justify;color: rgb(62, 62, 62);font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\"><section  mpa-from-tpl=\"t\"><section  mpa-from-tpl=\"t\" style=\"color: rgb(51, 51, 51);font-size: 17px;text-align: right;\"><span style=\"font-size: 14px;color: rgb(0, 82, 255);\">本文公众号来源：孤独烟</span></section><section  mpa-from-tpl=\"t\" style=\"color: rgb(51, 51, 51);font-size: 17px;text-align: right;\"><span style=\"font-size: 14px;color: rgb(0, 82, 255);\">作者：孤独烟</span><span style=\"font-size: 14px;color: rgb(0, 82, 255);\"></span></section><section  mpa-from-tpl=\"t\" style=\"color: rgb(51, 51, 51);font-size: 17px;text-align: right;\"><span style=\"font-size: 14px;color: rgb(0, 82, 255);\">本文已收录至我的</span><strong mpa-from-tpl=\"t\"><span style=\"font-size: 14px;color: rgb(217, 33, 66);\">GitHub</span></strong></section></section></section></section></section><p><br mpa-from-tpl=\"t\"  /></p><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">引言</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">好久没写文章了，今天回来重操旧业。<br  />今天讲的这个主题，是<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MzIwMDgzMjc3NA==&amp;mid=2247484720&amp;idx=1&amp;sn=7bd7774058e7886eeb3dedb38aa8657a&amp;chksm=96f66759a181ee4f4c177a755c3ac6b6e97fef148bbf4afea8616f4edec33bf6d4f18cda9f69&amp;scene=21#wechat_redirect\" textvalue=\"《面试官:谈谈你对mysql索引的认识》\" tab=\"innerlink\" rel=\"noopener noreferrer\">《面试官:谈谈你对mysql索引的认识》</a>，里头提到的一个坑。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">也就是说，如果面试官问的是，为什么Mysql中Innodb的索引结构采取B+树？这个问题时，给自己留一条后路，不要把B树喷的一文不值。因为网上有些答案是说，B树不适合做文件存储系统的索引结构。如果按照那种答法，自己就给自己挖了一个坑，很难收场。因此，就有了这篇文章的诞生~</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">文末附面试指南！</p><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">正文</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这里的Mysql指的是Innodb的存储引擎下的索引结构，其他存储引擎我们暂时不讨论。</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">B树和B+树</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">开头，我们先回忆一下，B树和B+树的结构以及特点，如下所示:<br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">B树</strong><br  /></p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585277082.jpg\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  /></p><br  />注意一下B树的两个明显特点<ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">树内的每个节点都存储数据</span></p></li><li><p>叶子节点之间无指针相邻</p></li></ul><p><br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">B+树</strong><br  /></p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585277082.jpg\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  /></p><p><br  />注意一下B+树的两个明显特点</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">数据只出现在叶子节点</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">所有叶子节点增加了一个链指针</span></p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">针对上面的B+树和B树的特点，我们做一个总结<br  /><span style=\"color: rgb(172, 57, 255);\"><strong>(1)</strong></span>B树的树内存储数据，因此查询单条数据的时候，B树的查询效率不固定，最好的情况是O(1)。我们可以认为在做单一数据查询的时候，使用B树平均性能更好。但是，由于B树中各节点之间没有指针相邻，因此B树不适合做一些数据遍历操作。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"color: rgb(172, 57, 255);\"><strong>(2)</strong></span>B+树的数据只出现在叶子节点上，因此在查询单条数据的时候，查询速度非常稳定。因此，在做单一数据的查询上，其平均性能并不如B树。但是，B+树的叶子节点上有指针进行相连，因此在做数据遍历的时候，只需要对叶子节点进行遍历即可，这个特性使得B+树非常适合做范围查询。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">因此，我们可以做一个推论:没准是Mysql中数据遍历操作比较多，所以用B+树作为索引结构。而Mongodb是做单一查询比较多，数据遍历操作比较少，所以用B树作为索引结构。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">那么为什么Mysql做数据遍历操作多？而Mongodb做数据遍历操作少呢？</em><br  />因为Mysql是关系型数据库，而Mongodb是非关系型数据。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">那为什么关系型数据库，做数据遍历操作多？</em></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">而非关系型数据库，做数据遍历操作少呢？</em><br  />我们继续往下看</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">关系型VS非关系型</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">假设，我们此时有两个逻辑实体:学生(Student)和班级(Class)，这两个逻辑实体之间是一对多的关系。毕竟一个班级有多个学生，一个学生只能属于一个班级。<br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">关系型数据库</strong><br  />我们在关系型数据库中，考虑的是用几张表来表示这二者之间的实体关系。常见的无外乎是，一对一关系，用一张表就行。一对多关系，用两张表。多对多关系，用三张表。<br  />那这里，我们需要用两张表表示二者之间逻辑关系，如下所示</p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585277083.png\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  /></p><br  />那我们，此时要查<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">cname</code>为<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">1班</code>的班级，有多少学生怎么办？<br  />假设<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">cname</code>这列，我们建了索引！<br  />执行SQL，如下所示！<pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;*<br  /><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;t_student&nbsp;t1,&nbsp;(<br  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;cid<br  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;t_class<br  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;cname&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);overflow-wrap: inherit !important;word-break: inherit !important;\">\'1班\'</span><br  />&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;t2<br  /><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;t1.cid&nbsp;=&nbsp;t2.cid<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">而这，就涉及到了数据遍历操作！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">因为但凡做这种关联查询，你躲不开join操作的！既然涉及到了join操作，无外乎从一个表中取一个数据，去另一个表中逐行匹配，如果索引结构是B+树，叶子节点上是有指针的，能够极大的提高这种一行一行的匹配速度！</p><section style=\"font-size: 15px;color: rgb(62, 62, 62);line-height: 1.8;word-spacing: 2px;letter-spacing: 2px;font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">有的人或许会抬杠说，如果我先执行</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;cid<br  /><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;t_class<br  /><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;cname&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);overflow-wrap: inherit !important;word-break: inherit !important;\">\'1班\'</span><br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">获得cid后，再去循环执行</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;*<br  /><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;t_student<br  /><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;cid&nbsp;=&nbsp;...<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">就可以避开join操作呀？</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">对此，我想说。你确实避开了join操作，但是你数据遍历操作还是没避开。你还是需要在student的这张表的叶子节点上，一遍又一遍的遍历！</p></section><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">那在非关系型数据库中，我们如何查询<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">cname</code>为<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">1班</code>的班级，有多少学生？<br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">非关系型数据库</strong><br  />有人说，你可以这么设计？也就是弄两个集合如下所示</p></section><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585277083.png\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  /></p><section style=\"font-size: 15px;color: rgb(62, 62, 62);line-height: 1.8;word-spacing: 2px;letter-spacing: 2px;font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\">然后，执行两次查询去获得结果！一次去class集合查，获得id后再去student集合查。<p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">确实，这么设计是可以的，我没说不行。只是不符合非关系型数据库的设计初衷。在MongoDB中，根本不推荐这么设计。虽然，Mongodb中有一个$lookup操作，可以做join查询。但是理想情况下，这个$lookup操作应该不会经常使用，如果你需要经常使用它，那么你就使用了错误的数据存储了（数据库）：如果你有相关联的数据，应该使用关系型数据库（SQL）。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">因此，正规的设计应该如下<br  /></p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585277083.png\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  /></p><br  />假设<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">name</code>这列，我们建了索引！<br  />我只需执行一次语句<pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">db</span><span style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);overflow-wrap: inherit !important;word-break: inherit !important;\">.class</span><span style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);overflow-wrap: inherit !important;word-break: inherit !important;\">.find</span>(&nbsp;{&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);overflow-wrap: inherit !important;word-break: inherit !important;\">name</span>:&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);overflow-wrap: inherit !important;word-break: inherit !important;\">\'1班\'</span>&nbsp;}&nbsp;)<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这样就能查询出自己想要的结果。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">而这，就是一种单一数据查询!毕竟你不需要去逐行匹配，不涉及遍历操作,幸运的情况下，有可能一次IO就能够得到你想要的结果。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">因此，由于关系型数据库和非关系型数据的设计方式上的不同。导致在关系型数据中，遍历操作比较常见，因此采用B+树作为索引，比较合适。而在非关系型数据库中，单一查询比较常见，因此采用B树作为索引，比较合适。</p><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">面试套路</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">目前套路有如下几种</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">套路一</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">你简历写了mysql，没写mongodb!<br  />面试官:\"说说mysql索引结构？\"<br  />我:\"巴拉巴拉\"<br  />面试官:\"知道为什么用B+树，不用B树么？\"<br  />这个时候正常的面试者就蒙了，会把B树的缺点喷一通！于是乎下一问就是<br  />面试官:\"其实一些非关系型数据库，如mongodb用的就是B树，你知道原因么？\"<br  />然后你就回去等通知了！</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">套路二</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">你简历写了mysql，也写了mongodb!<br  />这种情况更完美！<br  />面试官:\"说说mysql索引结构？\"<br  />我:\"巴拉巴拉\"<br  />面试官:\"你简历写了Mongodb，有了解过他的索引结构么？\"<br  />我:\"巴拉巴拉\"<br  />面试官:\"为什么Mongodb索引用B树，而Mysql用B+树？\"<br  />然后你就回去等通知了！</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">套路三</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">你简历既没写mysql，没写mongodb!<br  />面试官；\"如果你来设计数据库，你会对他的索引用什么数据结构？\"<br  />我:\"首先不考虑红黑树这类，巴拉巴拉…应该会用B树或者B+树。\"<br  />面试官；“如果我要设计一个像Mongodb那样的非关系型数据库，我要用什么数据结构当索引比较合适?”<br  />然后你就可以回去等通知了！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">上面三个套路都是真实存在的！总之，只要面试官想问这个问题，都可以绕到这个问题上去！</p><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">总结</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">其实这篇文章很早以前就想写，后来一直耽搁着。今天有时间刚好补上，希望大家有所收获。</p></section><p><br mpa-from-tpl=\"t\"  /></p><section  mpa-from-tpl=\"t\"><section  mpa-from-tpl=\"t\"><p style=\"clear: both;min-height: 1em;color: rgb(51, 51, 51);font-size: 17px;letter-spacing: 0.544px;text-align: justify;\"><a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247486567&amp;idx=1&amp;sn=181b97f64f53edfba841c3453813226c&amp;chksm=ebd74d66dca0c470f0b839a1f4d498ad2841a53413341ca80e5449a42609809bae4dda491d81&amp;scene=21#wechat_redirect\" tab=\"innerlink\" hasload=\"1\" style=\"color: rgb(0, 82, 255);-webkit-tap-highlight-color: rgba(0, 0, 0, 0);cursor: pointer;font-size: 24px;\" rel=\"noopener noreferrer\">戳：百万字长文带你学习「Java」</a><br mpa-from-tpl=\"t\"  /></p><p style=\"clear: both;min-height: 1em;color: rgb(51, 51, 51);font-size: 17px;letter-spacing: 0.544px;text-align: justify;\"><br mpa-from-tpl=\"t\"  /></p><section  mpa-from-tpl=\"t\" style=\"color: rgb(51, 51, 51);font-size: 17px;letter-spacing: 0.544px;text-align: justify;\"><section  mpa-from-tpl=\"t\"><section  mpa-from-tpl=\"t\" style=\"color: rgb(0, 0, 0);font-size: 16px;\"><section  mpa-from-tpl=\"t\"><pre  style=\"margin-top: 10px;margin-bottom: 10px;word-spacing: 2px;\"><p style=\"margin-bottom: 16px;clear: both;min-height: 1em;letter-spacing: 0.544px;white-space: normal;color: rgb(36, 41, 46);\">如果大家想要<span style=\"font-weight: 600;\">实时</span>关注我更新的文章以及分享的干货的话，可以关注我的公众号<span style=\"color: rgb(217, 33, 66);\"><strong mpa-from-tpl=\"t\">Java3y</strong></span>。</p><ul class=\"list-paddingleft-2\" mpa-from-tpl=\"t\" style=\"list-style-type: circle;\"><li><p style=\"clear: both;min-height: 1em;\">获取Java精美<strong mpa-from-tpl=\"t\">脑图<img    style=\"display: inline-block;vertical-align: text-bottom;height: auto !important;visibility: visible !important;width: 20px !important;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585277084.png\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  /></strong><span style=\"text-indent: 2em;\"></span></p></li><li><p style=\"clear: both;min-height: 1em;\"><span style=\"caret-color: rgb(51, 51, 51);orphans: 4;white-space: pre-wrap;text-size-adjust: auto;\">🔥</span>获取Java学习<strong mpa-from-tpl=\"t\">路线<img    style=\"display: inline-block;vertical-align: text-bottom;height: auto !important;visibility: visible !important;width: 20px !important;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585277084.png\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  /></strong></p></li><li><p style=\"clear: both;min-height: 1em;\">获取开发常用<strong mpa-from-tpl=\"t\">工具<img    style=\"display: inline-block;vertical-align: text-bottom;height: auto !important;visibility: visible !important;width: 20px !important;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585277084.png\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  /></strong></p></li><li><p style=\"clear: both;min-height: 1em;\"><span style=\"text-indent: 2em;\"><span style=\"caret-color: rgb(51, 51, 51);orphans: 4;white-space: pre-wrap;text-size-adjust: auto;\">🔥加入技术<strong mpa-from-tpl=\"t\">交流群</strong></span></span><strong mpa-from-tpl=\"t\" style=\"text-indent: 2em;\"><img    style=\"display: inline-block;vertical-align: text-bottom;height: auto !important;visibility: visible !important;width: 20px !important;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585277084.png\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  /></strong></p></li></ul><p style=\"margin-bottom: 16px;clear: both;min-height: 1em;letter-spacing: 0.544px;white-space: normal;color: rgb(36, 41, 46);\">在公众号下回复「<span style=\"font-weight: 600;font-size: 20px;color: rgb(255, 76, 0);\">888</span>」即可获取！！<br mpa-from-tpl=\"t\"  /></p><p style=\"clear: both;min-height: 1em;letter-spacing: 0.544px;white-space: normal;text-align: center;\"><img class=\"rich_pages\"      style=\"height: auto !important;visibility: visible !important;width: 600px !important;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585277085.gif\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  /></p><p style=\"clear: both;min-height: 1em;letter-spacing: 0.544px;white-space: normal;text-align: center;\"><strong mpa-from-tpl=\"t\">点个在看<img     style=\"caret-color: rgb(51, 51, 51);letter-spacing: 0.544px;text-align: right;text-size-adjust: auto;vertical-align: middle;height: auto !important;visibility: visible !important;width: 19.825px !important;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585277085.jpeg\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  />，分享到朋友圈<img    style=\"height: auto !important;max-height: 20px !important;visibility: visible !important;width: 20.3077px !important;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585277085.png\" alt=\"为什么Mongodb索引用B树，而Mysql用B+树?\" title=\"为什么Mongodb索引用B树，而Mysql用B+树?\"  />，对我真的很重要！！</strong></p></pre></section></section></section></section></section></section> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（Java3y）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/ZbkRWFT5rXIA9ZXzwTZTTA\" rel=\"noopener noreferrer\">为什么Mongodb索引用B树，而Mysql用B+树?</a></p></blockquote></div>', '为什么Mongodb索引用B树，而Mysql用B+树?', '', 'inherit', 'closed', 'closed', '', '11-revision-v1', '', '', '2020-03-27 10:44:45', '2020-03-27 02:44:45', '', 11, 'https://www.javashitang.com/?p=26', 0, 'revision', '', 0);
INSERT INTO `wp_posts` VALUES (27, 1, '2020-03-24 00:50:50', '2020-03-27 02:45:31', '<div class=\"bpp-post-content\">                                                                                                                            <section style=\"font-size: 15px;color: rgb(62, 62, 62);line-height: 1.8;word-spacing: 2px;letter-spacing: 2px;font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\"><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">引言</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这篇文章作为<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MzIwMDgzMjc3NA==&amp;mid=2247484720&amp;idx=1&amp;sn=7bd7774058e7886eeb3dedb38aa8657a&amp;chksm=96f66759a181ee4f4c177a755c3ac6b6e97fef148bbf4afea8616f4edec33bf6d4f18cda9f69&amp;scene=21#wechat_redirect\" textvalue=\"《面试官:谈谈你对mysql索引的认识》\" tab=\"innerlink\" rel=\"noopener noreferrer\">《面试官:谈谈你对mysql索引的认识》</a>的续篇，我当时在写这篇的时候，考虑到篇幅问题所以略去了联合索引的内容，今天给大家补上。<br  />本文预计分为两个部分:<br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">(1)联合索引部分的基础知识</strong><br  />在这个部分，我们温习一下联合索引的基础<br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">(2)联合索引部分的实战题</strong><br  />在这个部分，列举几个我认为算是实战中的代表题，挑出来说说。</p><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">正文</span></h2><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">基础</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">讲联合索引，一定要扯最左匹配!放心，我不扯有的没的，几句话懂个大概就行！<br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">最左匹配</strong><br  />所谓最左原则指的就是如果你的 SQL 语句中用到了联合索引中的最左边的索引，那么这条 SQL 语句就可以利用这个联合索引去进行匹配，值得注意的是，当遇到范围查询(&gt;、&lt;、between、like)就会停止匹配。<br  />假设，我们对(a,b)字段建立一个索引，也就是说，你where后条件为</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);overflow-wrap: inherit !important;word-break: inherit !important;\">a</span>&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span><br  /><span style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);overflow-wrap: inherit !important;word-break: inherit !important;\">a</span>&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;and&nbsp;b&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">2</span><br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">是可以匹配索引的。但是要注意的是~你执行</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);overflow-wrap: inherit !important;word-break: inherit !important;\">b</span>=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">2</span>&nbsp;and&nbsp;a&nbsp;=<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span><br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">也是能匹配到索引的，因为Mysql有优化器会自动调整a,b的顺序与索引顺序一致。<br  />相反的，你执行</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);overflow-wrap: inherit !important;word-break: inherit !important;\">b</span>&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">2</span><br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">就匹配不到索引了。<br  />而你对(a,b,c,d)建立索引,where后条件为</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\">a&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">and</span>&nbsp;b&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">2</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">and</span>&nbsp;c&nbsp;&gt;&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">3</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">and</span>&nbsp;d&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">4</span>&nbsp;<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">那么，a,b,c三个字段能用到索引，而d就匹配不到。因为遇到了范围查询！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">最左匹配的原理？</strong><br  />假设，我们对(a,b)字段建立索引，那么入下图所示<br  /></p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585277132.png\" alt=\"面试官:谈谈你对mysql联合索引的认识?\" title=\"面试官:谈谈你对mysql联合索引的认识?\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">如图所示他们是按照a来进行排序，在a相等的情况下，才按b来排序。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">因此，我们可以看到a是有序的1，1，2，2，3，3。而b是一种全局无序，局部相对有序状态!<br  /><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">什么意思呢？</em><br  />从全局来看，b的值为1，2，1，4，1，2，是无序的，因此直接执行<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">b = 2</code>这种查询条件没有办法利用索引。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">从局部来看，当a的值确定的时候，b是有序的。例如<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">a = 1</code>时，b值为1<span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\"></span><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">，</span>2是有序的状态。当<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">a = 2</code>时候，b的值为1<span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">，</span>4也是有序状态。<br  />因此，你执行<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">a = 1 and b = 2</code>时a<span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">，</span>b字段能用到索引的。而你执行<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">a &gt; 1 and b = 2</code>时，a字段能用到索引，b字段用不到索引。因为a的值此时是一个范围，不是固定的，在这个范围内b值不是有序的，因此b字段用不上索引。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">综上所示，最左匹配原则，在遇到范围查询的时候，就会停止匹配。</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">实战</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">OK，懂上面的基础，我们就可以开始扯了~我举了经典的五大题型，看完基本就懂！</p><h4 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.2em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">题型一</span></h4><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">如果sql为</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;*&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">table</span>&nbsp;</code><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;a&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">and</span>&nbsp;b&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">2</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">and</span>&nbsp;c&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">3</span>;&nbsp;<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">如何建立索引?<br  />如果此题回答为对(a,b,c)建立索引，那都可以回去等通知了。<br  />此题正确答法是:(a,b,c)或者(c,b,a)或者(b,a,c)都可以，重点要的是将区分度高的字段放在前面，区分度低的字段放后面。像性别、状态这种字段区分度就很低，我们一般放后面。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">例如假设区分度由大到小为b,a,c。那么我们就对(b,a,c)建立索引。在执行sql的时候，优化器会帮我们调整where后a,b,c的顺序，让我们用上索引。</p><h4 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.2em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">题型二</span></h4><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">如果sql为</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;*&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">table</span>&nbsp;</code><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;a&nbsp;&gt;&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">and</span>&nbsp;b&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">2</span>;&nbsp;<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">如何建立索引?<br  />如果此题回答为对(a,b)建立索引，那都可以回去等通知了。<br  />此题正确答法是，对(b,a)建立索引。如果你建立的是(a,b)索引，那么只有a字段能用得上索引，毕竟最左匹配原则遇到范围查询就停止匹配。<br  />如果对(b,a)建立索引那么两个字段都能用上，优化器会帮我们调整where后a,b的顺序，让我们用上索引。</p><h4 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.2em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">题型三</span></h4><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">如果sql为</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;*&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);overflow-wrap: inherit !important;word-break: inherit !important;\">`table`</span>&nbsp;</code><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;a&nbsp;&gt;&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">and</span>&nbsp;b&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">2</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">and</span>&nbsp;c&nbsp;&gt;&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">3</span>;&nbsp;<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">如何建立索引?<br  />此题回答也是不一定，(b,a)或者(b<span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">,</span>c)都可以，要结合具体情况具体分析。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">拓展一下</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;*&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);overflow-wrap: inherit !important;word-break: inherit !important;\">`table`</span>&nbsp;</code><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;a&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">and</span>&nbsp;b&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">2</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">and</span>&nbsp;c&nbsp;&gt;&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">3</span>;&nbsp;<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">怎么建索引？嗯，大家一定都懂了！</p><h4 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.2em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">题型四</span></h4><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;*&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);overflow-wrap: inherit !important;word-break: inherit !important;\">`table`</span>&nbsp;</code><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;a&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">ORDER</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">BY</span>&nbsp;b;<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">如何建立索引？<br  />这还需要想？一看就是对(a,b)建索引，当a = 1的时候，b相对有序，可以避免再次排序！<br  />那么</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;*&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);overflow-wrap: inherit !important;word-break: inherit !important;\">`table`</span>&nbsp;</code><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;a&nbsp;&gt;&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">ORDER</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">BY</span>&nbsp;b;&nbsp;<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">如何建立索引？<br  />对(a)建立索引，因为a的值是一个范围，这个范围内b值是无序的，没有必要对(a,b)建立索引。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">拓展一下</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;*&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);overflow-wrap: inherit !important;word-break: inherit !important;\">`table`</span>&nbsp;</code><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;a&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">AND</span>&nbsp;b&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">2</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">AND</span>&nbsp;c&nbsp;&gt;&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">3</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">ORDER</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">BY</span>&nbsp;c;<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">怎么建索引?</p><h4 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.2em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">题型五</span></h4><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;*&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);overflow-wrap: inherit !important;word-break: inherit !important;\">`table`</span>&nbsp;</code><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;a&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">IN</span>&nbsp;(<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>,<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">2</span>,<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">3</span>)&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">and</span>&nbsp;b&nbsp;&gt;&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>;&nbsp;<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">如何建立索引？<br  />还是对(a<span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">,</span>b)建立索引，因为IN在这里可以视为等值引用，不会中止索引匹配，所以还是(a,b)!</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">拓展一下</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;*&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);overflow-wrap: inherit !important;word-break: inherit !important;\">`table`</span>&nbsp;</code><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;a&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">AND</span>&nbsp;b&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">IN</span>&nbsp;(<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>,<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">2</span>,<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">3</span>)&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">AND</span>&nbsp;c&nbsp;&gt;&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">3</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">ORDER</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">BY</span>&nbsp;c;<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">如何建立索引？此时c排序是用不到索引的。</p><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">总结</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">希望大家在面试的时候遇到联合索引的题目，能够答出来吧</p></section><p><br  /></p> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（孤独烟）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/Ar1GovtycSaLZTFdVrOwXQ\" rel=\"noopener noreferrer\">面试官:谈谈你对mysql联合索引的认识?</a></p></blockquote></div>', '面试官:谈谈你对mysql联合索引的认识?', '', 'publish', 'open', 'open', '', '3156f7a508', '', '', '2020-03-27 10:45:32', '2020-03-27 02:45:32', '', 0, 'https://www.javashitang.com/?p=27', 0, 'post', '', 0);
INSERT INTO `wp_posts` VALUES (28, 1, '2020-03-27 10:45:32', '2020-03-27 02:45:32', '', 'beepress9-1585277132', '', 'inherit', 'open', 'closed', '', 'beepress9-1585277132', '', '', '2020-03-27 10:45:32', '2020-03-27 02:45:32', '', 27, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585277132.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (29, 1, '2020-03-27 10:45:32', '2020-03-27 02:45:32', '', 'beepress7-1585277132', '', 'inherit', 'open', 'closed', '', 'beepress7-1585277132', '', '', '2020-03-27 10:45:32', '2020-03-27 02:45:32', '', 27, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585277132.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (30, 1, '2020-03-27 10:45:32', '2020-03-27 02:45:32', '<div class=\"bpp-post-content\">                                                                                                                            <section style=\"font-size: 15px;color: rgb(62, 62, 62);line-height: 1.8;word-spacing: 2px;letter-spacing: 2px;font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\"><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">引言</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这篇文章作为<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s?__biz=MzIwMDgzMjc3NA==&amp;mid=2247484720&amp;idx=1&amp;sn=7bd7774058e7886eeb3dedb38aa8657a&amp;chksm=96f66759a181ee4f4c177a755c3ac6b6e97fef148bbf4afea8616f4edec33bf6d4f18cda9f69&amp;scene=21#wechat_redirect\" textvalue=\"《面试官:谈谈你对mysql索引的认识》\" tab=\"innerlink\" rel=\"noopener noreferrer\">《面试官:谈谈你对mysql索引的认识》</a>的续篇，我当时在写这篇的时候，考虑到篇幅问题所以略去了联合索引的内容，今天给大家补上。<br  />本文预计分为两个部分:<br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">(1)联合索引部分的基础知识</strong><br  />在这个部分，我们温习一下联合索引的基础<br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">(2)联合索引部分的实战题</strong><br  />在这个部分，列举几个我认为算是实战中的代表题，挑出来说说。</p><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">正文</span></h2><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">基础</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">讲联合索引，一定要扯最左匹配!放心，我不扯有的没的，几句话懂个大概就行！<br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">最左匹配</strong><br  />所谓最左原则指的就是如果你的 SQL 语句中用到了联合索引中的最左边的索引，那么这条 SQL 语句就可以利用这个联合索引去进行匹配，值得注意的是，当遇到范围查询(&gt;、&lt;、between、like)就会停止匹配。<br  />假设，我们对(a,b)字段建立一个索引，也就是说，你where后条件为</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);overflow-wrap: inherit !important;word-break: inherit !important;\">a</span>&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span><br  /><span style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);overflow-wrap: inherit !important;word-break: inherit !important;\">a</span>&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;and&nbsp;b&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">2</span><br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">是可以匹配索引的。但是要注意的是~你执行</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);overflow-wrap: inherit !important;word-break: inherit !important;\">b</span>=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">2</span>&nbsp;and&nbsp;a&nbsp;=<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span><br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">也是能匹配到索引的，因为Mysql有优化器会自动调整a,b的顺序与索引顺序一致。<br  />相反的，你执行</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(165, 218, 45);overflow-wrap: inherit !important;word-break: inherit !important;\">b</span>&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">2</span><br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">就匹配不到索引了。<br  />而你对(a,b,c,d)建立索引,where后条件为</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\">a&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">and</span>&nbsp;b&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">2</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">and</span>&nbsp;c&nbsp;&gt;&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">3</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">and</span>&nbsp;d&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">4</span>&nbsp;<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">那么，a,b,c三个字段能用到索引，而d就匹配不到。因为遇到了范围查询！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">最左匹配的原理？</strong><br  />假设，我们对(a,b)字段建立索引，那么入下图所示<br  /></p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585277132.png\" alt=\"面试官:谈谈你对mysql联合索引的认识?\" title=\"面试官:谈谈你对mysql联合索引的认识?\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">如图所示他们是按照a来进行排序，在a相等的情况下，才按b来排序。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">因此，我们可以看到a是有序的1，1，2，2，3，3。而b是一种全局无序，局部相对有序状态!<br  /><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">什么意思呢？</em><br  />从全局来看，b的值为1，2，1，4，1，2，是无序的，因此直接执行<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">b = 2</code>这种查询条件没有办法利用索引。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">从局部来看，当a的值确定的时候，b是有序的。例如<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">a = 1</code>时，b值为1<span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\"></span><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">，</span>2是有序的状态。当<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">a = 2</code>时候，b的值为1<span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">，</span>4也是有序状态。<br  />因此，你执行<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">a = 1 and b = 2</code>时a<span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">，</span>b字段能用到索引的。而你执行<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">a &gt; 1 and b = 2</code>时，a字段能用到索引，b字段用不到索引。因为a的值此时是一个范围，不是固定的，在这个范围内b值不是有序的，因此b字段用不上索引。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">综上所示，最左匹配原则，在遇到范围查询的时候，就会停止匹配。</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">实战</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">OK，懂上面的基础，我们就可以开始扯了~我举了经典的五大题型，看完基本就懂！</p><h4 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.2em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">题型一</span></h4><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">如果sql为</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;*&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">table</span>&nbsp;</code><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;a&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">and</span>&nbsp;b&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">2</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">and</span>&nbsp;c&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">3</span>;&nbsp;<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">如何建立索引?<br  />如果此题回答为对(a,b,c)建立索引，那都可以回去等通知了。<br  />此题正确答法是:(a,b,c)或者(c,b,a)或者(b,a,c)都可以，重点要的是将区分度高的字段放在前面，区分度低的字段放后面。像性别、状态这种字段区分度就很低，我们一般放后面。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">例如假设区分度由大到小为b,a,c。那么我们就对(b,a,c)建立索引。在执行sql的时候，优化器会帮我们调整where后a,b,c的顺序，让我们用上索引。</p><h4 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.2em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">题型二</span></h4><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">如果sql为</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;*&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">table</span>&nbsp;</code><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;a&nbsp;&gt;&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">and</span>&nbsp;b&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">2</span>;&nbsp;<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">如何建立索引?<br  />如果此题回答为对(a,b)建立索引，那都可以回去等通知了。<br  />此题正确答法是，对(b,a)建立索引。如果你建立的是(a,b)索引，那么只有a字段能用得上索引，毕竟最左匹配原则遇到范围查询就停止匹配。<br  />如果对(b,a)建立索引那么两个字段都能用上，优化器会帮我们调整where后a,b的顺序，让我们用上索引。</p><h4 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.2em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">题型三</span></h4><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">如果sql为</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;*&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);overflow-wrap: inherit !important;word-break: inherit !important;\">`table`</span>&nbsp;</code><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;a&nbsp;&gt;&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">and</span>&nbsp;b&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">2</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">and</span>&nbsp;c&nbsp;&gt;&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">3</span>;&nbsp;<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">如何建立索引?<br  />此题回答也是不一定，(b,a)或者(b<span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">,</span>c)都可以，要结合具体情况具体分析。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">拓展一下</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;*&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);overflow-wrap: inherit !important;word-break: inherit !important;\">`table`</span>&nbsp;</code><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;a&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">and</span>&nbsp;b&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">2</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">and</span>&nbsp;c&nbsp;&gt;&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">3</span>;&nbsp;<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">怎么建索引？嗯，大家一定都懂了！</p><h4 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.2em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">题型四</span></h4><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;*&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);overflow-wrap: inherit !important;word-break: inherit !important;\">`table`</span>&nbsp;</code><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;a&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">ORDER</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">BY</span>&nbsp;b;<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">如何建立索引？<br  />这还需要想？一看就是对(a,b)建索引，当a = 1的时候，b相对有序，可以避免再次排序！<br  />那么</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;*&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);overflow-wrap: inherit !important;word-break: inherit !important;\">`table`</span>&nbsp;</code><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;a&nbsp;&gt;&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">ORDER</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">BY</span>&nbsp;b;&nbsp;<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">如何建立索引？<br  />对(a)建立索引，因为a的值是一个范围，这个范围内b值是无序的，没有必要对(a,b)建立索引。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">拓展一下</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;*&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);overflow-wrap: inherit !important;word-break: inherit !important;\">`table`</span>&nbsp;</code><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;a&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">AND</span>&nbsp;b&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">2</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">AND</span>&nbsp;c&nbsp;&gt;&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">3</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">ORDER</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">BY</span>&nbsp;c;<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">怎么建索引?</p><h4 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.2em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">题型五</span></h4><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;*&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);overflow-wrap: inherit !important;word-break: inherit !important;\">`table`</span>&nbsp;</code><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;a&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">IN</span>&nbsp;(<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>,<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">2</span>,<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">3</span>)&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">and</span>&nbsp;b&nbsp;&gt;&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>;&nbsp;<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">如何建立索引？<br  />还是对(a<span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">,</span>b)建立索引，因为IN在这里可以视为等值引用，不会中止索引匹配，所以还是(a,b)!</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">拓展一下</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">SELECT</span>&nbsp;*&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(238, 220, 112);overflow-wrap: inherit !important;word-break: inherit !important;\">`table`</span>&nbsp;</code><code style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46);padding: 0.5em;overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">WHERE</span>&nbsp;a&nbsp;=&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">AND</span>&nbsp;b&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">IN</span>&nbsp;(<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>,<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">2</span>,<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">3</span>)&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">AND</span>&nbsp;c&nbsp;&gt;&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(174, 135, 250);overflow-wrap: inherit !important;word-break: inherit !important;\">3</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">ORDER</span>&nbsp;<span style=\"font-size: inherit;line-height: inherit;color: rgb(248, 35, 117);overflow-wrap: inherit !important;word-break: inherit !important;\">BY</span>&nbsp;c;<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">如何建立索引？此时c排序是用不到索引的。</p><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">总结</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">希望大家在面试的时候遇到联合索引的题目，能够答出来吧</p></section><p><br  /></p> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（孤独烟）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/Ar1GovtycSaLZTFdVrOwXQ\" rel=\"noopener noreferrer\">面试官:谈谈你对mysql联合索引的认识?</a></p></blockquote></div>', '面试官:谈谈你对mysql联合索引的认识?', '', 'inherit', 'closed', 'closed', '', '27-revision-v1', '', '', '2020-03-27 10:45:32', '2020-03-27 02:45:32', '', 27, 'https://www.javashitang.com/?p=30', 0, 'revision', '', 0);
INSERT INTO `wp_posts` VALUES (31, 1, '2020-03-19 10:12:41', '2020-03-27 02:46:17', '<div class=\"bpp-post-content\">                                                                                                                            <section style=\"font-size: 15px;color: rgb(62, 62, 62);line-height: 1.8;word-spacing: 2px;letter-spacing: 2px;font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\"><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">引言</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">一道面试题开始～～<br  />面试官:\"假设我们有一个线程池，核心线程数为10，最大线程数也为20，任务队列为100。现在来了100个任务，线程池里现在有几个线程运行?\"<br  />粉丝豪:\"应该是10吧。\"<br  />面试官:\"你确定?\"<br  />粉丝豪:\"确定啊，就是10…\"<br  />于是乎，粉丝豪就回去等通知了～</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">此题的陷阱，大家如果看出来了，本文就不用看了！<br  />其实这道题正确的答案是\"不一定！\"因为并没指明是哪一种线程池机制，带着我们的疑问继续往下看！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">ps</code>:不要纠结这题是不是咬文嚼字，现在人多如米，题目就是这样坑～</p><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">正文</span></h2><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">先进队列，到最大值,再起线程</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这种情况是大家最容易想到的情况，因为JDK中的线程池，也就是<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">ThreadPoolExecutor</code>就是这种机制的！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">OK，我们先来看一下ThreadPoolExecutor的execute方法，如下图所示<br  /></p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585277178.jpg\" alt=\"面试官:这道线程池场景题回答一下?\" title=\"面试官:这道线程池场景题回答一下?\"  /></p><br  />看到三个红框了吧(其实源码里有解释)，对应的三步分别是<ul style=\"font-size: inherit;color: inherit;line-height: inherit;padding-left: 32px;\" class=\"list-paddingleft-2\"><li style=\"font-size: inherit;color: inherit;line-height: inherit;margin-bottom: 0.5em;\"><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(1)判断当前活跃线程数是否小于corePoolSize,如果小于，则调用addWorker创建线程执行任务</span></p></li><li style=\"font-size: inherit;color: inherit;line-height: inherit;margin-bottom: 0.5em;\"><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(2)如果不小于corePoolSize，则将任务添加到workQueue队列</span></p></li><li style=\"font-size: inherit;color: inherit;line-height: inherit;margin-bottom: 0.5em;\"><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(3)如果放入workQueue失败，则创建线程执行任务，如果这时创建线程失败(当前线程数不小于maximumPoolSize时)，就会调用reject(内部调用handler)拒绝接受任务。</span></p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">用一张图来解释如下<br  /></p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585277178.png\" alt=\"面试官:这道线程池场景题回答一下?\" title=\"面试官:这道线程池场景题回答一下?\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">如图所示，默认的机制为线程池里的核心线程数不够了，后面进来的任务会先丢队列，当队列满了，才起新线程。<br  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">因此，按照这套机制！粉丝豪的回答是正确的，当有100个任务添加进来时，剩下先起10个核心线程，剩下90个任务都丢进队列里，因此线程池里只有10个线程在执行！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">但是，有一种线程池机制的是这样的</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">先起线程，到最大值,再进队列</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">不知道大家有没听过在dubbo中，有一种线程池叫<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">EagerThreadPoolExecutor</code>线程池。<br  />该线程池的execute方法如下所示<br  /></p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585277179.jpg\" alt=\"面试官:这道线程池场景题回答一下?\" title=\"面试官:这道线程池场景题回答一下?\"  /></p><br  />它调的还是父类的<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">execute</code>方法，也还是<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">ThreadPoolExecutor</code>中的<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">execute</code>方法！<br  />但是，它的队列！是一种自定义队列，叫<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">TaskQueue</code>,它的offer方法如下<p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585277179.jpg\" alt=\"面试官:这道线程池场景题回答一下?\" title=\"面试官:这道线程池场景题回答一下?\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这个offer方法的最核心的是红框中那步,当前线程数小于最大线程数时，则直接返回false。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">ThreadPoolExecutor</code>中的<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">execute</code>方法中的第二步的条件中，如果workQueue.offer返回为fasle,则直接进入第三步，创建新任务！如下图所示</p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585277180.jpg\" alt=\"面试官:这道线程池场景题回答一下?\" title=\"面试官:这道线程池场景题回答一下?\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">EagerThreadPoolExecutor</code>线程池通过自定义队列的这么一种形式，改写了线程池的机制。这种线程池的机制是核心线程数不够了，先起线程，当线程达到最大值后，后面的任务就丢进队列！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">因此，如果按照这么一套机制，粉丝豪的答案就不正确了。当100个任务添加进来时，直接会起20个线程，剩下80个任务都丢进队列！</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">发散题</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这是一道真实的发散题，其实问法也是差不多的。如果上面的内容能看懂，这道题也能答的上来！<br  /></p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress2-1585277180.jpg\" alt=\"面试官:这道线程池场景题回答一下?\" title=\"面试官:这道线程池场景题回答一下?\"  /></p><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">总结</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">小小的线程池，大大的坑～希望大家有所收获～～</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">本文卒！</p></section><p><br  /></p> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（孤独烟）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/sRfLCpn6VRF6760DFDxyDQ\" rel=\"noopener noreferrer\">面试官:这道线程池场景题回答一下?</a></p></blockquote></div>', '面试官:这道线程池场景题回答一下?', '', 'publish', 'open', 'open', '', '63c60ab7ae', '', '', '2020-03-27 10:46:20', '2020-03-27 02:46:20', '', 0, 'https://www.javashitang.com/?p=31', 0, 'post', '', 0);
INSERT INTO `wp_posts` VALUES (32, 1, '2020-03-27 10:46:17', '2020-03-27 02:46:17', '', 'beepress2-1585277177', '', 'inherit', 'open', 'closed', '', 'beepress2-1585277177', '', '', '2020-03-27 10:46:17', '2020-03-27 02:46:17', '', 31, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress2-1585277177.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (33, 1, '2020-03-27 10:46:18', '2020-03-27 02:46:18', '', 'beepress5-1585277178', '', 'inherit', 'open', 'closed', '', 'beepress5-1585277178', '', '', '2020-03-27 10:46:18', '2020-03-27 02:46:18', '', 31, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585277178.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (34, 1, '2020-03-27 10:46:18', '2020-03-27 02:46:18', '', 'beepress3-1585277178', '', 'inherit', 'open', 'closed', '', 'beepress3-1585277178', '', '', '2020-03-27 10:46:18', '2020-03-27 02:46:18', '', 31, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585277178.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (35, 1, '2020-03-27 10:46:19', '2020-03-27 02:46:19', '', 'beepress5-1585277179', '', 'inherit', 'open', 'closed', '', 'beepress5-1585277179', '', '', '2020-03-27 10:46:19', '2020-03-27 02:46:19', '', 31, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585277179.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (36, 1, '2020-03-27 10:46:19', '2020-03-27 02:46:19', '', 'beepress7-1585277179', '', 'inherit', 'open', 'closed', '', 'beepress7-1585277179', '', '', '2020-03-27 10:46:19', '2020-03-27 02:46:19', '', 31, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585277179.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (37, 1, '2020-03-27 10:46:20', '2020-03-27 02:46:20', '', 'beepress3-1585277180', '', 'inherit', 'open', 'closed', '', 'beepress3-1585277180', '', '', '2020-03-27 10:46:20', '2020-03-27 02:46:20', '', 31, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585277180.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (38, 1, '2020-03-27 10:46:20', '2020-03-27 02:46:20', '', 'beepress2-1585277180', '', 'inherit', 'open', 'closed', '', 'beepress2-1585277180', '', '', '2020-03-27 10:46:20', '2020-03-27 02:46:20', '', 31, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress2-1585277180.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (39, 1, '2020-03-27 10:46:20', '2020-03-27 02:46:20', '<div class=\"bpp-post-content\">                                                                                                                            <section style=\"font-size: 15px;color: rgb(62, 62, 62);line-height: 1.8;word-spacing: 2px;letter-spacing: 2px;font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\"><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">引言</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">一道面试题开始～～<br  />面试官:\"假设我们有一个线程池，核心线程数为10，最大线程数也为20，任务队列为100。现在来了100个任务，线程池里现在有几个线程运行?\"<br  />粉丝豪:\"应该是10吧。\"<br  />面试官:\"你确定?\"<br  />粉丝豪:\"确定啊，就是10…\"<br  />于是乎，粉丝豪就回去等通知了～</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">此题的陷阱，大家如果看出来了，本文就不用看了！<br  />其实这道题正确的答案是\"不一定！\"因为并没指明是哪一种线程池机制，带着我们的疑问继续往下看！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">ps</code>:不要纠结这题是不是咬文嚼字，现在人多如米，题目就是这样坑～</p><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">正文</span></h2><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">先进队列，到最大值,再起线程</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这种情况是大家最容易想到的情况，因为JDK中的线程池，也就是<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">ThreadPoolExecutor</code>就是这种机制的！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">OK，我们先来看一下ThreadPoolExecutor的execute方法，如下图所示<br  /></p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585277178.jpg\" alt=\"面试官:这道线程池场景题回答一下?\" title=\"面试官:这道线程池场景题回答一下?\"  /></p><br  />看到三个红框了吧(其实源码里有解释)，对应的三步分别是<ul style=\"font-size: inherit;color: inherit;line-height: inherit;padding-left: 32px;\" class=\"list-paddingleft-2\"><li style=\"font-size: inherit;color: inherit;line-height: inherit;margin-bottom: 0.5em;\"><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(1)判断当前活跃线程数是否小于corePoolSize,如果小于，则调用addWorker创建线程执行任务</span></p></li><li style=\"font-size: inherit;color: inherit;line-height: inherit;margin-bottom: 0.5em;\"><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(2)如果不小于corePoolSize，则将任务添加到workQueue队列</span></p></li><li style=\"font-size: inherit;color: inherit;line-height: inherit;margin-bottom: 0.5em;\"><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(3)如果放入workQueue失败，则创建线程执行任务，如果这时创建线程失败(当前线程数不小于maximumPoolSize时)，就会调用reject(内部调用handler)拒绝接受任务。</span></p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">用一张图来解释如下<br  /></p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585277178.png\" alt=\"面试官:这道线程池场景题回答一下?\" title=\"面试官:这道线程池场景题回答一下?\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">如图所示，默认的机制为线程池里的核心线程数不够了，后面进来的任务会先丢队列，当队列满了，才起新线程。<br  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">因此，按照这套机制！粉丝豪的回答是正确的，当有100个任务添加进来时，剩下先起10个核心线程，剩下90个任务都丢进队列里，因此线程池里只有10个线程在执行！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">但是，有一种线程池机制的是这样的</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">先起线程，到最大值,再进队列</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">不知道大家有没听过在dubbo中，有一种线程池叫<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">EagerThreadPoolExecutor</code>线程池。<br  />该线程池的execute方法如下所示<br  /></p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585277179.jpg\" alt=\"面试官:这道线程池场景题回答一下?\" title=\"面试官:这道线程池场景题回答一下?\"  /></p><br  />它调的还是父类的<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">execute</code>方法，也还是<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">ThreadPoolExecutor</code>中的<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">execute</code>方法！<br  />但是，它的队列！是一种自定义队列，叫<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">TaskQueue</code>,它的offer方法如下<p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585277179.jpg\" alt=\"面试官:这道线程池场景题回答一下?\" title=\"面试官:这道线程池场景题回答一下?\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这个offer方法的最核心的是红框中那步,当前线程数小于最大线程数时，则直接返回false。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">ThreadPoolExecutor</code>中的<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">execute</code>方法中的第二步的条件中，如果workQueue.offer返回为fasle,则直接进入第三步，创建新任务！如下图所示</p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585277180.jpg\" alt=\"面试官:这道线程池场景题回答一下?\" title=\"面试官:这道线程池场景题回答一下?\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">EagerThreadPoolExecutor</code>线程池通过自定义队列的这么一种形式，改写了线程池的机制。这种线程池的机制是核心线程数不够了，先起线程，当线程达到最大值后，后面的任务就丢进队列！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">因此，如果按照这么一套机制，粉丝豪的答案就不正确了。当100个任务添加进来时，直接会起20个线程，剩下80个任务都丢进队列！</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">发散题</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这是一道真实的发散题，其实问法也是差不多的。如果上面的内容能看懂，这道题也能答的上来！<br  /></p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress2-1585277180.jpg\" alt=\"面试官:这道线程池场景题回答一下?\" title=\"面试官:这道线程池场景题回答一下?\"  /></p><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">总结</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">小小的线程池，大大的坑～希望大家有所收获～～</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">本文卒！</p></section><p><br  /></p> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（孤独烟）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/sRfLCpn6VRF6760DFDxyDQ\" rel=\"noopener noreferrer\">面试官:这道线程池场景题回答一下?</a></p></blockquote></div>', '面试官:这道线程池场景题回答一下?', '', 'inherit', 'closed', 'closed', '', '31-revision-v1', '', '', '2020-03-27 10:46:20', '2020-03-27 02:46:20', '', 31, 'https://www.javashitang.com/?p=39', 0, 'revision', '', 0);
INSERT INTO `wp_posts` VALUES (40, 1, '2020-03-27 10:52:07', '2020-03-27 02:52:07', '{\n    \"widget_recent-comments[2]\": {\n        \"value\": {\n            \"encoded_serialized_instance\": \"YToyOntzOjU6InRpdGxlIjtzOjIxOiLljp/liJvlvq7kv6HlhazkvJflj7ciO3M6NjoibnVtYmVyIjtpOjU7fQ==\",\n            \"title\": \"\\u539f\\u521b\\u5fae\\u4fe1\\u516c\\u4f17\\u53f7\",\n            \"is_widget_customizer_js_value\": true,\n            \"instance_hash_key\": \"508516635ba8a8fea081f53db4dcc2f2\"\n        },\n        \"type\": \"option\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2020-03-27 02:51:49\"\n    },\n    \"sidebars_widgets[wordstar-sidebar]\": {\n        \"value\": [\n            \"search-2\",\n            \"media_image-3\",\n            \"media_image-4\"\n        ],\n        \"type\": \"option\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2020-03-27 02:51:49\"\n    },\n    \"widget_media_image[3]\": {\n        \"value\": {\n            \"encoded_serialized_instance\": \"YToxNTp7czo0OiJzaXplIjtzOjY6Im1lZGl1bSI7czo1OiJ3aWR0aCI7aTowO3M6NjoiaGVpZ2h0IjtpOjA7czo3OiJjYXB0aW9uIjtzOjA6IiI7czozOiJhbHQiO3M6MDoiIjtzOjk6ImxpbmtfdHlwZSI7czo2OiJjdXN0b20iO3M6ODoibGlua191cmwiO3M6MDoiIjtzOjEzOiJpbWFnZV9jbGFzc2VzIjtzOjA6IiI7czoxMjoibGlua19jbGFzc2VzIjtzOjA6IiI7czo4OiJsaW5rX3JlbCI7czowOiIiO3M6MTc6ImxpbmtfdGFyZ2V0X2JsYW5rIjtiOjA7czoxMToiaW1hZ2VfdGl0bGUiO3M6MDoiIjtzOjEzOiJhdHRhY2htZW50X2lkIjtpOjA7czozOiJ1cmwiO3M6MDoiIjtzOjU6InRpdGxlIjtzOjA6IiI7fQ==\",\n            \"title\": \"\",\n            \"is_widget_customizer_js_value\": true,\n            \"instance_hash_key\": \"b9855127ab4aaeb71efd9e3a7d256fbf\"\n        },\n        \"type\": \"option\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2020-03-27 02:51:49\"\n    },\n    \"widget_media_image[4]\": {\n        \"value\": {\n            \"encoded_serialized_instance\": \"YToxNTp7czo0OiJzaXplIjtzOjQ6ImZ1bGwiO3M6NToid2lkdGgiO2k6MjU4O3M6NjoiaGVpZ2h0IjtpOjI1ODtzOjc6ImNhcHRpb24iO3M6MDoiIjtzOjM6ImFsdCI7czowOiIiO3M6OToibGlua190eXBlIjtzOjY6ImN1c3RvbSI7czo4OiJsaW5rX3VybCI7czowOiIiO3M6MTM6ImltYWdlX2NsYXNzZXMiO3M6MDoiIjtzOjEyOiJsaW5rX2NsYXNzZXMiO3M6MDoiIjtzOjg6ImxpbmtfcmVsIjtzOjA6IiI7czoxNzoibGlua190YXJnZXRfYmxhbmsiO2I6MDtzOjExOiJpbWFnZV90aXRsZSI7czowOiIiO3M6MTM6ImF0dGFjaG1lbnRfaWQiO2k6NDE7czozOiJ1cmwiO3M6ODk6Imh0dHBzOi8vd3d3LmphdmFzaGl0YW5nLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAyMC8wMy9xcmNvZGVfZm9yX2doXzNiYWJiYjIxZDE1NV8yNTguanBnIjtzOjU6InRpdGxlIjtzOjIxOiLljp/liJvlvq7kv6HlhazkvJflj7ciO30=\",\n            \"title\": \"\\u539f\\u521b\\u5fae\\u4fe1\\u516c\\u4f17\\u53f7\",\n            \"is_widget_customizer_js_value\": true,\n            \"instance_hash_key\": \"a3250bb844d67b9a071fa67d52e0a312\"\n        },\n        \"type\": \"option\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2020-03-27 02:52:07\"\n    }\n}', '', '', 'trash', 'closed', 'closed', '', 'bf87aa6c-e5eb-4825-a28c-6eb639686af2', '', '', '2020-03-27 10:52:07', '2020-03-27 02:52:07', '', 0, 'https://www.javashitang.com/?p=40', 0, 'customize_changeset', '', 0);
INSERT INTO `wp_posts` VALUES (41, 1, '2020-03-27 10:51:54', '2020-03-27 02:51:54', '', 'qrcode_for_gh_3babbb21d155_258', '', 'inherit', 'open', 'closed', '', 'qrcode_for_gh_3babbb21d155_258', '', '', '2020-03-27 10:51:54', '2020-03-27 02:51:54', '', 0, 'https://www.javashitang.com/wp-content/uploads/2020/03/qrcode_for_gh_3babbb21d155_258.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (42, 1, '2020-03-28 10:02:21', '2020-03-28 02:02:21', '<!-- wp:paragraph -->\n<p>欢迎使用WordPress。这是您的第一篇文章。编辑或删除它，然后开始写作吧！</p>\n<!-- /wp:paragraph -->', '世界，您好！', '', 'inherit', 'closed', 'closed', '', '1-revision-v1', '', '', '2020-03-28 10:02:21', '2020-03-28 02:02:21', '', 1, 'https://www.javashitang.com/?p=42', 0, 'revision', '', 0);
INSERT INTO `wp_posts` VALUES (43, 1, '2020-03-28 10:03:44', '2020-03-28 02:03:44', ' ', '', '', 'publish', 'closed', 'closed', '', '43', '', '', '2020-03-28 10:09:35', '2020-03-28 02:09:35', '', 0, 'https://www.javashitang.com/?p=43', 5, 'nav_menu_item', '', 0);
INSERT INTO `wp_posts` VALUES (44, 1, '2020-03-28 10:04:40', '2020-03-28 02:04:40', '{\n    \"widget_media_image[4]\": {\n        \"value\": {\n            \"encoded_serialized_instance\": \"YToxNTp7czo0OiJzaXplIjtzOjQ6ImZ1bGwiO3M6NToid2lkdGgiO2k6MjU4O3M6NjoiaGVpZ2h0IjtpOjI1ODtzOjc6ImNhcHRpb24iO3M6MDoiIjtzOjM6ImFsdCI7czowOiIiO3M6OToibGlua190eXBlIjtzOjY6ImN1c3RvbSI7czo4OiJsaW5rX3VybCI7czowOiIiO3M6MTM6ImltYWdlX2NsYXNzZXMiO3M6MDoiIjtzOjEyOiJsaW5rX2NsYXNzZXMiO3M6MDoiIjtzOjg6ImxpbmtfcmVsIjtzOjA6IiI7czoxNzoibGlua190YXJnZXRfYmxhbmsiO2I6MDtzOjExOiJpbWFnZV90aXRsZSI7czowOiIiO3M6MTM6ImF0dGFjaG1lbnRfaWQiO2k6NDE7czozOiJ1cmwiO3M6ODk6Imh0dHBzOi8vd3d3LmphdmFzaGl0YW5nLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAyMC8wMy9xcmNvZGVfZm9yX2doXzNiYWJiYjIxZDE1NV8yNTguanBnIjtzOjU6InRpdGxlIjtzOjMzOiLkuIDkuKrmnInlubLotKfnmoTlvq7kv6HlhazkvJflj7ciO30=\",\n            \"title\": \"\\u4e00\\u4e2a\\u6709\\u5e72\\u8d27\\u7684\\u5fae\\u4fe1\\u516c\\u4f17\\u53f7\",\n            \"is_widget_customizer_js_value\": true,\n            \"instance_hash_key\": \"527d4b8ba0c3104aa13e1921be18af7b\"\n        },\n        \"type\": \"option\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2020-03-28 02:04:40\"\n    }\n}', '', '', 'trash', 'closed', 'closed', '', '1df7dcab-d588-4531-8c80-6a5dee6a864c', '', '', '2020-03-28 10:04:40', '2020-03-28 02:04:40', '', 0, 'https://www.javashitang.com/?p=44', 0, 'customize_changeset', '', 0);
INSERT INTO `wp_posts` VALUES (45, 1, '2020-03-28 10:07:33', '2020-03-28 02:07:33', '{\n    \"widget_categories[2]\": {\n        \"value\": {\n            \"encoded_serialized_instance\": \"YTo0OntzOjU6InRpdGxlIjtzOjA6IiI7czo1OiJjb3VudCI7aTowO3M6MTI6ImhpZXJhcmNoaWNhbCI7aTowO3M6ODoiZHJvcGRvd24iO2k6MDt9\",\n            \"title\": \"\",\n            \"is_widget_customizer_js_value\": true,\n            \"instance_hash_key\": \"a32e7ba437ef651e2021743b558a08c8\"\n        },\n        \"type\": \"option\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2020-03-28 02:07:33\"\n    }\n}', '', '', 'trash', 'closed', 'closed', '', 'd161883b-58fa-4ca3-aef9-eb000aecc777', '', '', '2020-03-28 10:07:33', '2020-03-28 02:07:33', '', 0, 'https://www.javashitang.com/?p=45', 0, 'customize_changeset', '', 0);
INSERT INTO `wp_posts` VALUES (46, 1, '2020-03-28 10:08:22', '2020-03-28 02:08:22', '{\n    \"blogdescription\": {\n        \"value\": \"\\u4e00\\u4e2a\\u6709\\u5e72\\u8d27\\u7684\\u7f51\\u7ad9\",\n        \"type\": \"option\",\n        \"user_id\": 1,\n        \"date_modified_gmt\": \"2020-03-28 02:08:22\"\n    }\n}', '', '', 'trash', 'closed', 'closed', '', '107e498a-88c4-4235-9f88-aa04f18e0063', '', '', '2020-03-28 10:08:22', '2020-03-28 02:08:22', '', 0, 'https://www.javashitang.com/?p=46', 0, 'customize_changeset', '', 0);
INSERT INTO `wp_posts` VALUES (47, 1, '2020-03-28 10:09:35', '2020-03-28 02:09:35', ' ', '', '', 'publish', 'closed', 'closed', '', '47', '', '', '2020-03-28 10:09:35', '2020-03-28 02:09:35', '', 0, 'https://www.javashitang.com/?p=47', 3, 'nav_menu_item', '', 0);
INSERT INTO `wp_posts` VALUES (48, 1, '2020-03-17 00:00:50', '2020-03-28 02:10:09', '<div class=\"bpp-post-content\">                                                                                                                            <h2  style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.4em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">跨域问题的由来</span></h2><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">相信很多人都或多或少了解过跨域问题，尤其在现如今前后端分离大行其道的时候。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">你在本地开发一个前端项目，这个项目是通过 node 运行的，端口是9528，而服务端是通过 spring boot 提供的，端口号是7001。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">当你调用一个服务端接口时，很可能得到类似下面这样的一个错误：</p><figure style=\"max-width: 100%;box-sizing: border-box;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><img     style=\"margin-right: auto;margin-left: auto;box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;font-size: inherit;color: inherit;line-height: inherit;display: block;overflow-wrap: break-word !important;\" title=\"跨域问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361409.jpeg\" alt=\"跨域问题是怎样造成的\"  /><figcaption style=\"margin-top: 10px;max-width: 100%;box-sizing: border-box;font-size: 0.7em;color: rgb(153, 153, 153);line-height: inherit;text-align: center;overflow-wrap: break-word !important;\">request-blocked-by-cors.jpg</figcaption></figure><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">然后你在发送请求的地方debug，在出现异常的地方你将得到这样的结果：</p><figure style=\"max-width: 100%;box-sizing: border-box;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><img     style=\"margin-right: auto;margin-left: auto;box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;font-size: inherit;color: inherit;line-height: inherit;display: block;overflow-wrap: break-word !important;\" title=\"跨域问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585361410.jpeg\" alt=\"跨域问题是怎样造成的\"  /><figcaption style=\"margin-top: 10px;max-width: 100%;box-sizing: border-box;font-size: 0.7em;color: rgb(153, 153, 153);line-height: inherit;text-align: center;overflow-wrap: break-word !important;\">blocked-error.jpg</figcaption></figure><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">异常对象很诡异，返回的 response 是 undefined 的，并且 message 消息中只有一个\"Network Error\"。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">看到这里你应该要知道，你遇到跨域问题了。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">但是你需要明确的一点是，这个请求已经发出去了，服务端也接收到并处理了，但是返回的响应结果不是浏览器想要的结果，所以浏览器将这个响应的结果给拦截了，这就是为什么你看到的response是undefined。</strong></p><h3 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.3em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">浏览器的同源策略</span></h3><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">那浏览器为什么会将服务端返回的结果拦截掉呢？</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">这就需要我们了解浏览器基于安全方面的考虑，而引入的&nbsp;<code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;overflow-wrap: break-word;box-sizing: border-box;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">同源策略(same-origin policy)</code>&nbsp;了。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">早在1995年，Netscape 公司就在浏览器中引入了“同源策略”。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">最初的 “同源策略”，主要是限制Cookie的访问，A网页设置的 Cookie，B网页无法访问，除非B网页和A网页是“同源”的。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">那么怎么确定两个网页是不是“同源”呢，所谓“同源”就是指\"协议+域名+端口\"三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p><figure style=\"max-width: 100%;box-sizing: border-box;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><img     style=\"margin-right: auto;margin-left: auto;box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;font-size: inherit;color: inherit;line-height: inherit;display: block;overflow-wrap: break-word !important;\" title=\"跨域问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361410.jpeg\" alt=\"跨域问题是怎样造成的\"  /><figcaption style=\"margin-top: 10px;max-width: 100%;box-sizing: border-box;font-size: 0.7em;color: rgb(153, 153, 153);line-height: inherit;text-align: center;overflow-wrap: break-word !important;\">the-compose-of-domain.jpg</figcaption></figure><h3 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.3em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">没有同源策略的保护</span></h3><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">那么为什么要做这个同源的限制呢？因为如果没有同源策略的保护，浏览器将没有任何安全可言。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">老李是一个钓鱼爱好者，经常在&nbsp;<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">我要买(51mai.com)</strong>&nbsp;的网站上买各种钓鱼的工具，并且通过&nbsp;<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">银行(yinhang.com)</strong>&nbsp;以账号密码的方式直接支付。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">这天老李又在&nbsp;<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">51mai.com</strong>&nbsp;上买了一根鱼竿，输入银行账号密码支付成功后，在支付成功页看到一个叫&nbsp;<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">钓鱼(diaoyu.com)</strong>&nbsp;的网站投放的一个\"免费领取鱼饵\"的广告。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">老李什么都没想就点击了这个广告，跳转到了钓鱼的网站，殊不知这真是一个 “钓鱼” 网站，老李银行账户里面钱全部被转走了。</p><figure style=\"max-width: 100%;box-sizing: border-box;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><img     style=\"margin-right: auto;margin-left: auto;box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;font-size: inherit;color: inherit;line-height: inherit;display: block;overflow-wrap: break-word !important;\" title=\"跨域问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361410.jpg\" alt=\"跨域问题是怎样造成的\"  /><figcaption style=\"margin-top: 10px;max-width: 100%;box-sizing: border-box;font-size: 0.7em;color: rgb(153, 153, 153);line-height: inherit;text-align: center;overflow-wrap: break-word !important;\">no-same-origin-policy.jpg</figcaption></figure><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">以上就是老李的钱被盗走的过程：</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">1.老李购买鱼竿，并登录了银行的网站输入账号密码进行了支付，浏览器在本地缓存了银行的Cookie</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">2.老李点击钓鱼网站，钓鱼网站使用老李登录银行之后的Cookie，伪造成自己是老李进行了转账操作。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">这个过程就是著名的CSRF(Cross Site Request Forgery)，跨站请求伪造，正是由于可能存在的伪造请求，导致了浏览器的不安全。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">那么如何防止CSRF攻击呢，可以参考这篇文章：如何防止CSRF攻击？</p><h3 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.3em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">同源策略限制哪些行为</span></h3><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">上面说了 **同源策略 **是一个安全机制，他本质是限制了从一个源加载的文档或脚本如何与来自另一个源的资源进行交互，这是一个用于隔离潜在恶意文件的重要安全机制。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">随着互联网的发展，\"同源策略\"越来越严格，不仅限于Cookie的读取。目前，如果非同源，共有三种行为受到限制。</p><blockquote style=\"padding: 15px 15px 15px 1rem;border-left-width: 6px;border-left-color: rgb(220, 230, 240);color: rgb(129, 145, 152);line-height: inherit;font-size: 0.9em;max-width: 100%;overflow-wrap: normal;box-sizing: border-box;white-space: normal;background: rgb(242, 247, 251);overflow: auto;word-break: normal;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;\"><p style=\"max-width: 100%;box-sizing: border-box;min-height: 1em;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">（1） Cookie、LocalStorage 和 IndexDB 无法读取。</p><p style=\"max-width: 100%;box-sizing: border-box;min-height: 1em;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">（2） DOM 无法获得。</p><p style=\"max-width: 100%;box-sizing: border-box;min-height: 1em;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">（3） 请求的响应被拦截。</p></blockquote><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">虽然这些限制是必要的，但是有时很不方便，合理的用途也会受到影响，所以为了能够获取非“同源”的资源，就有了跨域资源共享。</p><h2 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.4em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">跨域资源共享</span></h2><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">看到这里你应该明白，为什么文章开头的请求会被拦截了，原因就是请求的源和服务端的源不是“同源”，而服务端又没有设置允许的跨域资源共享，所以请求的响应被浏览器给拦截掉了。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">CORS 是一个 W3C 标准，全称是\"跨域资源共享\"(Cross Origin Resource Sharing)，它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了只能发送同源请求的限制。</p><h3 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.3em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">CORS实现机制</span></h3><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">那跨域资源共享机制是怎样实现的呢？</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">当一个资源(origin)通过脚本向另一个资源(host)发起请求，而被请求的资源(host)和请求源(origin)是不同的源时(协议、域名、端口不全部相同)，浏览器就会发起一个&nbsp;<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">跨域 HTTP 请求</strong>&nbsp;，并且浏览器会自动将当前资源的域添加在请求头中一个叫 Origin 的 Header 中。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">当然了，有三个标签本身就是允许跨域加载资源的：</p><blockquote style=\"padding: 15px 15px 15px 1rem;border-left-width: 6px;border-left-color: rgb(220, 230, 240);color: rgb(129, 145, 152);line-height: inherit;font-size: 0.9em;max-width: 100%;overflow-wrap: normal;box-sizing: border-box;white-space: normal;background: rgb(242, 247, 251);overflow: auto;word-break: normal;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;\"><p style=\"max-width: 100%;box-sizing: border-box;min-height: 1em;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;overflow-wrap: break-word;box-sizing: border-box;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">&lt;img src=XXX&gt;</code><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"  /><code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;overflow-wrap: break-word;box-sizing: border-box;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">&lt;link href=XXX&gt;</code><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"  /><code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;overflow-wrap: break-word;box-sizing: border-box;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">&lt;script src=XXX&gt;</code></p></blockquote><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">比如某个网站的首页 http://domain-a.com/index.html 通过 &lt;img src=\"http://domain-b.com/image.jpg\" /&gt; 来加载其他域上的图片，除此之外还有诸如通过 CDN 节点引入css和js文件的方式。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">出于安全原因，浏览器限制从脚本内发起的跨域 HTTP 请求。例如，XMLHttpRequest 和 Fetch API 遵循同源策略。也就是说使用这些 API 的 Web 应用程序只能从加载应用程序的同一个域请求 HTTP 资源，除非响应报文中包含了正确 CORS 响应头。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">通过在响应报文中设置额外的 HTTP 响应头来告诉浏览器，运行在某个 origin 上的 Web 应用被准许访问来自不同源服务器上的资源，此时浏览器就不会将该响应拦截掉了。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">那这些额外的 HTTP 响应头是什么呢？</p><table><thead style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><tr style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);overflow-wrap: break-word !important;\"><th width=\"247\" style=\"padding: 0.5em 1em;border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);max-width: 100%;box-sizing: border-box;text-align: left;font-size: 1em;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">响应头</th><th width=\"64\" style=\"padding: 0.5em 1em;border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);max-width: 100%;box-sizing: border-box;text-align: left;font-size: 1em;color: inherit;line-height: inherit;word-break: break-all;overflow-wrap: break-word !important;\">是否必须</th><th width=\"193\" style=\"padding: 0.5em 1em;border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);max-width: 100%;box-sizing: border-box;text-align: left;font-size: 1em;color: inherit;line-height: inherit;word-break: break-all;overflow-wrap: break-word !important;\">含义</th></tr></thead><tbody style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 0px;border-style: initial;border-color: initial;overflow-wrap: break-word !important;\"><tr style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);overflow-wrap: break-word !important;\"><td width=\"226\" style=\"padding: 0.5em 1em;border-color: rgb(204, 204, 204);max-width: 100%;box-sizing: border-box;font-size: 1em;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">Access-Control-Allow-Origin</strong></td><td width=\"85\" style=\"padding: 0.5em 1em;border-color: rgb(204, 204, 204);max-width: 100%;box-sizing: border-box;font-size: 1em;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">是</td><td width=\"193\" style=\"padding: 0.5em 1em;border-color: rgb(204, 204, 204);max-width: 100%;box-sizing: border-box;font-size: 1em;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">该字段表示，服务端接收哪些来源的域的请求</td></tr><tr style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);overflow-wrap: break-word !important;\"><td width=\"38\" style=\"padding: 0.5em 1em;border-color: rgb(204, 204, 204);max-width: 100%;box-sizing: border-box;font-size: 1em;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">Access-Control-Allow-Credentials</strong></td><td width=\"85\" style=\"padding: 0.5em 1em;border-color: rgb(204, 204, 204);max-width: 100%;box-sizing: border-box;font-size: 1em;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">否</td><td width=\"193\" style=\"padding: 0.5em 1em;border-color: rgb(204, 204, 204);max-width: 100%;box-sizing: border-box;font-size: 1em;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">是否可以向服务端发送Cookie，默认是 false</td></tr><tr style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);overflow-wrap: break-word !important;\"><td width=\"38\" style=\"padding: 0.5em 1em;border-color: rgb(204, 204, 204);max-width: 100%;box-sizing: border-box;font-size: 1em;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">Access-Control-Expose-Headers</strong></td><td width=\"85\" style=\"padding: 0.5em 1em;border-color: rgb(204, 204, 204);max-width: 100%;box-sizing: border-box;font-size: 1em;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">否</td><td width=\"188\" style=\"padding: 0.5em 1em;border-color: rgb(204, 204, 204);max-width: 100%;box-sizing: border-box;font-size: 1em;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">可以向请求额外暴露的响应头</td></tr></tbody></table><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">其中只有&nbsp;<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">Access-Control-Allow-Origin</strong>&nbsp;是必须的，该响应头的值可以是请求的 Origin 的值，也可以是 * ，表示服务端接收所有来源的请求。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">当浏览器发起 CORS 请求时，默认只能获得6个响应头的值：</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;overflow-wrap: break-word;box-sizing: border-box;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">Cache-Control</code>、<code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;overflow-wrap: break-word;box-sizing: border-box;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">Content-Language</code>、<code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;overflow-wrap: break-word;box-sizing: border-box;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">Content-Type</code>、<code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;overflow-wrap: break-word;box-sizing: border-box;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">Expires</code>、<code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;overflow-wrap: break-word;box-sizing: border-box;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">Last-Modified</code>、<code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;overflow-wrap: break-word;box-sizing: border-box;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">Pragma</code></p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">如果还需要返回其他的响应头给前端，则可以通过在&nbsp;<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">Access-Control-Expose-Headers</strong>&nbsp;中指定。</p><h3 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.3em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">CORS的两种请求类型</span></h3><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">CORS有两种类型的请求，分别是：简单请求(simple request)和非简单请求(not-so-simple request)</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">只要同时满足以下两大条件，就属于简单请求。</p><blockquote style=\"padding: 15px 15px 15px 1rem;border-left-width: 6px;border-left-color: rgb(220, 230, 240);color: rgb(129, 145, 152);line-height: inherit;font-size: 0.9em;max-width: 100%;overflow-wrap: normal;box-sizing: border-box;white-space: normal;background: rgb(242, 247, 251);overflow: auto;word-break: normal;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;\"><p style=\"max-width: 100%;box-sizing: border-box;min-height: 1em;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">（<span style=\"max-width: 100%;font-size: 14px;overflow-wrap: break-word !important;box-sizing: border-box !important;\">1) 请求方法是以下三种方法之一：</span></p><ul class=\"list-paddingleft-2\" style=\"padding-left: 32px;width: 540.453px;max-width: 100%;list-style-position: initial;list-style-image: initial;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><li style=\"margin-bottom: 0.5em;max-width: 100%;box-sizing: border-box;font-size: 14px;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><p style=\"max-width: 100%;min-height: 1em;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">HEAD</span></p></li><li style=\"margin-bottom: 0.5em;max-width: 100%;box-sizing: border-box;font-size: 14px;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><p style=\"max-width: 100%;min-height: 1em;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">GET</span></p></li><li style=\"margin-bottom: 0.5em;max-width: 100%;box-sizing: border-box;font-size: 14px;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><p style=\"max-width: 100%;min-height: 1em;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">POST</span></p></li></ul><p style=\"max-width: 100%;box-sizing: border-box;min-height: 1em;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 14px;overflow-wrap: break-word !important;box-sizing: border-box !important;\">（2) HTTP的头信息不超出以下几种字段：</span></p><ul class=\"list-paddingleft-2\" style=\"padding-left: 32px;width: 540.453px;max-width: 100%;list-style-position: initial;list-style-image: initial;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><li style=\"margin-bottom: 0.5em;max-width: 100%;box-sizing: border-box;font-size: 14px;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><p style=\"max-width: 100%;min-height: 1em;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">Accept</span></p></li><li style=\"margin-bottom: 0.5em;max-width: 100%;box-sizing: border-box;font-size: 14px;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><p style=\"max-width: 100%;min-height: 1em;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">Accept-Language</span></p></li><li style=\"margin-bottom: 0.5em;max-width: 100%;box-sizing: border-box;font-size: 14px;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><p style=\"max-width: 100%;min-height: 1em;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">Content-Language</span></p></li><li style=\"margin-bottom: 0.5em;max-width: 100%;box-sizing: border-box;font-size: 14px;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><p style=\"max-width: 100%;min-height: 1em;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">Last-Event-ID</span></p></li><li style=\"margin-bottom: 0.5em;max-width: 100%;box-sizing: border-box;font-size: 14px;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><p style=\"max-width: 100%;min-height: 1em;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><span style=\"max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;\">Content-Type：只限于三个值&nbsp;<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">application/x-www-form-urlencoded</strong>&nbsp;、<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">multipart/form-data</strong>、<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">text/plain</strong></span></p></li></ul></blockquote><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">凡是不同时满足上面两个条件，就属于非简单请求，浏览器对这两种请求的处理，是不一样的。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">为什么会有两种不同类型的请求呢？</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">CORS 规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法(特别是&nbsp;<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">GET</strong>&nbsp;以外的 HTTP 请求，或者搭配某些 MIME 类型的&nbsp;<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">POST</strong>&nbsp;请求)，浏览器必须首先使用&nbsp;<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">OPTIONS</strong>&nbsp;方法发起一个预检请求(preflight request)，从而获知服务端是否允许该跨域请求。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">服务器确认允许之后，浏览器才能发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证(包括 Cookies 和 HTTP 认证相关的数据)。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">非简单请求就要求浏览器先发送一个预检请求，预检通过后再发送实际的请求。</p><h2 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.4em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">怎样实现CORS</span></h2><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">知道了CORS的实现机制之后，我们就可以解决遇到的CORS的问题了。</p><h3 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.3em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">1.通过JSONP</span></h3><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">利用 &lt;script&gt; 标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的 JSON 数据。JSONP请求一定需要对方的服务器做支持才可以。</strong></p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">JSONP 和 AJAX 相同，都是客户端向服务器端发送请求，从服务器端获取数据的方式。但 AJAX 属于同源策略，JSONP 属于非同源策略(支持跨域请求)。JSONP优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">缺点是仅支持 GET 方法具有局限性，不安全可能会遭受XSS攻击。</strong></p><h3 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.3em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">2.利用反向代理服务器</span></h3><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">同源策略是浏览器需要遵循的标准，而如果是服务器向服务器请求就无需遵循同源策略</strong></p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">所以通过反向代理服务器可以有效的解决跨域问题，代理服务器需要做以下几个步骤：</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">1.接受客户端的请求</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">2.将请求转发给实际的服务器</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">3.将服务器的响应结果返回给客户端</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">Nginx就是类似的反向代理服务器，可以通过配置Nginx代理来解决跨域问题。</p><h3 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.3em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">3.服务端支持CORS</span></h3><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">最安全的还是服务端来设置允许哪些来源的请求，即服务端在接收到请求之后，对允许的请求源设置 Access-Control-Allow-Origin 的响应头。</p><h4 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.2em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">通过@CrossOrigin注解</span></h4><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">这里以 Spring Boot 为例，可以通过 @CrossOrigin 注解来指定哪些类或者方法支持跨越，如下列代码所示：</p><pre style=\"max-width: 100%;box-sizing: border-box;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><code style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;max-width: 100%;box-sizing: border-box;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">/**<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;*&nbsp;在类上加注解<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;*/</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@CrossOrigin</span>({<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"http://127.0.0.1:9528\"</span>,&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"http://localhost:9528\"</span>})<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@RestController</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">UserController</span>&nbsp;</span>{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><pre style=\"max-width: 100%;box-sizing: border-box;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><code style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;max-width: 100%;box-sizing: border-box;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@RestController</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">UserController</span>&nbsp;</span>{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Resource</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;UserFacade&nbsp;userFacade;<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">/**<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;在方法上加注解<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@GetMapping</span>(ApiConstant.Urls.GET_USER_INFO)<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@CrossOrigin</span>({<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"http://127.0.0.1:9528\"</span>,&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"http://localhost:9528\"</span>})<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;PojoResult&lt;UserDTO&gt;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">getUserInfo</span><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;userFacade.getUserInfo();<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><h4 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.2em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">通过CorsRegistry设置全局跨域配置</span></h4><pre style=\"max-width: 100%;box-sizing: border-box;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><code style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;max-width: 100%;box-sizing: border-box;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Configuration</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@EnableWebMvc</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">WebConfig</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">extends</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">WebMvcConfigurerAdapter</span>&nbsp;</span>{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">addCorsMappings</span><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(CorsRegistry&nbsp;registry)</span>&nbsp;</span>{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registry.addMapping(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"/**\"</span>)<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.allowedOrigins(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"http://127.0.0.1:9528\"</span>,&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"http://localhost:9528\"</span>);<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">如果你使用的是 Spring Boot，推荐的做法是只定义一个 WebMvcConfigurer 的Bean：</p><pre style=\"max-width: 100%;box-sizing: border-box;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><code style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;max-width: 100%;box-sizing: border-box;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Configuration</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">MyConfiguration</span>&nbsp;</span>{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Bean</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;WebMvcConfigurer&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">corsConfigurer</span><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;WebMvcConfigurerAdapter()&nbsp;{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">addCorsMappings</span><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(CorsRegistry&nbsp;registry)</span>&nbsp;</span>{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registry.addMapping(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"/**\"</span>)<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.allowedOrigins(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"http://127.0.0.1:9528\"</span>,&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"http://localhost:9528\"</span>);<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">以上两种方式在没有定义拦截器(Interceptor)的时候，使用一切正常，但是如果你有一个全局的拦截器用来检测用户的登录态，例如下面的简易代码：</p><pre style=\"max-width: 100%;box-sizing: border-box;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><code style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;max-width: 100%;box-sizing: border-box;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">AuthenticationInterceptor</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">implements</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">HandlerInterceptor</span>&nbsp;</span>{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">boolean</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">preHandle</span><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(HttpServletRequest&nbsp;httpServletRequest,&nbsp;HttpServletResponse&nbsp;httpServletResponse,&nbsp;Object&nbsp;object)</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throws</span>&nbsp;Exception&nbsp;</span>{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;从&nbsp;http&nbsp;请求头中取出&nbsp;token</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;token&nbsp;=&nbsp;httpServletRequest.getHeader(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"token\"</span>);<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;检查是否登录</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(token&nbsp;==&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throw</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;InvalidTokenException(ResultCode.INVALID_TOKEN.getCode(),&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"登录态失效，请重新登录\"</span>);<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">true</span>;<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">当自定义拦截器返回true时，一切正常，但是当拦截器抛出异常(或者返回false)时，后续的CORS设置将不会生效。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">为什么拦截器抛出异常时，CORS不生效呢？可以看下这个issue：</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">when interceptor preHandler throw exception, the cors is broken</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">有个人提交了一个issue，说明如果在自定义拦截器的preHandler方法中抛出异常的话，通过 CorsRegistry 设置的全局 CORS 配置就失效了，但是Spring Boot 的成员不认为这是一个Bug。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">然后提交者举了个具体的例子：</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">他先定义了CorsRegistry，并添加了一个自定义的拦截器，拦截器中抛出了异常</p><figure style=\"max-width: 100%;box-sizing: border-box;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><img     style=\"margin-right: auto;margin-left: auto;box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;font-size: inherit;color: inherit;line-height: inherit;display: block;overflow-wrap: break-word !important;\" title=\"跨域问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361411.jpg\" alt=\"跨域问题是怎样造成的\"  /><figcaption style=\"margin-top: 10px;max-width: 100%;box-sizing: border-box;font-size: 0.7em;color: rgb(153, 153, 153);line-height: inherit;text-align: center;overflow-wrap: break-word !important;\">cors-registry-1.jpg</figcaption></figure><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">然后他发现AbstractHandlerMapping在添加CorsInterceptor的时候，是将 Cors 的拦截器加在拦截器链的最后：</p><figure style=\"max-width: 100%;box-sizing: border-box;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><img     style=\"margin-right: auto;margin-left: auto;box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;font-size: inherit;color: inherit;line-height: inherit;display: block;overflow-wrap: break-word !important;\" title=\"跨域问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361412.jpg\" alt=\"跨域问题是怎样造成的\"  /><figcaption style=\"margin-top: 10px;max-width: 100%;box-sizing: border-box;font-size: 0.7em;color: rgb(153, 153, 153);line-height: inherit;text-align: center;overflow-wrap: break-word !important;\">cors-registry-2.jpg</figcaption></figure><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">那就会造成上面说的问题，在自定义拦截器中抛出异常之后，CorsInterceptor 拦截器就没有机会执行向 response 中设置 CORS 相关响应头了。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">issue的提交者也给出了解决的方案，就是将用来处理 Cors 的拦截器 CorsInterceptor 加在拦截器链的第一个位置：</p><figure style=\"max-width: 100%;box-sizing: border-box;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><img     style=\"margin-right: auto;margin-left: auto;box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;font-size: inherit;color: inherit;line-height: inherit;display: block;overflow-wrap: break-word !important;\" title=\"跨域问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585361412.png\" alt=\"跨域问题是怎样造成的\"  /><figcaption style=\"margin-top: 10px;max-width: 100%;box-sizing: border-box;font-size: 0.7em;color: rgb(153, 153, 153);line-height: inherit;text-align: center;overflow-wrap: break-word !important;\">cors-registry-3.jpg</figcaption></figure><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">这样的话请求来了之后，第一个就会为 response 设置相应的 CORS 响应头，后续如果其他自定义拦截器抛出异常，也不会有影响了。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">感觉是一个可行的解决方案，但是 Spring Boot 的成员认为这不是 Spring Boot 的Bug，而是 Spring Framework 的 Bug，所以将这个issue关闭了。</p><h4 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.2em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">通过CorsFilter设置全局跨域配置</span></h4><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">既然通过拦截器设置全局跨域配置会有问题，那我们还有另外一种方案，通过过滤器 CorsFilter 的方式来设置，代码如下：</p><pre style=\"max-width: 100%;box-sizing: border-box;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><code style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;max-width: 100%;box-sizing: border-box;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Configuration</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">MyConfiguration</span>&nbsp;</span>{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Bean</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;FilterRegistrationBean&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">corsFilter</span><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UrlBasedCorsConfigurationSource&nbsp;source&nbsp;=&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;UrlBasedCorsConfigurationSource();<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CorsConfiguration&nbsp;config&nbsp;=&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;CorsConfiguration();<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;config.setAllowCredentials(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">true</span>);<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;config.addAllowedOrigin(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"http://127.0.0.1:9528\"</span>);<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;config.addAllowedOrigin(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"http://localhost:9528\"</span>);<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;config.addAllowedHeader(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"*\"</span>);<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;config.addAllowedMethod(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"*\"</span>);<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source.registerCorsConfiguration(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"/**\"</span>,&nbsp;config);<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FilterRegistrationBean&nbsp;bean&nbsp;=&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;FilterRegistrationBean(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;CorsFilter(source));<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bean.setOrder(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>);<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;bean;<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">为什么过滤器可以而拦截器不行呢？</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">因为过滤器依赖于 Servlet 容器，基于函数回调，它可以对几乎所有请求进行过滤。而拦截器是依赖于 Web 框架(如Spring MVC框架)，基于反射通过AOP的方式实现的。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">在触发顺序上如下图所示：</p><figure style=\"max-width: 100%;box-sizing: border-box;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><img     style=\"margin-right: auto;margin-left: auto;box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;font-size: inherit;color: inherit;line-height: inherit;display: block;overflow-wrap: break-word !important;\" title=\"跨域问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361412.jpeg\" alt=\"跨域问题是怎样造成的\"  /><figcaption style=\"margin-top: 10px;max-width: 100%;box-sizing: border-box;font-size: 0.7em;color: rgb(153, 153, 153);line-height: inherit;text-align: center;overflow-wrap: break-word !important;\">filter-interceptor-order.jpg</figcaption></figure><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">因为过滤器在触发上是先于拦截器的，但是如果有多个过滤器的话，也需要将 CorsFilter 设置为第一个过滤器才行。</p><h3 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.3em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">参考文献</span></h3><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">浏览器的同源策略</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">浏览器同源政策及其规避方法</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">HTTP访问控制(CORS)</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">跨域资源共享 CORS 详解</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">如何防止CSRF攻击？</p><p style=\"max-width: 100%;min-height: 1em;white-space: normal;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><br style=\"max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;\"  /></p><p style=\"max-width: 100%;min-height: 1em;white-space: normal;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><br style=\"max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;\"  /></p><p style=\"max-width: 100%;min-height: 1em;white-space: normal;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><span style=\"max-width: 100%;color: rgb(255, 104, 39);font-size: 16px;overflow-wrap: break-word !important;box-sizing: border-box !important;\">推荐阅读</span></p><p style=\"max-width: 100%;min-height: 1em;white-space: normal;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484172&amp;idx=1&amp;sn=8f9eaec88e04588e76b0c4958162e6af&amp;scene=21#wechat_redirect\" target=\"_blank\" style=\"max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;\" rel=\"noopener noreferrer\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(53, 124, 168);overflow-wrap: break-word !important;box-sizing: border-box !important;\">线程池是怎样工作的</span></a></p><p style=\"max-width: 100%;min-height: 1em;white-space: normal;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484193&amp;idx=1&amp;sn=0953118972d8fdff36fae804eb5fcc8b&amp;scene=21#wechat_redirect\" target=\"_blank\" style=\"max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;\" rel=\"noopener noreferrer\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(53, 124, 168);overflow-wrap: break-word !important;box-sizing: border-box !important;\">什么是 Arthas</span></a><br style=\"max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;\"  /></p><p style=\"max-width: 100%;min-height: 1em;white-space: normal;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484110&amp;idx=1&amp;sn=2a3dbfb804f282160e288d9178b2665e&amp;scene=21#wechat_redirect\" target=\"_blank\" style=\"max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;\" rel=\"noopener noreferrer\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(53, 124, 168);overflow-wrap: break-word !important;box-sizing: border-box !important;\">怎样编写一个 Web 容器</span></a></p><p style=\"max-width: 100%;min-height: 1em;white-space: normal;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484154&amp;idx=1&amp;sn=c99d867ebe79e5b3fa784beff06d52b7&amp;scene=21#wechat_redirect\" target=\"_blank\" style=\"max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;\" rel=\"noopener noreferrer\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(53, 124, 168);overflow-wrap: break-word !important;box-sizing: border-box !important;\">更好的使用 Nacos 配置中心</span></a></p><p style=\"max-width: 100%;min-height: 1em;white-space: normal;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><br style=\"max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;\"  /></p><p style=\"max-width: 100%;min-height: 1em;white-space: normal;text-align: center;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><img       style=\"height: 156px;box-shadow: rgb(170, 170, 170) 0em 0em 1em 0px;width: 156px;border-radius: 0px;overflow-wrap: break-word !important;box-sizing: border-box !important;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress2-1585361413.jpeg\" alt=\"跨域问题是怎样造成的\" title=\"跨域问题是怎样造成的\"  /></p><p style=\"max-width: 100%;min-height: 1em;white-space: normal;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><br style=\"max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;\"  /></p><p style=\"max-width: 100%;min-height: 1em;white-space: normal;text-align: right;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><span style=\"max-width: 100%;color: rgb(53, 124, 168);font-size: 15px;overflow-wrap: break-word !important;box-sizing: border-box !important;\">如果文章对你有帮助，欢迎转发支持</span></p><p style=\"max-width: 100%;min-height: 1em;white-space: normal;text-align: right;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><span style=\"max-width: 100%;font-size: 13px;color: rgb(255, 104, 39);overflow-wrap: break-word !important;box-sizing: border-box !important;\">如果觉得好看，请点击“好看”哦 ↓↓</span></p> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（逐码）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/a7eZA0Ljvhb6YHXtxn--6w\" rel=\"noopener noreferrer\">跨域问题是怎样造成的</a></p></blockquote></div>', '跨域问题是怎样造成的', '', 'publish', 'open', 'open', '', '3776217978', '', '', '2020-03-28 10:10:13', '2020-03-28 02:10:13', '', 0, 'https://www.javashitang.com/?p=48', 0, 'post', '', 0);
INSERT INTO `wp_posts` VALUES (49, 1, '2020-03-28 10:10:09', '2020-03-28 02:10:09', '', 'beepress8-1585361409', '', 'inherit', 'open', 'closed', '', 'beepress8-1585361409', '', '', '2020-03-28 10:10:09', '2020-03-28 02:10:09', '', 48, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361409.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (50, 1, '2020-03-28 10:10:09', '2020-03-28 02:10:09', '', 'beepress4-1585361409', '', 'inherit', 'open', 'closed', '', 'beepress4-1585361409', '', '', '2020-03-28 10:10:09', '2020-03-28 02:10:09', '', 48, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361409.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (51, 1, '2020-03-28 10:10:10', '2020-03-28 02:10:10', '', 'beepress6-1585361410', '', 'inherit', 'open', 'closed', '', 'beepress6-1585361410', '', '', '2020-03-28 10:10:10', '2020-03-28 02:10:10', '', 48, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585361410.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (52, 1, '2020-03-28 10:10:10', '2020-03-28 02:10:10', '', 'beepress1-1585361410', '', 'inherit', 'open', 'closed', '', 'beepress1-1585361410', '', '', '2020-03-28 10:10:10', '2020-03-28 02:10:10', '', 48, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361410.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (53, 1, '2020-03-28 10:10:10', '2020-03-28 02:10:10', '', 'beepress9-1585361410', '', 'inherit', 'open', 'closed', '', 'beepress9-1585361410', '', '', '2020-03-28 10:10:10', '2020-03-28 02:10:10', '', 48, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361410.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (54, 1, '2020-03-28 10:10:11', '2020-03-28 02:10:11', '', 'beepress4-1585361411', '', 'inherit', 'open', 'closed', '', 'beepress4-1585361411', '', '', '2020-03-28 10:10:11', '2020-03-28 02:10:11', '', 48, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361411.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (55, 1, '2020-03-28 10:10:12', '2020-03-28 02:10:12', '', 'beepress1-1585361412', '', 'inherit', 'open', 'closed', '', 'beepress1-1585361412', '', '', '2020-03-28 10:10:12', '2020-03-28 02:10:12', '', 48, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361412.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (56, 1, '2020-03-28 10:10:12', '2020-03-28 02:10:12', '', 'beepress6-1585361412', '', 'inherit', 'open', 'closed', '', 'beepress6-1585361412', '', '', '2020-03-28 10:10:12', '2020-03-28 02:10:12', '', 48, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585361412.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (57, 1, '2020-03-28 10:10:12', '2020-03-28 02:10:12', '', 'beepress4-1585361412', '', 'inherit', 'open', 'closed', '', 'beepress4-1585361412', '', '', '2020-03-28 10:10:12', '2020-03-28 02:10:12', '', 48, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361412.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (58, 1, '2020-03-28 10:10:13', '2020-03-28 02:10:13', '', 'beepress2-1585361413', '', 'inherit', 'open', 'closed', '', 'beepress2-1585361413', '', '', '2020-03-28 10:10:13', '2020-03-28 02:10:13', '', 48, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress2-1585361413.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (59, 1, '2020-03-28 10:10:13', '2020-03-28 02:10:13', '<div class=\"bpp-post-content\">                                                                                                                            <h2  style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.4em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">跨域问题的由来</span></h2><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">相信很多人都或多或少了解过跨域问题，尤其在现如今前后端分离大行其道的时候。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">你在本地开发一个前端项目，这个项目是通过 node 运行的，端口是9528，而服务端是通过 spring boot 提供的，端口号是7001。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">当你调用一个服务端接口时，很可能得到类似下面这样的一个错误：</p><figure style=\"max-width: 100%;box-sizing: border-box;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><img     style=\"margin-right: auto;margin-left: auto;box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;font-size: inherit;color: inherit;line-height: inherit;display: block;overflow-wrap: break-word !important;\" title=\"跨域问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361409.jpeg\" alt=\"跨域问题是怎样造成的\"  /><figcaption style=\"margin-top: 10px;max-width: 100%;box-sizing: border-box;font-size: 0.7em;color: rgb(153, 153, 153);line-height: inherit;text-align: center;overflow-wrap: break-word !important;\">request-blocked-by-cors.jpg</figcaption></figure><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">然后你在发送请求的地方debug，在出现异常的地方你将得到这样的结果：</p><figure style=\"max-width: 100%;box-sizing: border-box;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><img     style=\"margin-right: auto;margin-left: auto;box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;font-size: inherit;color: inherit;line-height: inherit;display: block;overflow-wrap: break-word !important;\" title=\"跨域问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585361410.jpeg\" alt=\"跨域问题是怎样造成的\"  /><figcaption style=\"margin-top: 10px;max-width: 100%;box-sizing: border-box;font-size: 0.7em;color: rgb(153, 153, 153);line-height: inherit;text-align: center;overflow-wrap: break-word !important;\">blocked-error.jpg</figcaption></figure><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">异常对象很诡异，返回的 response 是 undefined 的，并且 message 消息中只有一个\"Network Error\"。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">看到这里你应该要知道，你遇到跨域问题了。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">但是你需要明确的一点是，这个请求已经发出去了，服务端也接收到并处理了，但是返回的响应结果不是浏览器想要的结果，所以浏览器将这个响应的结果给拦截了，这就是为什么你看到的response是undefined。</strong></p><h3 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.3em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">浏览器的同源策略</span></h3><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">那浏览器为什么会将服务端返回的结果拦截掉呢？</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">这就需要我们了解浏览器基于安全方面的考虑，而引入的&nbsp;<code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;overflow-wrap: break-word;box-sizing: border-box;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">同源策略(same-origin policy)</code>&nbsp;了。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">早在1995年，Netscape 公司就在浏览器中引入了“同源策略”。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">最初的 “同源策略”，主要是限制Cookie的访问，A网页设置的 Cookie，B网页无法访问，除非B网页和A网页是“同源”的。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">那么怎么确定两个网页是不是“同源”呢，所谓“同源”就是指\"协议+域名+端口\"三者相同，即便两个不同的域名指向同一个ip地址，也非同源。</p><figure style=\"max-width: 100%;box-sizing: border-box;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><img     style=\"margin-right: auto;margin-left: auto;box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;font-size: inherit;color: inherit;line-height: inherit;display: block;overflow-wrap: break-word !important;\" title=\"跨域问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361410.jpeg\" alt=\"跨域问题是怎样造成的\"  /><figcaption style=\"margin-top: 10px;max-width: 100%;box-sizing: border-box;font-size: 0.7em;color: rgb(153, 153, 153);line-height: inherit;text-align: center;overflow-wrap: break-word !important;\">the-compose-of-domain.jpg</figcaption></figure><h3 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.3em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">没有同源策略的保护</span></h3><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">那么为什么要做这个同源的限制呢？因为如果没有同源策略的保护，浏览器将没有任何安全可言。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">老李是一个钓鱼爱好者，经常在&nbsp;<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">我要买(51mai.com)</strong>&nbsp;的网站上买各种钓鱼的工具，并且通过&nbsp;<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">银行(yinhang.com)</strong>&nbsp;以账号密码的方式直接支付。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">这天老李又在&nbsp;<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">51mai.com</strong>&nbsp;上买了一根鱼竿，输入银行账号密码支付成功后，在支付成功页看到一个叫&nbsp;<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">钓鱼(diaoyu.com)</strong>&nbsp;的网站投放的一个\"免费领取鱼饵\"的广告。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">老李什么都没想就点击了这个广告，跳转到了钓鱼的网站，殊不知这真是一个 “钓鱼” 网站，老李银行账户里面钱全部被转走了。</p><figure style=\"max-width: 100%;box-sizing: border-box;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><img     style=\"margin-right: auto;margin-left: auto;box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;font-size: inherit;color: inherit;line-height: inherit;display: block;overflow-wrap: break-word !important;\" title=\"跨域问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361410.jpg\" alt=\"跨域问题是怎样造成的\"  /><figcaption style=\"margin-top: 10px;max-width: 100%;box-sizing: border-box;font-size: 0.7em;color: rgb(153, 153, 153);line-height: inherit;text-align: center;overflow-wrap: break-word !important;\">no-same-origin-policy.jpg</figcaption></figure><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">以上就是老李的钱被盗走的过程：</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">1.老李购买鱼竿，并登录了银行的网站输入账号密码进行了支付，浏览器在本地缓存了银行的Cookie</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">2.老李点击钓鱼网站，钓鱼网站使用老李登录银行之后的Cookie，伪造成自己是老李进行了转账操作。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">这个过程就是著名的CSRF(Cross Site Request Forgery)，跨站请求伪造，正是由于可能存在的伪造请求，导致了浏览器的不安全。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">那么如何防止CSRF攻击呢，可以参考这篇文章：如何防止CSRF攻击？</p><h3 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.3em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">同源策略限制哪些行为</span></h3><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">上面说了 **同源策略 **是一个安全机制，他本质是限制了从一个源加载的文档或脚本如何与来自另一个源的资源进行交互，这是一个用于隔离潜在恶意文件的重要安全机制。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">随着互联网的发展，\"同源策略\"越来越严格，不仅限于Cookie的读取。目前，如果非同源，共有三种行为受到限制。</p><blockquote style=\"padding: 15px 15px 15px 1rem;border-left-width: 6px;border-left-color: rgb(220, 230, 240);color: rgb(129, 145, 152);line-height: inherit;font-size: 0.9em;max-width: 100%;overflow-wrap: normal;box-sizing: border-box;white-space: normal;background: rgb(242, 247, 251);overflow: auto;word-break: normal;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;\"><p style=\"max-width: 100%;box-sizing: border-box;min-height: 1em;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">（1） Cookie、LocalStorage 和 IndexDB 无法读取。</p><p style=\"max-width: 100%;box-sizing: border-box;min-height: 1em;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">（2） DOM 无法获得。</p><p style=\"max-width: 100%;box-sizing: border-box;min-height: 1em;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">（3） 请求的响应被拦截。</p></blockquote><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">虽然这些限制是必要的，但是有时很不方便，合理的用途也会受到影响，所以为了能够获取非“同源”的资源，就有了跨域资源共享。</p><h2 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.4em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">跨域资源共享</span></h2><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">看到这里你应该明白，为什么文章开头的请求会被拦截了，原因就是请求的源和服务端的源不是“同源”，而服务端又没有设置允许的跨域资源共享，所以请求的响应被浏览器给拦截掉了。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">CORS 是一个 W3C 标准，全称是\"跨域资源共享\"(Cross Origin Resource Sharing)，它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了只能发送同源请求的限制。</p><h3 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.3em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">CORS实现机制</span></h3><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">那跨域资源共享机制是怎样实现的呢？</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">当一个资源(origin)通过脚本向另一个资源(host)发起请求，而被请求的资源(host)和请求源(origin)是不同的源时(协议、域名、端口不全部相同)，浏览器就会发起一个&nbsp;<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">跨域 HTTP 请求</strong>&nbsp;，并且浏览器会自动将当前资源的域添加在请求头中一个叫 Origin 的 Header 中。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">当然了，有三个标签本身就是允许跨域加载资源的：</p><blockquote style=\"padding: 15px 15px 15px 1rem;border-left-width: 6px;border-left-color: rgb(220, 230, 240);color: rgb(129, 145, 152);line-height: inherit;font-size: 0.9em;max-width: 100%;overflow-wrap: normal;box-sizing: border-box;white-space: normal;background: rgb(242, 247, 251);overflow: auto;word-break: normal;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;\"><p style=\"max-width: 100%;box-sizing: border-box;min-height: 1em;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;overflow-wrap: break-word;box-sizing: border-box;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">&lt;img src=XXX&gt;</code><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"  /><code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;overflow-wrap: break-word;box-sizing: border-box;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">&lt;link href=XXX&gt;</code><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"  /><code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;overflow-wrap: break-word;box-sizing: border-box;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">&lt;script src=XXX&gt;</code></p></blockquote><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">比如某个网站的首页 http://domain-a.com/index.html 通过 &lt;img src=\"http://domain-b.com/image.jpg\" /&gt; 来加载其他域上的图片，除此之外还有诸如通过 CDN 节点引入css和js文件的方式。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">出于安全原因，浏览器限制从脚本内发起的跨域 HTTP 请求。例如，XMLHttpRequest 和 Fetch API 遵循同源策略。也就是说使用这些 API 的 Web 应用程序只能从加载应用程序的同一个域请求 HTTP 资源，除非响应报文中包含了正确 CORS 响应头。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">通过在响应报文中设置额外的 HTTP 响应头来告诉浏览器，运行在某个 origin 上的 Web 应用被准许访问来自不同源服务器上的资源，此时浏览器就不会将该响应拦截掉了。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">那这些额外的 HTTP 响应头是什么呢？</p><table><thead style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><tr style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);overflow-wrap: break-word !important;\"><th width=\"247\" style=\"padding: 0.5em 1em;border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);max-width: 100%;box-sizing: border-box;text-align: left;font-size: 1em;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">响应头</th><th width=\"64\" style=\"padding: 0.5em 1em;border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);max-width: 100%;box-sizing: border-box;text-align: left;font-size: 1em;color: inherit;line-height: inherit;word-break: break-all;overflow-wrap: break-word !important;\">是否必须</th><th width=\"193\" style=\"padding: 0.5em 1em;border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);max-width: 100%;box-sizing: border-box;text-align: left;font-size: 1em;color: inherit;line-height: inherit;word-break: break-all;overflow-wrap: break-word !important;\">含义</th></tr></thead><tbody style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 0px;border-style: initial;border-color: initial;overflow-wrap: break-word !important;\"><tr style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);overflow-wrap: break-word !important;\"><td width=\"226\" style=\"padding: 0.5em 1em;border-color: rgb(204, 204, 204);max-width: 100%;box-sizing: border-box;font-size: 1em;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">Access-Control-Allow-Origin</strong></td><td width=\"85\" style=\"padding: 0.5em 1em;border-color: rgb(204, 204, 204);max-width: 100%;box-sizing: border-box;font-size: 1em;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">是</td><td width=\"193\" style=\"padding: 0.5em 1em;border-color: rgb(204, 204, 204);max-width: 100%;box-sizing: border-box;font-size: 1em;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">该字段表示，服务端接收哪些来源的域的请求</td></tr><tr style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);overflow-wrap: break-word !important;\"><td width=\"38\" style=\"padding: 0.5em 1em;border-color: rgb(204, 204, 204);max-width: 100%;box-sizing: border-box;font-size: 1em;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">Access-Control-Allow-Credentials</strong></td><td width=\"85\" style=\"padding: 0.5em 1em;border-color: rgb(204, 204, 204);max-width: 100%;box-sizing: border-box;font-size: 1em;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">否</td><td width=\"193\" style=\"padding: 0.5em 1em;border-color: rgb(204, 204, 204);max-width: 100%;box-sizing: border-box;font-size: 1em;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">是否可以向服务端发送Cookie，默认是 false</td></tr><tr style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);overflow-wrap: break-word !important;\"><td width=\"38\" style=\"padding: 0.5em 1em;border-color: rgb(204, 204, 204);max-width: 100%;box-sizing: border-box;font-size: 1em;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">Access-Control-Expose-Headers</strong></td><td width=\"85\" style=\"padding: 0.5em 1em;border-color: rgb(204, 204, 204);max-width: 100%;box-sizing: border-box;font-size: 1em;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">否</td><td width=\"188\" style=\"padding: 0.5em 1em;border-color: rgb(204, 204, 204);max-width: 100%;box-sizing: border-box;font-size: 1em;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">可以向请求额外暴露的响应头</td></tr></tbody></table><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">其中只有&nbsp;<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">Access-Control-Allow-Origin</strong>&nbsp;是必须的，该响应头的值可以是请求的 Origin 的值，也可以是 * ，表示服务端接收所有来源的请求。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">当浏览器发起 CORS 请求时，默认只能获得6个响应头的值：</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;overflow-wrap: break-word;box-sizing: border-box;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">Cache-Control</code>、<code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;overflow-wrap: break-word;box-sizing: border-box;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">Content-Language</code>、<code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;overflow-wrap: break-word;box-sizing: border-box;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">Content-Type</code>、<code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;overflow-wrap: break-word;box-sizing: border-box;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">Expires</code>、<code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;overflow-wrap: break-word;box-sizing: border-box;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">Last-Modified</code>、<code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;max-width: 100%;overflow-wrap: break-word;box-sizing: border-box;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">Pragma</code></p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">如果还需要返回其他的响应头给前端，则可以通过在&nbsp;<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">Access-Control-Expose-Headers</strong>&nbsp;中指定。</p><h3 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.3em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">CORS的两种请求类型</span></h3><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">CORS有两种类型的请求，分别是：简单请求(simple request)和非简单请求(not-so-simple request)</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">只要同时满足以下两大条件，就属于简单请求。</p><blockquote style=\"padding: 15px 15px 15px 1rem;border-left-width: 6px;border-left-color: rgb(220, 230, 240);color: rgb(129, 145, 152);line-height: inherit;font-size: 0.9em;max-width: 100%;overflow-wrap: normal;box-sizing: border-box;white-space: normal;background: rgb(242, 247, 251);overflow: auto;word-break: normal;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;\"><p style=\"max-width: 100%;box-sizing: border-box;min-height: 1em;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">（<span style=\"max-width: 100%;font-size: 14px;overflow-wrap: break-word !important;box-sizing: border-box !important;\">1) 请求方法是以下三种方法之一：</span></p><ul class=\"list-paddingleft-2\" style=\"padding-left: 32px;width: 540.453px;max-width: 100%;list-style-position: initial;list-style-image: initial;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><li style=\"margin-bottom: 0.5em;max-width: 100%;box-sizing: border-box;font-size: 14px;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><p style=\"max-width: 100%;min-height: 1em;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">HEAD</span></p></li><li style=\"margin-bottom: 0.5em;max-width: 100%;box-sizing: border-box;font-size: 14px;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><p style=\"max-width: 100%;min-height: 1em;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">GET</span></p></li><li style=\"margin-bottom: 0.5em;max-width: 100%;box-sizing: border-box;font-size: 14px;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><p style=\"max-width: 100%;min-height: 1em;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">POST</span></p></li></ul><p style=\"max-width: 100%;box-sizing: border-box;min-height: 1em;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;font-size: 14px;overflow-wrap: break-word !important;box-sizing: border-box !important;\">（2) HTTP的头信息不超出以下几种字段：</span></p><ul class=\"list-paddingleft-2\" style=\"padding-left: 32px;width: 540.453px;max-width: 100%;list-style-position: initial;list-style-image: initial;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><li style=\"margin-bottom: 0.5em;max-width: 100%;box-sizing: border-box;font-size: 14px;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><p style=\"max-width: 100%;min-height: 1em;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">Accept</span></p></li><li style=\"margin-bottom: 0.5em;max-width: 100%;box-sizing: border-box;font-size: 14px;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><p style=\"max-width: 100%;min-height: 1em;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">Accept-Language</span></p></li><li style=\"margin-bottom: 0.5em;max-width: 100%;box-sizing: border-box;font-size: 14px;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><p style=\"max-width: 100%;min-height: 1em;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">Content-Language</span></p></li><li style=\"margin-bottom: 0.5em;max-width: 100%;box-sizing: border-box;font-size: 14px;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><p style=\"max-width: 100%;min-height: 1em;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><span style=\"max-width: 100%;box-sizing: border-box;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">Last-Event-ID</span></p></li><li style=\"margin-bottom: 0.5em;max-width: 100%;box-sizing: border-box;font-size: 14px;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\"><p style=\"max-width: 100%;min-height: 1em;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><span style=\"max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;\">Content-Type：只限于三个值&nbsp;<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">application/x-www-form-urlencoded</strong>&nbsp;、<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">multipart/form-data</strong>、<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">text/plain</strong></span></p></li></ul></blockquote><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">凡是不同时满足上面两个条件，就属于非简单请求，浏览器对这两种请求的处理，是不一样的。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">为什么会有两种不同类型的请求呢？</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">CORS 规范要求，对那些可能对服务器数据产生副作用的 HTTP 请求方法(特别是&nbsp;<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">GET</strong>&nbsp;以外的 HTTP 请求，或者搭配某些 MIME 类型的&nbsp;<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">POST</strong>&nbsp;请求)，浏览器必须首先使用&nbsp;<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">OPTIONS</strong>&nbsp;方法发起一个预检请求(preflight request)，从而获知服务端是否允许该跨域请求。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">服务器确认允许之后，浏览器才能发起实际的 HTTP 请求。在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证(包括 Cookies 和 HTTP 认证相关的数据)。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">非简单请求就要求浏览器先发送一个预检请求，预检通过后再发送实际的请求。</p><h2 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.4em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">怎样实现CORS</span></h2><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">知道了CORS的实现机制之后，我们就可以解决遇到的CORS的问题了。</p><h3 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.3em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">1.通过JSONP</span></h3><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">利用 &lt;script&gt; 标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的 JSON 数据。JSONP请求一定需要对方的服务器做支持才可以。</strong></p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">JSONP 和 AJAX 相同，都是客户端向服务器端发送请求，从服务器端获取数据的方式。但 AJAX 属于同源策略，JSONP 属于非同源策略(支持跨域请求)。JSONP优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。<strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">缺点是仅支持 GET 方法具有局限性，不安全可能会遭受XSS攻击。</strong></p><h3 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.3em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">2.利用反向代理服务器</span></h3><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><strong style=\"max-width: 100%;box-sizing: border-box;color: inherit;font-size: inherit;line-height: inherit;overflow-wrap: break-word !important;\">同源策略是浏览器需要遵循的标准，而如果是服务器向服务器请求就无需遵循同源策略</strong></p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">所以通过反向代理服务器可以有效的解决跨域问题，代理服务器需要做以下几个步骤：</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">1.接受客户端的请求</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">2.将请求转发给实际的服务器</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">3.将服务器的响应结果返回给客户端</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">Nginx就是类似的反向代理服务器，可以通过配置Nginx代理来解决跨域问题。</p><h3 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.3em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">3.服务端支持CORS</span></h3><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">最安全的还是服务端来设置允许哪些来源的请求，即服务端在接收到请求之后，对允许的请求源设置 Access-Control-Allow-Origin 的响应头。</p><h4 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.2em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">通过@CrossOrigin注解</span></h4><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">这里以 Spring Boot 为例，可以通过 @CrossOrigin 注解来指定哪些类或者方法支持跨越，如下列代码所示：</p><pre style=\"max-width: 100%;box-sizing: border-box;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><code style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;max-width: 100%;box-sizing: border-box;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">/**<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;*&nbsp;在类上加注解<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;*/</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@CrossOrigin</span>({<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"http://127.0.0.1:9528\"</span>,&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"http://localhost:9528\"</span>})<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@RestController</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">UserController</span>&nbsp;</span>{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><pre style=\"max-width: 100%;box-sizing: border-box;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><code style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;max-width: 100%;box-sizing: border-box;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@RestController</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">UserController</span>&nbsp;</span>{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Resource</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;UserFacade&nbsp;userFacade;<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">/**<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;在方法上加注解<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@GetMapping</span>(ApiConstant.Urls.GET_USER_INFO)<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@CrossOrigin</span>({<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"http://127.0.0.1:9528\"</span>,&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"http://localhost:9528\"</span>})<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;PojoResult&lt;UserDTO&gt;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">getUserInfo</span><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;userFacade.getUserInfo();<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><h4 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.2em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">通过CorsRegistry设置全局跨域配置</span></h4><pre style=\"max-width: 100%;box-sizing: border-box;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><code style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;max-width: 100%;box-sizing: border-box;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Configuration</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@EnableWebMvc</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">WebConfig</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">extends</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">WebMvcConfigurerAdapter</span>&nbsp;</span>{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">addCorsMappings</span><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(CorsRegistry&nbsp;registry)</span>&nbsp;</span>{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registry.addMapping(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"/**\"</span>)<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.allowedOrigins(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"http://127.0.0.1:9528\"</span>,&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"http://localhost:9528\"</span>);<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">如果你使用的是 Spring Boot，推荐的做法是只定义一个 WebMvcConfigurer 的Bean：</p><pre style=\"max-width: 100%;box-sizing: border-box;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><code style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;max-width: 100%;box-sizing: border-box;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Configuration</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">MyConfiguration</span>&nbsp;</span>{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Bean</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;WebMvcConfigurer&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">corsConfigurer</span><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;WebMvcConfigurerAdapter()&nbsp;{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">addCorsMappings</span><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(CorsRegistry&nbsp;registry)</span>&nbsp;</span>{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registry.addMapping(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"/**\"</span>)<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.allowedOrigins(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"http://127.0.0.1:9528\"</span>,&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"http://localhost:9528\"</span>);<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">以上两种方式在没有定义拦截器(Interceptor)的时候，使用一切正常，但是如果你有一个全局的拦截器用来检测用户的登录态，例如下面的简易代码：</p><pre style=\"max-width: 100%;box-sizing: border-box;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><code style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;max-width: 100%;box-sizing: border-box;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">AuthenticationInterceptor</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">implements</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">HandlerInterceptor</span>&nbsp;</span>{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">boolean</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">preHandle</span><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(HttpServletRequest&nbsp;httpServletRequest,&nbsp;HttpServletResponse&nbsp;httpServletResponse,&nbsp;Object&nbsp;object)</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throws</span>&nbsp;Exception&nbsp;</span>{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;从&nbsp;http&nbsp;请求头中取出&nbsp;token</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;token&nbsp;=&nbsp;httpServletRequest.getHeader(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"token\"</span>);<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;检查是否登录</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(token&nbsp;==&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throw</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;InvalidTokenException(ResultCode.INVALID_TOKEN.getCode(),&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"登录态失效，请重新登录\"</span>);<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">true</span>;<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">当自定义拦截器返回true时，一切正常，但是当拦截器抛出异常(或者返回false)时，后续的CORS设置将不会生效。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">为什么拦截器抛出异常时，CORS不生效呢？可以看下这个issue：</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">when interceptor preHandler throw exception, the cors is broken</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">有个人提交了一个issue，说明如果在自定义拦截器的preHandler方法中抛出异常的话，通过 CorsRegistry 设置的全局 CORS 配置就失效了，但是Spring Boot 的成员不认为这是一个Bug。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">然后提交者举了个具体的例子：</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">他先定义了CorsRegistry，并添加了一个自定义的拦截器，拦截器中抛出了异常</p><figure style=\"max-width: 100%;box-sizing: border-box;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><img     style=\"margin-right: auto;margin-left: auto;box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;font-size: inherit;color: inherit;line-height: inherit;display: block;overflow-wrap: break-word !important;\" title=\"跨域问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361411.jpg\" alt=\"跨域问题是怎样造成的\"  /><figcaption style=\"margin-top: 10px;max-width: 100%;box-sizing: border-box;font-size: 0.7em;color: rgb(153, 153, 153);line-height: inherit;text-align: center;overflow-wrap: break-word !important;\">cors-registry-1.jpg</figcaption></figure><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">然后他发现AbstractHandlerMapping在添加CorsInterceptor的时候，是将 Cors 的拦截器加在拦截器链的最后：</p><figure style=\"max-width: 100%;box-sizing: border-box;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><img     style=\"margin-right: auto;margin-left: auto;box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;font-size: inherit;color: inherit;line-height: inherit;display: block;overflow-wrap: break-word !important;\" title=\"跨域问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361412.jpg\" alt=\"跨域问题是怎样造成的\"  /><figcaption style=\"margin-top: 10px;max-width: 100%;box-sizing: border-box;font-size: 0.7em;color: rgb(153, 153, 153);line-height: inherit;text-align: center;overflow-wrap: break-word !important;\">cors-registry-2.jpg</figcaption></figure><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">那就会造成上面说的问题，在自定义拦截器中抛出异常之后，CorsInterceptor 拦截器就没有机会执行向 response 中设置 CORS 相关响应头了。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">issue的提交者也给出了解决的方案，就是将用来处理 Cors 的拦截器 CorsInterceptor 加在拦截器链的第一个位置：</p><figure style=\"max-width: 100%;box-sizing: border-box;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><img     style=\"margin-right: auto;margin-left: auto;box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;font-size: inherit;color: inherit;line-height: inherit;display: block;overflow-wrap: break-word !important;\" title=\"跨域问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585361412.png\" alt=\"跨域问题是怎样造成的\"  /><figcaption style=\"margin-top: 10px;max-width: 100%;box-sizing: border-box;font-size: 0.7em;color: rgb(153, 153, 153);line-height: inherit;text-align: center;overflow-wrap: break-word !important;\">cors-registry-3.jpg</figcaption></figure><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">这样的话请求来了之后，第一个就会为 response 设置相应的 CORS 响应头，后续如果其他自定义拦截器抛出异常，也不会有影响了。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">感觉是一个可行的解决方案，但是 Spring Boot 的成员认为这不是 Spring Boot 的Bug，而是 Spring Framework 的 Bug，所以将这个issue关闭了。</p><h4 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.2em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">通过CorsFilter设置全局跨域配置</span></h4><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">既然通过拦截器设置全局跨域配置会有问题，那我们还有另外一种方案，通过过滤器 CorsFilter 的方式来设置，代码如下：</p><pre style=\"max-width: 100%;box-sizing: border-box;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><code style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;max-width: 100%;box-sizing: border-box;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Configuration</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">MyConfiguration</span>&nbsp;</span>{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Bean</span><br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;FilterRegistrationBean&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">corsFilter</span><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;UrlBasedCorsConfigurationSource&nbsp;source&nbsp;=&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;UrlBasedCorsConfigurationSource();<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CorsConfiguration&nbsp;config&nbsp;=&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;CorsConfiguration();<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;config.setAllowCredentials(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">true</span>);<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;config.addAllowedOrigin(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"http://127.0.0.1:9528\"</span>);<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;config.addAllowedOrigin(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"http://localhost:9528\"</span>);<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;config.addAllowedHeader(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"*\"</span>);<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;config.addAllowedMethod(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"*\"</span>);<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source.registerCorsConfiguration(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"/**\"</span>,&nbsp;config);<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FilterRegistrationBean&nbsp;bean&nbsp;=&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;FilterRegistrationBean(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;CorsFilter(source));<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bean.setOrder(<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>);<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;bean;<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">为什么过滤器可以而拦截器不行呢？</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">因为过滤器依赖于 Servlet 容器，基于函数回调，它可以对几乎所有请求进行过滤。而拦截器是依赖于 Web 框架(如Spring MVC框架)，基于反射通过AOP的方式实现的。</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">在触发顺序上如下图所示：</p><figure style=\"max-width: 100%;box-sizing: border-box;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><img     style=\"margin-right: auto;margin-left: auto;box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;font-size: inherit;color: inherit;line-height: inherit;display: block;overflow-wrap: break-word !important;\" title=\"跨域问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361412.jpeg\" alt=\"跨域问题是怎样造成的\"  /><figcaption style=\"margin-top: 10px;max-width: 100%;box-sizing: border-box;font-size: 0.7em;color: rgb(153, 153, 153);line-height: inherit;text-align: center;overflow-wrap: break-word !important;\">filter-interceptor-order.jpg</figcaption></figure><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">因为过滤器在触发上是先于拦截器的，但是如果有多个过滤器的话，也需要将 CorsFilter 设置为第一个过滤器才行。</p><h3 style=\"margin-top: 1em;margin-bottom: 1em;font-weight: bold;font-size: 1.3em;max-width: 100%;box-sizing: border-box;white-space: normal;color: rgb(21, 153, 87);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\"><span style=\"max-width: 100%;box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: break-word !important;\">参考文献</span></h3><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">浏览器的同源策略</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">浏览器同源政策及其规避方法</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">HTTP访问控制(CORS)</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">跨域资源共享 CORS 详解</p><p style=\"margin-top: 1em;margin-bottom: 1em;max-width: 100%;box-sizing: border-box;min-height: 1em;white-space: normal;font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;background-color: rgb(255, 255, 255);overflow-wrap: break-word !important;\">如何防止CSRF攻击？</p><p style=\"max-width: 100%;min-height: 1em;white-space: normal;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><br style=\"max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;\"  /></p><p style=\"max-width: 100%;min-height: 1em;white-space: normal;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><br style=\"max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;\"  /></p><p style=\"max-width: 100%;min-height: 1em;white-space: normal;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><span style=\"max-width: 100%;color: rgb(255, 104, 39);font-size: 16px;overflow-wrap: break-word !important;box-sizing: border-box !important;\">推荐阅读</span></p><p style=\"max-width: 100%;min-height: 1em;white-space: normal;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484172&amp;idx=1&amp;sn=8f9eaec88e04588e76b0c4958162e6af&amp;scene=21#wechat_redirect\" target=\"_blank\" style=\"max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;\" rel=\"noopener noreferrer\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(53, 124, 168);overflow-wrap: break-word !important;box-sizing: border-box !important;\">线程池是怎样工作的</span></a></p><p style=\"max-width: 100%;min-height: 1em;white-space: normal;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484193&amp;idx=1&amp;sn=0953118972d8fdff36fae804eb5fcc8b&amp;scene=21#wechat_redirect\" target=\"_blank\" style=\"max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;\" rel=\"noopener noreferrer\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(53, 124, 168);overflow-wrap: break-word !important;box-sizing: border-box !important;\">什么是 Arthas</span></a><br style=\"max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;\"  /></p><p style=\"max-width: 100%;min-height: 1em;white-space: normal;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484110&amp;idx=1&amp;sn=2a3dbfb804f282160e288d9178b2665e&amp;scene=21#wechat_redirect\" target=\"_blank\" style=\"max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;\" rel=\"noopener noreferrer\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(53, 124, 168);overflow-wrap: break-word !important;box-sizing: border-box !important;\">怎样编写一个 Web 容器</span></a></p><p style=\"max-width: 100%;min-height: 1em;white-space: normal;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484154&amp;idx=1&amp;sn=c99d867ebe79e5b3fa784beff06d52b7&amp;scene=21#wechat_redirect\" target=\"_blank\" style=\"max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;\" rel=\"noopener noreferrer\"><span style=\"max-width: 100%;font-size: 14px;color: rgb(53, 124, 168);overflow-wrap: break-word !important;box-sizing: border-box !important;\">更好的使用 Nacos 配置中心</span></a></p><p style=\"max-width: 100%;min-height: 1em;white-space: normal;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><br style=\"max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;\"  /></p><p style=\"max-width: 100%;min-height: 1em;white-space: normal;text-align: center;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><img       style=\"height: 156px;box-shadow: rgb(170, 170, 170) 0em 0em 1em 0px;width: 156px;border-radius: 0px;overflow-wrap: break-word !important;box-sizing: border-box !important;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress2-1585361413.jpeg\" alt=\"跨域问题是怎样造成的\" title=\"跨域问题是怎样造成的\"  /></p><p style=\"max-width: 100%;min-height: 1em;white-space: normal;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><br style=\"max-width: 100%;overflow-wrap: break-word !important;box-sizing: border-box !important;\"  /></p><p style=\"max-width: 100%;min-height: 1em;white-space: normal;text-align: right;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><span style=\"max-width: 100%;color: rgb(53, 124, 168);font-size: 15px;overflow-wrap: break-word !important;box-sizing: border-box !important;\">如果文章对你有帮助，欢迎转发支持</span></p><p style=\"max-width: 100%;min-height: 1em;white-space: normal;text-align: right;overflow-wrap: break-word !important;box-sizing: border-box !important;\"><span style=\"max-width: 100%;font-size: 13px;color: rgb(255, 104, 39);overflow-wrap: break-word !important;box-sizing: border-box !important;\">如果觉得好看，请点击“好看”哦 ↓↓</span></p> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（逐码）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/a7eZA0Ljvhb6YHXtxn--6w\" rel=\"noopener noreferrer\">跨域问题是怎样造成的</a></p></blockquote></div>', '跨域问题是怎样造成的', '', 'inherit', 'closed', 'closed', '', '48-revision-v1', '', '', '2020-03-28 10:10:13', '2020-03-28 02:10:13', '', 48, 'https://www.javashitang.com/?p=59', 0, 'revision', '', 0);
INSERT INTO `wp_posts` VALUES (60, 1, '2019-10-19 09:01:37', '2020-03-28 02:10:43', '<div class=\"bpp-post-content\">                                                                                                                            <section class=\"output_wrapper\" style=\"font-size: 16px;color: rgb(62, 62, 62);line-height: 1.6;word-spacing: 0px;letter-spacing: 0px;font-family: &quot;Helvetica Neue&quot;,Helvetica,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,Arial,sans-serif;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">本文接着上篇的<a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484249&amp;idx=1&amp;sn=24488c08e6d7d897a4149f4792fe5781&amp;scene=21#wechat_redirect\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;text-decoration: none;color: rgb(30, 107, 184);overflow-wrap: break-word;\" >你真的了解单例模式吗？</a>继续扩展，再聊聊单例，最后看看为啥枚举是最好的单例~</p><h4 style=\"color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;font-weight: bold;font-size: 1.2em;text-align: center;\"><span style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(61, 170, 214);\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">1.Java 内存模型（JMM）</strong></span><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\"></strong></span></h4><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">不同架构的物理计算机可以有不一样的内存模型，Java 虚拟机也有自己的内存模型。</p><ul style=\"list-style-type: disc;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\">Java 虚拟机规范中试图定义一种 Java 内存模型（Java Memory Model，简称 &nbsp;JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让 Java &nbsp;程序在各种平台下都能达到一致的内存访问效果，不必因为不同平台上的物理机的内存模型的差异，对各平台定制化开发程序。</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\">Java 内存模型提出目标在于，定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的底层细节。</span></p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">Java 线程之间的通信由 Java 内存模型（JMM）控制，JMM 决定一个线程对共享变量（实例域、静态域和数组）的写入何时对其它线程可见。</p><ul style=\"list-style-type: disc;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">从抽象的角度来看，JMM 定义了线程和主内存 Main Memory（堆内存）之间的抽象关系：线程之间的共享变量存储在主内存中，每个线程都有自己的本地内存（工作内存） Local Memory（只是一个抽象概念，物理上不存在），存储了该线程的共享变量副本。</p></li><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">本地内存是 JMM 的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。</p><figure style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\"><img class=\"\"     style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;display: block;margin: 0px auto;max-width: 100%;\" title=\"还撩单例？枚举小姐姐你永远撩不动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361443.jpg\" alt=\"还撩单例？枚举小姐姐你永远撩不动\"  /></figure></li><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">线程 1 和线程 2 之间需要通信的话，必须经过两个步骤：</p></li><ul style=\"list-style-type: square;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\">线程 1 把本地内存（工作内存） 1 中更新过的共享变量副本刷新到主内存中。</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\">线程 2 到主内存中读取线程1 之前更新过的共享变量。</span></p></li></ul><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">两个步骤实质上是线程1再向线程 2 发送消息，而这个通信过程必须经过主内存。</p></li><ul style=\"list-style-type: square;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\">JMM 通过控制主内存与每个线程的本地内存（工作内存）之间的交互，来为 Java 程序员提供内存可见性保证。</span></p></li></ul></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">关于主内存与工作内存（本地内存）之间的具体交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步回主内存之类的实现细节。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">Java 内存模型中定义了下面 <strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">8</strong> 种操作来完成。</p><figure style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\"><img class=\"\"     style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;display: block;margin: 0px auto;max-width: 100%;\" title=\"还撩单例？枚举小姐姐你永远撩不动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361444.jpg\" alt=\"还撩单例？枚举小姐姐你永远撩不动\"  /></figure><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><span class=\"md-image-before-src ty-focusable\" style=\"box-sizing: border-box;vertical-align: top;color: rgb(51, 51, 51);font-family: &quot;Lucida Console&quot;,Consolas,Courier,monospace;font-size: 14.4px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;text-align: left;text-indent: 0px;text-transform: none;white-space: pre-wrap;word-spacing: 0px;-webkit-text-stroke-width: 0px;background-color: rgb(255, 255, 255);text-decoration-style: initial;text-decoration-color: initial;\"></span></p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361444.png\" alt=\"还撩单例？枚举小姐姐你永远撩不动\" title=\"还撩单例？枚举小姐姐你永远撩不动\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">内存交互基本操作的 <strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">3</strong> 个特性。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><em style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-style: italic;\">原子性</em></p><ul style=\"list-style-type: disc;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">原子性即一个操作或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。原子是世界上的最小单位，具有不可分割性。</p></li><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">在 Java 中，对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，要么不执行。</p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><em style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-style: italic;\">可见性</em></p><ul style=\"list-style-type: disc;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p></li><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">JMM 是通过在线程 1 变量工作内存修改后将新值同步回主内存，线程 2 在变量读取前从主内存刷新变量值，这种依赖主内存作为传递媒介的方式来实现可见性。</p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><em style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-style: italic;\">有序性</em></p><ul style=\"list-style-type: disc;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">有序性规则表现在以下两种场景。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">Java 内存模型的一系列运行规则，都是围绕原子性、可见性、有序性特征建立。是为了实现共享变量的在多个线程的工作内存的数据一致性，多线程并发，指令重排序优化的环境中程序能如预期运行。</p></li><ul style=\"list-style-type: square;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">线程内</strong>，从某个线程的角度看方法的执行，指令会按照一种叫 \" 串行 \"（as-if-serial）的方式执行，此种方式已经应用于顺序编程语言。</p></li><li><p><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">线程间</strong>，这个线程 \" 观察 \" 到其他线程并发地执行非同步的代码时，由于指令重排序优化，任何代码都有可能交叉执行。</p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\">唯一起作用的约束是：对于同步方法，同步块（synchronized 关键字修饰）以及 volatile 字段的操作仍维持相对有序。</span></p></li></ul></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">JMM 属于语言级的内存模型，它确保在不同的编译器和不同的处理器平台之上，通过插入特定类型的 <strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">Memory Barrier</strong>（内存屏障）来禁止特定类型的编译器重排序和处理器重排序，为上层提供一致的内存可见性保证.</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">内存屏障（Memory Barrier），又称内存栅栏，是一个 CPU 指令, 有两个作用:</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">(1)阻止屏障两侧的指令重排序，插入一条 Memory Barrier 会告诉编译器和 CPU，不管什么指令都不能和这条 Memory Barrier 指令重排序。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">(2)强制把写缓冲区/高速缓存中的脏数据等写回主内存，让缓存中相应的数据失效。如一个 Write-Barrier（写入屏障）将刷出所有在 Barrier 之前写入 cache 的数据，因此，任何 &nbsp;CPU 上的线程都能读取到这些数据的最新版本。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">JMM把内存屏障指令分为下列四类：</p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361445.png\" alt=\"还撩单例？枚举小姐姐你永远撩不动\" title=\"还撩单例？枚举小姐姐你永远撩不动\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">内存屏障阻碍了 CPU 采用优化技术来降低内存操作延迟，因此必定会带来性能损失。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><br  /></p><h4 style=\"color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;font-weight: bold;font-size: 1.2em;text-align: center;\"><span style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(61, 170, 214);\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">2.指令重排</strong></span><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\"></strong></span></h4><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">在执行程序时，为了提高性能，处理器和编译器会对指令做重排序。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">重排序不是随意重排序，它需要满足以下两个条件。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">(1)数据依赖性</strong></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">如果两个操作访问同一个变量，其中一个为写操作，此时这两个操作之间存在数据依赖性。编译器和处理器不会改变存在数据依赖性关系的两个操作的执行顺序，即不会重排序。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">(2)as-if-serial</strong></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">所有的动作（Action）都可以为了优化而被重排序，但是必须保证它们重排序后的结果和程序代码本身（单线程下的执行）的应有结果是一致的，编译器、runtime 和处理器都必须遵守 as-if-serial 语义。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">处理器和编译器会在满足上述2个条件的基础上对指令做重排序优化。</p><figure style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\"><img class=\"\"     style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;display: block;margin: 0px auto;max-width: 100%;\" title=\"还撩单例？枚举小姐姐你永远撩不动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585361445.jpg\" alt=\"还撩单例？枚举小姐姐你永远撩不动\"  /></figure><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">1:编译器优化的重排序</strong>。<strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">编译器</strong> 在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">编译器在编译过程中，会进行指令优化，有时与其等待阻塞指令（如等待缓存刷入）完成，不如先执行其他指令。与处理器层面的乱序执行相比，编译器重排序能够完成更大范围、效果更好的乱序优化。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">编译器层面的重排序，自然可以由编译器控制。使用 <strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">volatile</strong> 做标记，就可以禁用编译器层面的重排序。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">可以回忆下上篇<a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484249&amp;idx=1&amp;sn=24488c08e6d7d897a4149f4792fe5781&amp;scene=21#wechat_redirect\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;text-decoration: none;color: rgb(30, 107, 184);overflow-wrap: break-word;\" >你真的了解单例模式吗？</a>一文中说到的\"懒汉写法-<em style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-style: italic;\">双重检查锁定DCL</em>\"存在的重排序案例。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">下面就来聊聊volatile作用以及它是怎么防止编译器层面指令重排的：</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin: 0px 2px;color: rgb(233, 105, 0);background: rgb(248, 248, 248) none repeat scroll 0% 0%;\">volatile</code>是一个变量修饰符，只能用来修饰变量。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">volatile写：当写一个volatile变量时，JMM会把该线程对应的本地内存中的共享变量刷新到主内存。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">volatile读：当读一个volatile变量时，JMM会把该线程对应的本地内存置为无效。线程接下来将从主内存中读取共享变量。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><em style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-style: italic;\">JMM针对编译器制定的volatile重排序规则表</em></p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585361445.png\" alt=\"还撩单例？枚举小姐姐你永远撩不动\" title=\"还撩单例？枚举小姐姐你永远撩不动\"  /></p><p style=\"text-align: center;\"><br  /></p><p>从上表我们可以看出：<br  /></p><ul style=\"list-style-type: disc;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">当第二个操作是volatile写时，不管第一个操作是什么，都不能重排序。这个规则确保volatile写之前的操作不会被编译器重排序到volatile写之后。</p></li><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">当第一个操作是volatile读时，不管第二个操作是什么，都不能重排序。这个规则确保volatile读之后的操作不会被编译器重排序到volatile读之前。</p></li><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">当第一个操作是volatile写，第二个操作是volatile读/volatile写时，不能重排序。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">volatile变量读写前后插入内存屏障以避免重排序，保证了有序性：</p></li><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">在每个volatile写操作的前面插入一个StoreStore屏障。</p></li><ul style=\"list-style-type: square;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p>对于这样的语句Store1 <code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin: 0px 2px;color: rgb(233, 105, 0);background: rgb(248, 248, 248) none repeat scroll 0% 0%;\">StoreStore</code> Store2，在Store2及后续写入操作执行前，保证Store1的写入操作对其它处理器可见</p></li></ul><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">在每个volatile写操作的后面插入一个StoreLoad屏障。</p></li><ul style=\"list-style-type: square;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p>对于这样的语句Store1 <code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin: 0px 2px;color: rgb(233, 105, 0);background: rgb(248, 248, 248) none repeat scroll 0% 0%;\">StoreLoad</code> Load2，在Load2及后续所有读取操作执行前，保证Store1的写入对所有处理器可见</p></li></ul><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">在每个volatile读操作的后面插入一个LoadLoad屏障。</p></li><ul style=\"list-style-type: square;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p>对于这样的语句Load1 <code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin: 0px 2px;color: rgb(233, 105, 0);background: rgb(248, 248, 248) none repeat scroll 0% 0%;\">LoadLoad</code> Load2，在Load2及后续读取操作要读取的数据被访问前，保证Load1要读取的数据被读取完毕</p></li></ul><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">在每个volatile读操作的后面插入一个LoadStore屏障。　　</p></li><ul style=\"list-style-type: square;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p>对于这样的语句Load1 <code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin: 0px 2px;color: rgb(233, 105, 0);background: rgb(248, 248, 248) none repeat scroll 0% 0%;\">LoadStore</code> Store2，在Store2及后续写入操作被刷出前，保证Load1要读取的数据被读取完毕</p></li></ul></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">2:指令级并行的重排序(处理器)</strong>。如果不存在数据依赖性，<strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">处理器</strong> 可以改变语句对应机器指令的执行顺序。</p><figure style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\"><img class=\"\"     style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;display: block;margin: 0px auto;max-width: 100%;\" title=\"还撩单例？枚举小姐姐你永远撩不动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361446.jpg\" alt=\"还撩单例？枚举小姐姐你永远撩不动\"  /></figure><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">只要不影响程序单线程、顺序执行的结果，就可以对两个指令重排序。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">乱序执行技术是处理器为提高运算速度而做出违背代码原有顺序的优化。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">3:内存系统的重排序(处理器)</strong>。处理器使用 <strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">缓存和读/写缓冲区</strong>，这使得加载和存储操作看上去可能是在乱序执行。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><br  /></p><h4 style=\"color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;font-weight: bold;font-size: 1.2em;text-align: center;\"><span style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(61, 170, 214);\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">3.枚举类型为什么是最优单例模式</strong></span><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\"></strong></span></h4><pre style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\"><code class=\"hljs cpp\" style=\"margin: 0px 2px;line-height: 18px;font-size: 14px;font-weight: normal;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas,Inconsolata,Courier,monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46) none repeat scroll 0% 0%;padding: 0.5em;white-space: pre ! important;overflow-wrap: normal ! important;word-break: normal ! important;overflow: auto ! important;display: -webkit-box ! important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">enum</span>&nbsp;EnumSingleton&nbsp;{<br  />&nbsp;&nbsp;INSTANCE;<br  />}<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">Joshua Bloch, Effective Java 2nd Edition p.18</p><blockquote style=\"line-height: inherit;display: block;padding: 15px 15px 15px 1rem;font-size: 0.9em;margin: 1em 0px;color: rgb(129, 145, 152);border-left: 6px solid rgb(220, 230, 240);background: rgb(242, 247, 251) none repeat scroll 0% 0%;overflow: auto;overflow-wrap: normal;word-break: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 0px;\">A single-element enum type is the best way to implement a singleton</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 0px;\">单元素枚举类型是实现单例的最佳方法</p></blockquote><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">为什么说枚举是（一般情况下）最好的Java单例实现呢？他也做出了简单的说明：</p><blockquote style=\"line-height: inherit;display: block;padding: 15px 15px 15px 1rem;font-size: 0.9em;margin: 1em 0px;color: rgb(129, 145, 152);border-left: 6px solid rgb(220, 230, 240);background: rgb(242, 247, 251) none repeat scroll 0% 0%;overflow: auto;overflow-wrap: normal;word-break: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 0px;\">It is more concise, provides the serialization machinery for free, &nbsp;and provides an ironclad guarantee against multiple instantiation, even &nbsp;in the face of sophisticated serialization or reflection attacks.</p></blockquote><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">大意就是，枚举单例可以有效防御两种破坏单例（即使单例产生多个实例）的行为：<strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">反射攻击</strong>与<strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">序列化攻击</strong>。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">枚举单例的防御机制</strong></p><h5 style=\"color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;font-weight: bold;font-size: 1em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\">(1)对反射的防御</span></h5><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">所有Java枚举都隐式继承自Enum抽象类，而Enum抽象类根本没有无参构造方法，只有如下一个构造方法：</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\"><code class=\"hljs cpp\" style=\"margin: 0px 2px;line-height: 18px;font-size: 14px;font-weight: normal;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas,Inconsolata,Courier,monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46) none repeat scroll 0% 0%;padding: 0.5em;white-space: pre ! important;overflow-wrap: normal ! important;word-break: normal ! important;overflow: auto ! important;display: -webkit-box ! important;\"><span class=\"hljs-function\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">protected</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(165, 218, 45);overflow-wrap: inherit ! important;word-break: inherit ! important;\">Enum</span><span class=\"hljs-params\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(255, 152, 35);overflow-wrap: inherit ! important;word-break: inherit ! important;\">(String&nbsp;name,&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">int</span>&nbsp;ordinal)</span>&nbsp;</span>{<br  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">this</span>.name&nbsp;=&nbsp;name;<br  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">this</span>.ordinal&nbsp;=&nbsp;ordinal;<br  />}<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">如果想通过反射来获取枚举的实例</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\"><code class=\"hljs delphi\" style=\"margin: 0px 2px;line-height: 18px;font-size: 14px;font-weight: normal;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas,Inconsolata,Courier,monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46) none repeat scroll 0% 0%;padding: 0.5em;white-space: pre ! important;overflow-wrap: normal ! important;word-break: normal ! important;overflow: auto ! important;display: -webkit-box ! important;\"><span class=\"hljs-function\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">Constructor</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(165, 218, 45);overflow-wrap: inherit ! important;word-break: inherit ! important;\">con</span>&nbsp;=&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(165, 218, 45);overflow-wrap: inherit ! important;word-break: inherit ! important;\">EnumSingleton</span>.<span class=\"hljs-title\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(165, 218, 45);overflow-wrap: inherit ! important;word-break: inherit ! important;\">class</span>.<span class=\"hljs-title\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(165, 218, 45);overflow-wrap: inherit ! important;word-break: inherit ! important;\">getDeclaredConstructor</span><span class=\"hljs-params\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(255, 152, 35);overflow-wrap: inherit ! important;word-break: inherit ! important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">String</span>.<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">class</span>,&nbsp;int.<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">class</span>)</span>;</span><br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">测试直接就会抛出异常</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\"><code class=\"hljs cs\" style=\"margin: 0px 2px;line-height: 18px;font-size: 14px;font-weight: normal;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas,Inconsolata,Courier,monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46) none repeat scroll 0% 0%;padding: 0.5em;white-space: pre ! important;overflow-wrap: normal ! important;word-break: normal ! important;overflow: auto ! important;display: -webkit-box ! important;\">Exception&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">in</span>&nbsp;thread&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(238, 220, 112);overflow-wrap: inherit ! important;word-break: inherit ! important;\">\"main\"</span>&nbsp;java.lang.IllegalArgumentException:&nbsp;Cannot&nbsp;reflectively&nbsp;create&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">enum</span>&nbsp;objects<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">可见，JDK反射机制内部完全禁止了用反射创建枚举实例的可能性。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">(2)对序列化的防御</strong></p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\"><code class=\"hljs cs\" style=\"margin: 0px 2px;line-height: 18px;font-size: 14px;font-weight: normal;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas,Inconsolata,Courier,monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46) none repeat scroll 0% 0%;padding: 0.5em;white-space: pre ! important;overflow-wrap: normal ! important;word-break: normal ! important;overflow: auto ! important;display: -webkit-box ! important;\">EnumSingleton&nbsp;instanceA&nbsp;=&nbsp;EnumSingleton.getInstance();<br  />ObjectOutputStream&nbsp;oos&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">new</span>&nbsp;ObjectOutputStream(<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">new</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileOutputStream(<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(238, 220, 112);overflow-wrap: inherit ! important;word-break: inherit ! important;\">\"sersingle_file\"</span>));<br  />oos.writeObject(instanceA);<br  /><br  />File&nbsp;file&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">new</span>&nbsp;File(<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(238, 220, 112);overflow-wrap: inherit ! important;word-break: inherit ! important;\">\"sersingle_file\"</span>);<br  />ObjectInputStream&nbsp;ois&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">new</span>&nbsp;ObjectInputStream(<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">new</span>&nbsp;FileInputStream(file));<br  />EnumSingleton&nbsp;instanceB&nbsp;=&nbsp;(EnumSingleton)&nbsp;ois.readObject();<br  />System.<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">out</span>.println(singletonA.<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">equals</span>(singletonB));<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">换成枚举进行测试后，发现返回结果是true。这是因为ObjectInputStream类中，对枚举类型有一个专门的readEnum()方法来处理，其简要流程如下：</p><ul style=\"list-style-type: disc;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\">通过类描述符取得枚举单例的类型EnumSingleton；</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\">取得枚举单例中的枚举值的名字（这里是INSTANCE）；</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\">调用Enum.valueOf()方法，根据枚举类型和枚举值的名字，获得最终的单例。</span></p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">这种处理方法与readResolve()方法大同小异，都是以绕过反射直接获取单例为目标。不同的是，枚举对序列化的防御仍然是JDK内部实现的。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">综上所述，枚举单例确实是目前最好的单例实现了，不仅写法非常简单，并且JDK能够保证其安全性，不需要我们做额外的工作。</p><h4 style=\"color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;font-weight: bold;font-size: 1.2em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\">参考来源</span></h4><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">https://www.jianshu.com/p/1e82c75034b7</p></section><p><br  /></p><p style=\"text-align: center;\"><img class=\"\"      style=\"text-align: center;white-space: normal;box-shadow: 0em 0em 1em 0px rgb(170, 170, 170);border-radius: 0px;width: 156px ! important;height: auto ! important;visibility: visible ! important;\"  src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585361446.jpeg\" alt=\"还撩单例？枚举小姐姐你永远撩不动\" title=\"还撩单例？枚举小姐姐你永远撩不动\"  /></p><p><br  /></p> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（逐码）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/LZeV2FmoE8ci4iCKJs4YWA\" rel=\"noopener noreferrer\">还撩单例？枚举小姐姐你永远撩不动</a></p></blockquote></div>', '还撩单例？枚举小姐姐你永远撩不动', '', 'publish', 'open', 'open', '', 'f061e6d9fd', '', '', '2020-03-28 10:10:46', '2020-03-28 02:10:46', '', 0, 'https://www.javashitang.com/?p=60', 0, 'post', '', 0);
INSERT INTO `wp_posts` VALUES (61, 1, '2020-03-28 10:10:43', '2020-03-28 02:10:43', '', 'beepress10-1585361443', '', 'inherit', 'open', 'closed', '', 'beepress10-1585361443', '', '', '2020-03-28 10:10:43', '2020-03-28 02:10:43', '', 60, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361443.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (62, 1, '2020-03-28 10:10:43', '2020-03-28 02:10:43', '', 'beepress10-1585361443', '', 'inherit', 'open', 'closed', '', 'beepress10-1585361443-2', '', '', '2020-03-28 10:10:43', '2020-03-28 02:10:43', '', 60, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361443.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (63, 1, '2020-03-28 10:10:44', '2020-03-28 02:10:44', '', 'beepress8-1585361444', '', 'inherit', 'open', 'closed', '', 'beepress8-1585361444', '', '', '2020-03-28 10:10:44', '2020-03-28 02:10:44', '', 60, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361444.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (64, 1, '2020-03-28 10:10:44', '2020-03-28 02:10:44', '', 'beepress8-1585361444', '', 'inherit', 'open', 'closed', '', 'beepress8-1585361444-2', '', '', '2020-03-28 10:10:44', '2020-03-28 02:10:44', '', 60, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361444.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (65, 1, '2020-03-28 10:10:45', '2020-03-28 02:10:45', '', 'beepress9-1585361445', '', 'inherit', 'open', 'closed', '', 'beepress9-1585361445', '', '', '2020-03-28 10:10:45', '2020-03-28 02:10:45', '', 60, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361445.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (66, 1, '2020-03-28 10:10:45', '2020-03-28 02:10:45', '', 'beepress5-1585361445', '', 'inherit', 'open', 'closed', '', 'beepress5-1585361445', '', '', '2020-03-28 10:10:45', '2020-03-28 02:10:45', '', 60, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585361445.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (67, 1, '2020-03-28 10:10:45', '2020-03-28 02:10:45', '', 'beepress5-1585361445', '', 'inherit', 'open', 'closed', '', 'beepress5-1585361445-2', '', '', '2020-03-28 10:10:45', '2020-03-28 02:10:45', '', 60, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585361445.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (68, 1, '2020-03-28 10:10:46', '2020-03-28 02:10:46', '', 'beepress9-1585361446', '', 'inherit', 'open', 'closed', '', 'beepress9-1585361446', '', '', '2020-03-28 10:10:46', '2020-03-28 02:10:46', '', 60, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361446.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (69, 1, '2020-03-28 10:10:46', '2020-03-28 02:10:46', '', 'beepress7-1585361446', '', 'inherit', 'open', 'closed', '', 'beepress7-1585361446', '', '', '2020-03-28 10:10:46', '2020-03-28 02:10:46', '', 60, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585361446.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (70, 1, '2020-03-28 10:10:46', '2020-03-28 02:10:46', '<div class=\"bpp-post-content\">                                                                                                                            <section class=\"output_wrapper\" style=\"font-size: 16px;color: rgb(62, 62, 62);line-height: 1.6;word-spacing: 0px;letter-spacing: 0px;font-family: &quot;Helvetica Neue&quot;,Helvetica,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,Arial,sans-serif;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">本文接着上篇的<a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484249&amp;idx=1&amp;sn=24488c08e6d7d897a4149f4792fe5781&amp;scene=21#wechat_redirect\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;text-decoration: none;color: rgb(30, 107, 184);overflow-wrap: break-word;\" >你真的了解单例模式吗？</a>继续扩展，再聊聊单例，最后看看为啥枚举是最好的单例~</p><h4 style=\"color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;font-weight: bold;font-size: 1.2em;text-align: center;\"><span style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(61, 170, 214);\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">1.Java 内存模型（JMM）</strong></span><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\"></strong></span></h4><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">不同架构的物理计算机可以有不一样的内存模型，Java 虚拟机也有自己的内存模型。</p><ul style=\"list-style-type: disc;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\">Java 虚拟机规范中试图定义一种 Java 内存模型（Java Memory Model，简称 &nbsp;JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让 Java &nbsp;程序在各种平台下都能达到一致的内存访问效果，不必因为不同平台上的物理机的内存模型的差异，对各平台定制化开发程序。</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\">Java 内存模型提出目标在于，定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的底层细节。</span></p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">Java 线程之间的通信由 Java 内存模型（JMM）控制，JMM 决定一个线程对共享变量（实例域、静态域和数组）的写入何时对其它线程可见。</p><ul style=\"list-style-type: disc;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">从抽象的角度来看，JMM 定义了线程和主内存 Main Memory（堆内存）之间的抽象关系：线程之间的共享变量存储在主内存中，每个线程都有自己的本地内存（工作内存） Local Memory（只是一个抽象概念，物理上不存在），存储了该线程的共享变量副本。</p></li><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">本地内存是 JMM 的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。</p><figure style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\"><img class=\"\"     style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;display: block;margin: 0px auto;max-width: 100%;\" title=\"还撩单例？枚举小姐姐你永远撩不动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361443.jpg\" alt=\"还撩单例？枚举小姐姐你永远撩不动\"  /></figure></li><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">线程 1 和线程 2 之间需要通信的话，必须经过两个步骤：</p></li><ul style=\"list-style-type: square;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\">线程 1 把本地内存（工作内存） 1 中更新过的共享变量副本刷新到主内存中。</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\">线程 2 到主内存中读取线程1 之前更新过的共享变量。</span></p></li></ul><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">两个步骤实质上是线程1再向线程 2 发送消息，而这个通信过程必须经过主内存。</p></li><ul style=\"list-style-type: square;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\">JMM 通过控制主内存与每个线程的本地内存（工作内存）之间的交互，来为 Java 程序员提供内存可见性保证。</span></p></li></ul></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">关于主内存与工作内存（本地内存）之间的具体交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步回主内存之类的实现细节。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">Java 内存模型中定义了下面 <strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">8</strong> 种操作来完成。</p><figure style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\"><img class=\"\"     style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;display: block;margin: 0px auto;max-width: 100%;\" title=\"还撩单例？枚举小姐姐你永远撩不动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361444.jpg\" alt=\"还撩单例？枚举小姐姐你永远撩不动\"  /></figure><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><span class=\"md-image-before-src ty-focusable\" style=\"box-sizing: border-box;vertical-align: top;color: rgb(51, 51, 51);font-family: &quot;Lucida Console&quot;,Consolas,Courier,monospace;font-size: 14.4px;font-style: normal;font-variant-ligatures: normal;font-variant-caps: normal;font-weight: 400;letter-spacing: normal;text-align: left;text-indent: 0px;text-transform: none;white-space: pre-wrap;word-spacing: 0px;-webkit-text-stroke-width: 0px;background-color: rgb(255, 255, 255);text-decoration-style: initial;text-decoration-color: initial;\"></span></p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361444.png\" alt=\"还撩单例？枚举小姐姐你永远撩不动\" title=\"还撩单例？枚举小姐姐你永远撩不动\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">内存交互基本操作的 <strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">3</strong> 个特性。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><em style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-style: italic;\">原子性</em></p><ul style=\"list-style-type: disc;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">原子性即一个操作或者多个操作，要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。原子是世界上的最小单位，具有不可分割性。</p></li><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">在 Java 中，对基本数据类型的变量的读取和赋值操作是原子性操作，即这些操作是不可被中断的，要么执行，要么不执行。</p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><em style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-style: italic;\">可见性</em></p><ul style=\"list-style-type: disc;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">可见性是指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p></li><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">JMM 是通过在线程 1 变量工作内存修改后将新值同步回主内存，线程 2 在变量读取前从主内存刷新变量值，这种依赖主内存作为传递媒介的方式来实现可见性。</p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><em style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-style: italic;\">有序性</em></p><ul style=\"list-style-type: disc;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">有序性规则表现在以下两种场景。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">Java 内存模型的一系列运行规则，都是围绕原子性、可见性、有序性特征建立。是为了实现共享变量的在多个线程的工作内存的数据一致性，多线程并发，指令重排序优化的环境中程序能如预期运行。</p></li><ul style=\"list-style-type: square;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">线程内</strong>，从某个线程的角度看方法的执行，指令会按照一种叫 \" 串行 \"（as-if-serial）的方式执行，此种方式已经应用于顺序编程语言。</p></li><li><p><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">线程间</strong>，这个线程 \" 观察 \" 到其他线程并发地执行非同步的代码时，由于指令重排序优化，任何代码都有可能交叉执行。</p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\">唯一起作用的约束是：对于同步方法，同步块（synchronized 关键字修饰）以及 volatile 字段的操作仍维持相对有序。</span></p></li></ul></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">JMM 属于语言级的内存模型，它确保在不同的编译器和不同的处理器平台之上，通过插入特定类型的 <strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">Memory Barrier</strong>（内存屏障）来禁止特定类型的编译器重排序和处理器重排序，为上层提供一致的内存可见性保证.</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">内存屏障（Memory Barrier），又称内存栅栏，是一个 CPU 指令, 有两个作用:</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">(1)阻止屏障两侧的指令重排序，插入一条 Memory Barrier 会告诉编译器和 CPU，不管什么指令都不能和这条 Memory Barrier 指令重排序。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">(2)强制把写缓冲区/高速缓存中的脏数据等写回主内存，让缓存中相应的数据失效。如一个 Write-Barrier（写入屏障）将刷出所有在 Barrier 之前写入 cache 的数据，因此，任何 &nbsp;CPU 上的线程都能读取到这些数据的最新版本。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">JMM把内存屏障指令分为下列四类：</p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361445.png\" alt=\"还撩单例？枚举小姐姐你永远撩不动\" title=\"还撩单例？枚举小姐姐你永远撩不动\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">内存屏障阻碍了 CPU 采用优化技术来降低内存操作延迟，因此必定会带来性能损失。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><br  /></p><h4 style=\"color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;font-weight: bold;font-size: 1.2em;text-align: center;\"><span style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(61, 170, 214);\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">2.指令重排</strong></span><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\"></strong></span></h4><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">在执行程序时，为了提高性能，处理器和编译器会对指令做重排序。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">重排序不是随意重排序，它需要满足以下两个条件。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">(1)数据依赖性</strong></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">如果两个操作访问同一个变量，其中一个为写操作，此时这两个操作之间存在数据依赖性。编译器和处理器不会改变存在数据依赖性关系的两个操作的执行顺序，即不会重排序。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">(2)as-if-serial</strong></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">所有的动作（Action）都可以为了优化而被重排序，但是必须保证它们重排序后的结果和程序代码本身（单线程下的执行）的应有结果是一致的，编译器、runtime 和处理器都必须遵守 as-if-serial 语义。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">处理器和编译器会在满足上述2个条件的基础上对指令做重排序优化。</p><figure style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\"><img class=\"\"     style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;display: block;margin: 0px auto;max-width: 100%;\" title=\"还撩单例？枚举小姐姐你永远撩不动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585361445.jpg\" alt=\"还撩单例？枚举小姐姐你永远撩不动\"  /></figure><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">1:编译器优化的重排序</strong>。<strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">编译器</strong> 在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">编译器在编译过程中，会进行指令优化，有时与其等待阻塞指令（如等待缓存刷入）完成，不如先执行其他指令。与处理器层面的乱序执行相比，编译器重排序能够完成更大范围、效果更好的乱序优化。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">编译器层面的重排序，自然可以由编译器控制。使用 <strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">volatile</strong> 做标记，就可以禁用编译器层面的重排序。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">可以回忆下上篇<a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484249&amp;idx=1&amp;sn=24488c08e6d7d897a4149f4792fe5781&amp;scene=21#wechat_redirect\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;text-decoration: none;color: rgb(30, 107, 184);overflow-wrap: break-word;\" >你真的了解单例模式吗？</a>一文中说到的\"懒汉写法-<em style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-style: italic;\">双重检查锁定DCL</em>\"存在的重排序案例。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">下面就来聊聊volatile作用以及它是怎么防止编译器层面指令重排的：</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin: 0px 2px;color: rgb(233, 105, 0);background: rgb(248, 248, 248) none repeat scroll 0% 0%;\">volatile</code>是一个变量修饰符，只能用来修饰变量。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">volatile写：当写一个volatile变量时，JMM会把该线程对应的本地内存中的共享变量刷新到主内存。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">volatile读：当读一个volatile变量时，JMM会把该线程对应的本地内存置为无效。线程接下来将从主内存中读取共享变量。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><em style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-style: italic;\">JMM针对编译器制定的volatile重排序规则表</em></p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585361445.png\" alt=\"还撩单例？枚举小姐姐你永远撩不动\" title=\"还撩单例？枚举小姐姐你永远撩不动\"  /></p><p style=\"text-align: center;\"><br  /></p><p>从上表我们可以看出：<br  /></p><ul style=\"list-style-type: disc;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">当第二个操作是volatile写时，不管第一个操作是什么，都不能重排序。这个规则确保volatile写之前的操作不会被编译器重排序到volatile写之后。</p></li><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">当第一个操作是volatile读时，不管第二个操作是什么，都不能重排序。这个规则确保volatile读之后的操作不会被编译器重排序到volatile读之前。</p></li><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">当第一个操作是volatile写，第二个操作是volatile读/volatile写时，不能重排序。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">volatile变量读写前后插入内存屏障以避免重排序，保证了有序性：</p></li><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">在每个volatile写操作的前面插入一个StoreStore屏障。</p></li><ul style=\"list-style-type: square;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p>对于这样的语句Store1 <code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin: 0px 2px;color: rgb(233, 105, 0);background: rgb(248, 248, 248) none repeat scroll 0% 0%;\">StoreStore</code> Store2，在Store2及后续写入操作执行前，保证Store1的写入操作对其它处理器可见</p></li></ul><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">在每个volatile写操作的后面插入一个StoreLoad屏障。</p></li><ul style=\"list-style-type: square;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p>对于这样的语句Store1 <code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin: 0px 2px;color: rgb(233, 105, 0);background: rgb(248, 248, 248) none repeat scroll 0% 0%;\">StoreLoad</code> Load2，在Load2及后续所有读取操作执行前，保证Store1的写入对所有处理器可见</p></li></ul><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">在每个volatile读操作的后面插入一个LoadLoad屏障。</p></li><ul style=\"list-style-type: square;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p>对于这样的语句Load1 <code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin: 0px 2px;color: rgb(233, 105, 0);background: rgb(248, 248, 248) none repeat scroll 0% 0%;\">LoadLoad</code> Load2，在Load2及后续读取操作要读取的数据被访问前，保证Load1要读取的数据被读取完毕</p></li></ul><li><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">在每个volatile读操作的后面插入一个LoadStore屏障。　　</p></li><ul style=\"list-style-type: square;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p>对于这样的语句Load1 <code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin: 0px 2px;color: rgb(233, 105, 0);background: rgb(248, 248, 248) none repeat scroll 0% 0%;\">LoadStore</code> Store2，在Store2及后续写入操作被刷出前，保证Load1要读取的数据被读取完毕</p></li></ul></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">2:指令级并行的重排序(处理器)</strong>。如果不存在数据依赖性，<strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">处理器</strong> 可以改变语句对应机器指令的执行顺序。</p><figure style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\"><img class=\"\"     style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;display: block;margin: 0px auto;max-width: 100%;\" title=\"还撩单例？枚举小姐姐你永远撩不动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361446.jpg\" alt=\"还撩单例？枚举小姐姐你永远撩不动\"  /></figure><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">只要不影响程序单线程、顺序执行的结果，就可以对两个指令重排序。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">乱序执行技术是处理器为提高运算速度而做出违背代码原有顺序的优化。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">3:内存系统的重排序(处理器)</strong>。处理器使用 <strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">缓存和读/写缓冲区</strong>，这使得加载和存储操作看上去可能是在乱序执行。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><br  /></p><h4 style=\"color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;font-weight: bold;font-size: 1.2em;text-align: center;\"><span style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(61, 170, 214);\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">3.枚举类型为什么是最优单例模式</strong></span><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\"></strong></span></h4><pre style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\"><code class=\"hljs cpp\" style=\"margin: 0px 2px;line-height: 18px;font-size: 14px;font-weight: normal;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas,Inconsolata,Courier,monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46) none repeat scroll 0% 0%;padding: 0.5em;white-space: pre ! important;overflow-wrap: normal ! important;word-break: normal ! important;overflow: auto ! important;display: -webkit-box ! important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">enum</span>&nbsp;EnumSingleton&nbsp;{<br  />&nbsp;&nbsp;INSTANCE;<br  />}<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">Joshua Bloch, Effective Java 2nd Edition p.18</p><blockquote style=\"line-height: inherit;display: block;padding: 15px 15px 15px 1rem;font-size: 0.9em;margin: 1em 0px;color: rgb(129, 145, 152);border-left: 6px solid rgb(220, 230, 240);background: rgb(242, 247, 251) none repeat scroll 0% 0%;overflow: auto;overflow-wrap: normal;word-break: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 0px;\">A single-element enum type is the best way to implement a singleton</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 0px;\">单元素枚举类型是实现单例的最佳方法</p></blockquote><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">为什么说枚举是（一般情况下）最好的Java单例实现呢？他也做出了简单的说明：</p><blockquote style=\"line-height: inherit;display: block;padding: 15px 15px 15px 1rem;font-size: 0.9em;margin: 1em 0px;color: rgb(129, 145, 152);border-left: 6px solid rgb(220, 230, 240);background: rgb(242, 247, 251) none repeat scroll 0% 0%;overflow: auto;overflow-wrap: normal;word-break: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 0px;\">It is more concise, provides the serialization machinery for free, &nbsp;and provides an ironclad guarantee against multiple instantiation, even &nbsp;in the face of sophisticated serialization or reflection attacks.</p></blockquote><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">大意就是，枚举单例可以有效防御两种破坏单例（即使单例产生多个实例）的行为：<strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">反射攻击</strong>与<strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">序列化攻击</strong>。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">枚举单例的防御机制</strong></p><h5 style=\"color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;font-weight: bold;font-size: 1em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\">(1)对反射的防御</span></h5><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">所有Java枚举都隐式继承自Enum抽象类，而Enum抽象类根本没有无参构造方法，只有如下一个构造方法：</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\"><code class=\"hljs cpp\" style=\"margin: 0px 2px;line-height: 18px;font-size: 14px;font-weight: normal;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas,Inconsolata,Courier,monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46) none repeat scroll 0% 0%;padding: 0.5em;white-space: pre ! important;overflow-wrap: normal ! important;word-break: normal ! important;overflow: auto ! important;display: -webkit-box ! important;\"><span class=\"hljs-function\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">protected</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(165, 218, 45);overflow-wrap: inherit ! important;word-break: inherit ! important;\">Enum</span><span class=\"hljs-params\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(255, 152, 35);overflow-wrap: inherit ! important;word-break: inherit ! important;\">(String&nbsp;name,&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">int</span>&nbsp;ordinal)</span>&nbsp;</span>{<br  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">this</span>.name&nbsp;=&nbsp;name;<br  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">this</span>.ordinal&nbsp;=&nbsp;ordinal;<br  />}<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">如果想通过反射来获取枚举的实例</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\"><code class=\"hljs delphi\" style=\"margin: 0px 2px;line-height: 18px;font-size: 14px;font-weight: normal;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas,Inconsolata,Courier,monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46) none repeat scroll 0% 0%;padding: 0.5em;white-space: pre ! important;overflow-wrap: normal ! important;word-break: normal ! important;overflow: auto ! important;display: -webkit-box ! important;\"><span class=\"hljs-function\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">Constructor</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(165, 218, 45);overflow-wrap: inherit ! important;word-break: inherit ! important;\">con</span>&nbsp;=&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(165, 218, 45);overflow-wrap: inherit ! important;word-break: inherit ! important;\">EnumSingleton</span>.<span class=\"hljs-title\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(165, 218, 45);overflow-wrap: inherit ! important;word-break: inherit ! important;\">class</span>.<span class=\"hljs-title\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(165, 218, 45);overflow-wrap: inherit ! important;word-break: inherit ! important;\">getDeclaredConstructor</span><span class=\"hljs-params\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(255, 152, 35);overflow-wrap: inherit ! important;word-break: inherit ! important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">String</span>.<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">class</span>,&nbsp;int.<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">class</span>)</span>;</span><br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">测试直接就会抛出异常</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\"><code class=\"hljs cs\" style=\"margin: 0px 2px;line-height: 18px;font-size: 14px;font-weight: normal;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas,Inconsolata,Courier,monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46) none repeat scroll 0% 0%;padding: 0.5em;white-space: pre ! important;overflow-wrap: normal ! important;word-break: normal ! important;overflow: auto ! important;display: -webkit-box ! important;\">Exception&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">in</span>&nbsp;thread&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(238, 220, 112);overflow-wrap: inherit ! important;word-break: inherit ! important;\">\"main\"</span>&nbsp;java.lang.IllegalArgumentException:&nbsp;Cannot&nbsp;reflectively&nbsp;create&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">enum</span>&nbsp;objects<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">可见，JDK反射机制内部完全禁止了用反射创建枚举实例的可能性。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\"><strong style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;font-weight: bold;\">(2)对序列化的防御</strong></p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\"><code class=\"hljs cs\" style=\"margin: 0px 2px;line-height: 18px;font-size: 14px;font-weight: normal;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas,Inconsolata,Courier,monospace;border-radius: 0px;color: rgb(169, 183, 198);background: rgb(40, 43, 46) none repeat scroll 0% 0%;padding: 0.5em;white-space: pre ! important;overflow-wrap: normal ! important;word-break: normal ! important;overflow: auto ! important;display: -webkit-box ! important;\">EnumSingleton&nbsp;instanceA&nbsp;=&nbsp;EnumSingleton.getInstance();<br  />ObjectOutputStream&nbsp;oos&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">new</span>&nbsp;ObjectOutputStream(<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">new</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileOutputStream(<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(238, 220, 112);overflow-wrap: inherit ! important;word-break: inherit ! important;\">\"sersingle_file\"</span>));<br  />oos.writeObject(instanceA);<br  /><br  />File&nbsp;file&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">new</span>&nbsp;File(<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(238, 220, 112);overflow-wrap: inherit ! important;word-break: inherit ! important;\">\"sersingle_file\"</span>);<br  />ObjectInputStream&nbsp;ois&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">new</span>&nbsp;ObjectInputStream(<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">new</span>&nbsp;FileInputStream(file));<br  />EnumSingleton&nbsp;instanceB&nbsp;=&nbsp;(EnumSingleton)&nbsp;ois.readObject();<br  />System.<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">out</span>.println(singletonA.<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;margin: 0px;padding: 0px;color: rgb(248, 35, 117);overflow-wrap: inherit ! important;word-break: inherit ! important;\">equals</span>(singletonB));<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">换成枚举进行测试后，发现返回结果是true。这是因为ObjectInputStream类中，对枚举类型有一个专门的readEnum()方法来处理，其简要流程如下：</p><ul style=\"list-style-type: disc;margin-left: 0px;margin-right: 0px;\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\">通过类描述符取得枚举单例的类型EnumSingleton；</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\">取得枚举单例中的枚举值的名字（这里是INSTANCE）；</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\">调用Enum.valueOf()方法，根据枚举类型和枚举值的名字，获得最终的单例。</span></p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">这种处理方法与readResolve()方法大同小异，都是以绕过反射直接获取单例为目标。不同的是，枚举对序列化的防御仍然是JDK内部实现的。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">综上所述，枚举单例确实是目前最好的单例实现了，不仅写法非常简单，并且JDK能够保证其安全性，不需要我们做额外的工作。</p><h4 style=\"color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;font-weight: bold;font-size: 1.2em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;margin: 0px;padding: 0px;\">参考来源</span></h4><p style=\"font-size: inherit;color: inherit;line-height: inherit;padding: 0px;margin: 1.5em 0px;\">https://www.jianshu.com/p/1e82c75034b7</p></section><p><br  /></p><p style=\"text-align: center;\"><img class=\"\"      style=\"text-align: center;white-space: normal;box-shadow: 0em 0em 1em 0px rgb(170, 170, 170);border-radius: 0px;width: 156px ! important;height: auto ! important;visibility: visible ! important;\"  src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585361446.jpeg\" alt=\"还撩单例？枚举小姐姐你永远撩不动\" title=\"还撩单例？枚举小姐姐你永远撩不动\"  /></p><p><br  /></p> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（逐码）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/LZeV2FmoE8ci4iCKJs4YWA\" rel=\"noopener noreferrer\">还撩单例？枚举小姐姐你永远撩不动</a></p></blockquote></div>', '还撩单例？枚举小姐姐你永远撩不动', '', 'inherit', 'closed', 'closed', '', '60-revision-v1', '', '', '2020-03-28 10:10:46', '2020-03-28 02:10:46', '', 60, 'https://www.javashitang.com/?p=70', 0, 'revision', '', 0);
INSERT INTO `wp_posts` VALUES (71, 1, '2019-10-12 13:44:11', '2020-03-28 02:11:16', '<div class=\"bpp-post-content\">                                                                                                                            <p ><br  /></p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">单例Singleton</span></h3><p><span style=\"font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;text-align: start;background-color: rgb(255, 255, 255);color: inherit;line-height: inherit;font-size: 13px;\">今天我们来聊聊java中应用非常广泛的单例模式，首先你可以在脑海中想一想我们在平常的开发中哪些地方用到了单例，是怎样实现的，如果让你实现一个单例你有哪些方法呢？</span><span style=\"line-height: inherit;color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 14px;letter-spacing: 2px;text-align: start;background-color: rgb(255, 255, 255);\"></span></p><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">用途</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">确保一个类只有一个实例，并提供对其的全局访问点。</span><span style=\"font-size: 13px;\">从而保证数据内容的一致性，节省内存资源。</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">例如，Windows 中只能打开一个任务管理器，这样可以避免因打开多个任务管理器窗口而出现各个窗口显示内容不一致的情况，或造成内存资源的浪费。</span><span style=\"font-size: 13px;\">每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">在计算机系统中，多线程中的线程池、显卡的驱动程序对象、打印机的后台处理服务、应用程序的日志对象、数据库的连接池、网站的计数器、Web 应用的配置对象、应用程序中的对话框、系统中的缓存等常被设计成单例。</span><span style=\"font-size: 13px;\">这些应用都或多或少具有资源管理器的功能。</span><span style=\"font-size: 13px;\">总之，选择单例模式就是为了避免不一致状态。</span></p><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">定义</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">单例（Singleton）模式的定义：</span><span style=\"font-size: 13px;\">指一个类只有一个实例，且该类能自行创建这个实例的一种模式。</span></p><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">特点</span></h4><ol style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"color: inherit;line-height: inherit;font-size: 13px;\">单例类只有一个实例对象；</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 13px;\">该单例对象必须由单例类自行创建；</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 13px;\">单例类对外提供一个访问该单例的全局访问点；</span></p></li></ol><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">代码实现</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">让类的构造函数私有，在类内创建一个静态对象，并创建一个公有的静态方法访问这个对象。</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">写法上有2种方式:</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">[1]立即加载方式, 也叫“饿汉模式”</strong></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">单例在<span style=\"color: inherit;line-height: inherit;\">类加载初始化</span>时就创建好一个静态的对象供外部使用，除非系统重启，否则这个对象不会改变，不同线程来调用getInstance()的时候，获取的都是类初始化就创建的同一个实例，所以本身就是线程安全的。</span></p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"hljs cpp\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//饿汉式单例类.在类初始化时，已经自行实例化(线程安全)</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Singleton</span>&nbsp;{</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;Singleton&nbsp;ss&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Singleton();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Singleton</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;Singleton&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">getInstance</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;ss;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">唯一的缺点就是实例创建过早，类初始化就创建了，还没调用就已经存在了，容易造成内存资源浪费。</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">[2]延迟加载方式, 也叫“懒汉模式”</strong></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">饿汉是类一旦加载，就把单例初始化完成，保证调用getInstance()的时候，单例是已经存在的;</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">而懒汉比较懒，只有当调用getInstance()的时候，才会去初始化这个单例。</span></p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"hljs cs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//懒汉式单例类.在第一次调用的时候实例化自己(非线程安全)</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">LazySingleton</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;LazySingleton&nbsp;ls&nbsp;=&nbsp;<span class=\"hljs-literal\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">LazySingleton</span>(<span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"></span>)&nbsp;</span>{}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;LazySingleton&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">getInstance</span>(<span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"></span>)&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(ls&nbsp;==&nbsp;<span class=\"hljs-literal\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ls&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;LazySingleton();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;ls;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">但是这种懒汉式单例的实现没有考虑线程安全问题，它是线程不安全的。</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">为什么说这种代码写法线程不安全呢？</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">假设LazySingleton类刚刚被初始化，ls对象还是空，这时候两个线程A和B同时访问getInstance方法：</span></p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"你真的了解单例模式吗？\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361476.png\" alt=\"你真的了解单例模式吗？\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">因为ls是null，所以A和B两个线程同时通过了条件判断，开始执行new操作,显然ls被构建了两次。</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">要保证懒汉式的线程安全，有下面3种方法。</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">（1）使getInstance()同步</strong></p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"hljs java\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//懒汉式单例类.在第一次调用的时候实例化自己(线程安全&nbsp;--&nbsp;同步法)</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">LazySingleton</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">volatile</span>&nbsp;LazySingleton&nbsp;ls&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//保证ls在所有线程中同步</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">LazySingleton</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">synchronized</span>&nbsp;LazySingleton&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">getInstance</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//getInstance&nbsp;方法前加同步</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(ls&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ls&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;LazySingleton();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;ls;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">在方法调用上加了同步，虽然线程安全了，但是每次都要同步，会影响性能，毕竟大多数情况下是不需要同步的；</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">（2）双重检查锁定DCL(double checked locking)</strong></p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"hljs java\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//懒汉式单例类.在第一次调用的时候实例化自己(非绝对线程安全[取决于编译器]&nbsp;--&nbsp;双重检查锁定)</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">LazySingleton</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;LazySingleton&nbsp;ls&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">LazySingleton</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;LazySingleton&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">getInstance</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(ls&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//双重检查</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">synchronized</span>&nbsp;(LazySingleton.class)&nbsp;{&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//锁住整个类&nbsp;&nbsp;</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(ls&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//双重检查</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ls&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;LazySingleton();&nbsp;&nbsp;&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;ls;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">在getInstance中做了两次null检查，第一次是为了提高运行效率；</span><span style=\"font-size: 13px;\">第二次是为了进行同步，避免多线程问题，进入synchronized临界区以后，还要再做一次判空。</span><span style=\"font-size: 13px;\">因为当两个线程同时访问的时候，线程A构建完对象，线程B也已经通过了第一次的判空验证，不做第二次判空的话，线程B还是会再次构建ls对象。</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">虽然上面这样写逻辑上看没什么问题，但是和编译器有关，不算绝对的线程安全。</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">以java为例，需要了解JVM编译器的<strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">指令重排</strong><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\"></strong></span></p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"你真的了解单例模式吗？\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361477.png\" alt=\"你真的了解单例模式吗？\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">当AB两线程同时调用getInstance，A执行到new语句，B准备执行判断。</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">什么叫指令重排呢，比如A在执行语句ls = new LazySingleton()，看起来是一句话，但这并不是一个原子操作（要么全部执行完，要么全部不执行，不能执行一半），这句话被编译成8条汇编指令，大致做了3件事情：</span></p><ol style=\"\" class=\"list-paddingleft-2\"><li><p style=\"margin: 10px 6.42188px;font-size: inherit;color: inherit;line-height: 1.75em;letter-spacing: 2px;\"><span style=\"font-size: 13px;\">给LazySingleton的实例分配内存。</span></p></li><li><p style=\"margin: 10px 6.42188px;font-size: inherit;color: inherit;line-height: 1.75em;letter-spacing: 2px;\"><span style=\"font-size: 13px;\">初始化LazySingleton的构造器</span></p></li><li><p style=\"margin: 10px 6.42188px;font-size: inherit;color: inherit;line-height: 1.75em;letter-spacing: 2px;\"><span style=\"font-size: 13px;\">将LazySingleton对象指向分配的内存空间（注意到这步ls就非null了）。</span></p></li></ol><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">由于Java编译器允许处理器乱序执行（out-of-order），以及JDK1.5之前JMM（Java Memory Model）中Cache、寄存器到主内存回写顺序的规定，上面的第二点和第三点的顺序是无法保证的，也就是说，执行顺序可能是1-2-3也可能是1-3-2，如果是1-3-2，并且在3执行完毕、2未执行之前，被切换到线程B上，这时候LazySingleton因为已经在线程A内执行过了第三点，ls已经是非空了，所以线程B直接拿走ls，然后使用，然后顺理成章地报错，而且这种难以跟踪难以重现的错误估计调试上一星期都未必能找得出来。</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">DCL的写法来实现单例是很多技术书、教科书（包括基于JDK1.4以前版本的书籍）上推荐的写法，实际上是不完全正确的。</span><span style=\"font-size: 13px;\">的确在一些语言（譬如C语言）上DCL是可行的，取决于是否能保证2、3步的顺序。</span><span style=\"font-size: 13px;\">在JDK1.5之后，官方已经注意到这种问题，因此调整了JMM、具体化了volatile关键字，因此如果JDK是1.5或之后的版本，只需要将ls的定义加上volatile关键字，就可以禁止编译器重排序，就可以使用DCL的写法来完成单例模式。</span><span style=\"font-size: 13px;\">所以JDK1.5以后可以加上volatile来实现DCL方式的绝对线程安全。</span></p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"hljs java\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//懒汉式单例类.在第一次调用的时候实例化自己(线程安全&nbsp;--&nbsp;双重检查锁定)</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">LazySingleton</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">volatile</span>&nbsp;LazySingleton&nbsp;ls&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//volatile禁止指令重排</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">LazySingleton</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;LazySingleton&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">getInstance</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(ls&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//双重检查</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">synchronized</span>&nbsp;(LazySingleton.class)&nbsp;{&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//锁住整个类&nbsp;&nbsp;</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(ls&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//双重检查</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ls&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;LazySingleton();&nbsp;&nbsp;&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;ls;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">DCL方式要小心使用，需要了解具体的语言编译器，在禁止编译器指令重排后，才能保证绝对线程安全。</strong></span><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\"></strong></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">（3）静态内部类</strong></p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"hljs java\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//懒汉式单例类.在第一次调用的时候实例化自己(线程安全&nbsp;--&nbsp;静态内部类)</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">LazySingleton</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">LazySingleton</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;LazySingleton&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">getInstance</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;InnerClass.ls;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">InnerClass</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;LazySingleton&nbsp;ls&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;LazySingleton();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">利用了classloader的机制来保证初始化单例时只有一个线程，所以也是线程安全的。</span></p><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">破坏单例模式</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">1. 反射</strong></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">以最简单而且线程安全的\"饿汉模式\"来进行测试。</span></p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"hljs delphi\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//获得构造器</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Constructor</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">con</span>&nbsp;=&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Singleton</span>.<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>.<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">getDeclaredConstructor</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>;</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//设置为可访问</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />con.setAccessible(true);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//构造两个不同的对象</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />Singleton&nbsp;singletonA&nbsp;=&nbsp;(Singleton)con.newInstance();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />Singleton&nbsp;singletonB&nbsp;=&nbsp;(Singleton)con.newInstance();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//验证是否是相同对象</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />System.<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">out</span>.println(singletonA.equals(singletonB));<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">最后的比较结果是false，反射可以访问类里面所有的私有属性和方法。</span><span style=\"font-size: 13px;\">所以反射访问私有构造器是可以非常容易的创建多个对象实例，从而破坏单例模式。</span><span style=\"font-size: 13px;\">简单的处理方法就是在私有构造器里面进行判断，禁止进行反射,但是也仅限于饿汉的写法，懒汉的还是不能避免。</span></p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"hljs cs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//饿汉式单例类.线程安全.避免反射创建</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Singleton</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;Singleton&nbsp;ss&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Singleton();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//避免反射和多类加载器破坏</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Singleton</span>(<span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"></span>)&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(Singleton.ss&nbsp;!=&nbsp;<span class=\"hljs-literal\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Exception(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"Singleton&nbsp;can&nbsp;not&nbsp;use&nbsp;Reflection\"</span>);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;Singleton&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">getInstance</span>(<span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"></span>)&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;ss;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">2.序列化和反序列化</strong></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">还以最简单而且线程安全的\"饿汉模式\"写法来进行测试。</span></p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"hljs cs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\">Singleton&nbsp;instanceA&nbsp;=&nbsp;Singleton.getInstance();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />ObjectOutputStream&nbsp;oos&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;ObjectOutputStream(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileOutputStream(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"sersingle_file\"</span>));<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />oos.writeObject(instanceA);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />File&nbsp;file&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;File(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"sersingle_file\"</span>);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />ObjectInputStream&nbsp;ois&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;ObjectInputStream(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;FileInputStream(file));<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />Singleton&nbsp;instanceB&nbsp;=&nbsp;(Singleton)&nbsp;ois.readObject();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />System.<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">out</span>.println(singletonA.<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">equals</span>(singletonB));<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">最后的比较结果是false,说明两个对象不一样，所以序列化和反序列化也破坏单例模式。</span><span style=\"font-size: 13px;\">解决方法是在单例中添加readResolve方法。</span></p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"hljs java\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//饿汉式单例类.避免反序列破坏</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Singleton</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Serializable</span></span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;Singleton&nbsp;ss&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Singleton();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Singleton</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;Singleton&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">getInstance</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;ss;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//避免反序列破坏</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">readResolve</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;ss;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">最佳实践</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">枚举</strong></p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"hljs cpp\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">enum</span>&nbsp;EnumSingleton&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;INSTANCE;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />EnumSingleton&nbsp;enumSingletonA&nbsp;=&nbsp;EnumSingleton.INSTANCE;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />EnumSingleton&nbsp;enumSingletonB&nbsp;=&nbsp;EnumSingleton.INSTANCE;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />assertEquals(enumSingletonA,&nbsp;enumSingletonB);&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;true</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">Joshua Bloch, Effective Java 2nd Edition p.18</p><blockquote style=\"padding: 15px 15px 15px 1rem;color: rgb(129, 145, 152);border-left-width: 6px;border-left-color: rgb(220, 230, 240);font-size: 0.9em;line-height: inherit;background: rgb(242, 247, 251);overflow: auto;overflow-wrap: normal;word-break: normal;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: 1.75em;letter-spacing: 2px;\">A single-element enum type is the best way to implement a singleton</p><p style=\"font-size: inherit;color: inherit;line-height: 1.75em;letter-spacing: 2px;\">单元素枚举类型是实现单例的最佳方法</p></blockquote><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">有了enum类型修饰，JVM会阻止反射强行构造对象，而且可以在对象被反序列化的时候，保证反序列结果返回同一对象，并且是线程安全的。</span><span style=\"font-size: 13px;\">唯一的不足就是不是延迟加载，单例对象是在枚举类被初始化加载的时候就进行创建了。</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><br  /></p><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">JAVA中单例的应用案例</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 12px;\">http://docs.oracle.com/javase/8/docs/api/java/lang/Runtime.html#getRuntime()</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 12px;\">http://docs.oracle.com/javase/8/docs/api/java/awt/Desktop.html#getDesktop()</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 12px;\">http://docs.oracle.com/javase/8/docs/api/java/lang/System.html#getSecurityManager()</span></p><p><br  /></p><p><br  /></p><p style=\"text-align: center;\"><img class=\"\"       style=\"height: 156px;text-align: center;white-space: normal;box-shadow: rgb(170, 170, 170) 0em 0em 1em 0px;width: 156px;border-radius: 0px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361477.jpeg\" alt=\"你真的了解单例模式吗？\" title=\"你真的了解单例模式吗？\"  /></p><p><br  /></p> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（逐码）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/y3V--xTlKSODVvqZKxVAqw\" rel=\"noopener noreferrer\">你真的了解单例模式吗？</a></p></blockquote></div>', '你真的了解单例模式吗？', '', 'publish', 'open', 'open', '', 'c815aa0ecd', '', '', '2020-03-28 10:11:17', '2020-03-28 02:11:17', '', 0, 'https://www.javashitang.com/?p=71', 0, 'post', '', 0);
INSERT INTO `wp_posts` VALUES (72, 1, '2020-03-28 10:11:16', '2020-03-28 02:11:16', '', 'beepress4-1585361476', '', 'inherit', 'open', 'closed', '', 'beepress4-1585361476', '', '', '2020-03-28 10:11:16', '2020-03-28 02:11:16', '', 71, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361476.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (73, 1, '2020-03-28 10:11:16', '2020-03-28 02:11:16', '', 'beepress0-1585361476', '', 'inherit', 'open', 'closed', '', 'beepress0-1585361476', '', '', '2020-03-28 10:11:16', '2020-03-28 02:11:16', '', 71, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361476.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (74, 1, '2020-03-28 10:11:17', '2020-03-28 02:11:17', '', 'beepress10-1585361477', '', 'inherit', 'open', 'closed', '', 'beepress10-1585361477', '', '', '2020-03-28 10:11:17', '2020-03-28 02:11:17', '', 71, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361477.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (75, 1, '2020-03-28 10:11:17', '2020-03-28 02:11:17', '', 'beepress0-1585361477', '', 'inherit', 'open', 'closed', '', 'beepress0-1585361477', '', '', '2020-03-28 10:11:17', '2020-03-28 02:11:17', '', 71, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361477.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (76, 1, '2020-03-28 10:11:17', '2020-03-28 02:11:17', '<div class=\"bpp-post-content\">                                                                                                                            <p ><br  /></p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">单例Singleton</span></h3><p><span style=\"font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;text-align: start;background-color: rgb(255, 255, 255);color: inherit;line-height: inherit;font-size: 13px;\">今天我们来聊聊java中应用非常广泛的单例模式，首先你可以在脑海中想一想我们在平常的开发中哪些地方用到了单例，是怎样实现的，如果让你实现一个单例你有哪些方法呢？</span><span style=\"line-height: inherit;color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 14px;letter-spacing: 2px;text-align: start;background-color: rgb(255, 255, 255);\"></span></p><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">用途</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">确保一个类只有一个实例，并提供对其的全局访问点。</span><span style=\"font-size: 13px;\">从而保证数据内容的一致性，节省内存资源。</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">例如，Windows 中只能打开一个任务管理器，这样可以避免因打开多个任务管理器窗口而出现各个窗口显示内容不一致的情况，或造成内存资源的浪费。</span><span style=\"font-size: 13px;\">每台计算机可以有若干通信端口，系统应当集中管理这些通信端口，以避免一个通信端口同时被两个请求同时调用。</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">在计算机系统中，多线程中的线程池、显卡的驱动程序对象、打印机的后台处理服务、应用程序的日志对象、数据库的连接池、网站的计数器、Web 应用的配置对象、应用程序中的对话框、系统中的缓存等常被设计成单例。</span><span style=\"font-size: 13px;\">这些应用都或多或少具有资源管理器的功能。</span><span style=\"font-size: 13px;\">总之，选择单例模式就是为了避免不一致状态。</span></p><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">定义</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">单例（Singleton）模式的定义：</span><span style=\"font-size: 13px;\">指一个类只有一个实例，且该类能自行创建这个实例的一种模式。</span></p><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">特点</span></h4><ol style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"color: inherit;line-height: inherit;font-size: 13px;\">单例类只有一个实例对象；</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 13px;\">该单例对象必须由单例类自行创建；</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 13px;\">单例类对外提供一个访问该单例的全局访问点；</span></p></li></ol><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">代码实现</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">让类的构造函数私有，在类内创建一个静态对象，并创建一个公有的静态方法访问这个对象。</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">写法上有2种方式:</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">[1]立即加载方式, 也叫“饿汉模式”</strong></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">单例在<span style=\"color: inherit;line-height: inherit;\">类加载初始化</span>时就创建好一个静态的对象供外部使用，除非系统重启，否则这个对象不会改变，不同线程来调用getInstance()的时候，获取的都是类初始化就创建的同一个实例，所以本身就是线程安全的。</span></p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"hljs cpp\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//饿汉式单例类.在类初始化时，已经自行实例化(线程安全)</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Singleton</span>&nbsp;{</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;Singleton&nbsp;ss&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Singleton();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Singleton</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;Singleton&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">getInstance</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;ss;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">唯一的缺点就是实例创建过早，类初始化就创建了，还没调用就已经存在了，容易造成内存资源浪费。</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">[2]延迟加载方式, 也叫“懒汉模式”</strong></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">饿汉是类一旦加载，就把单例初始化完成，保证调用getInstance()的时候，单例是已经存在的;</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">而懒汉比较懒，只有当调用getInstance()的时候，才会去初始化这个单例。</span></p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"hljs cs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//懒汉式单例类.在第一次调用的时候实例化自己(非线程安全)</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">LazySingleton</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;LazySingleton&nbsp;ls&nbsp;=&nbsp;<span class=\"hljs-literal\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">LazySingleton</span>(<span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"></span>)&nbsp;</span>{}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;LazySingleton&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">getInstance</span>(<span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"></span>)&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(ls&nbsp;==&nbsp;<span class=\"hljs-literal\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ls&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;LazySingleton();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;ls;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">但是这种懒汉式单例的实现没有考虑线程安全问题，它是线程不安全的。</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">为什么说这种代码写法线程不安全呢？</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">假设LazySingleton类刚刚被初始化，ls对象还是空，这时候两个线程A和B同时访问getInstance方法：</span></p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"你真的了解单例模式吗？\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361476.png\" alt=\"你真的了解单例模式吗？\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">因为ls是null，所以A和B两个线程同时通过了条件判断，开始执行new操作,显然ls被构建了两次。</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">要保证懒汉式的线程安全，有下面3种方法。</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">（1）使getInstance()同步</strong></p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"hljs java\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//懒汉式单例类.在第一次调用的时候实例化自己(线程安全&nbsp;--&nbsp;同步法)</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">LazySingleton</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">volatile</span>&nbsp;LazySingleton&nbsp;ls&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//保证ls在所有线程中同步</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">LazySingleton</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">synchronized</span>&nbsp;LazySingleton&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">getInstance</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//getInstance&nbsp;方法前加同步</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(ls&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ls&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;LazySingleton();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;ls;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">在方法调用上加了同步，虽然线程安全了，但是每次都要同步，会影响性能，毕竟大多数情况下是不需要同步的；</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">（2）双重检查锁定DCL(double checked locking)</strong></p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"hljs java\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//懒汉式单例类.在第一次调用的时候实例化自己(非绝对线程安全[取决于编译器]&nbsp;--&nbsp;双重检查锁定)</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">LazySingleton</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;LazySingleton&nbsp;ls&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">LazySingleton</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;LazySingleton&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">getInstance</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(ls&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//双重检查</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">synchronized</span>&nbsp;(LazySingleton.class)&nbsp;{&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//锁住整个类&nbsp;&nbsp;</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(ls&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//双重检查</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ls&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;LazySingleton();&nbsp;&nbsp;&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;ls;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">在getInstance中做了两次null检查，第一次是为了提高运行效率；</span><span style=\"font-size: 13px;\">第二次是为了进行同步，避免多线程问题，进入synchronized临界区以后，还要再做一次判空。</span><span style=\"font-size: 13px;\">因为当两个线程同时访问的时候，线程A构建完对象，线程B也已经通过了第一次的判空验证，不做第二次判空的话，线程B还是会再次构建ls对象。</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">虽然上面这样写逻辑上看没什么问题，但是和编译器有关，不算绝对的线程安全。</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">以java为例，需要了解JVM编译器的<strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">指令重排</strong><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\"></strong></span></p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"你真的了解单例模式吗？\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361477.png\" alt=\"你真的了解单例模式吗？\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">当AB两线程同时调用getInstance，A执行到new语句，B准备执行判断。</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">什么叫指令重排呢，比如A在执行语句ls = new LazySingleton()，看起来是一句话，但这并不是一个原子操作（要么全部执行完，要么全部不执行，不能执行一半），这句话被编译成8条汇编指令，大致做了3件事情：</span></p><ol style=\"\" class=\"list-paddingleft-2\"><li><p style=\"margin: 10px 6.42188px;font-size: inherit;color: inherit;line-height: 1.75em;letter-spacing: 2px;\"><span style=\"font-size: 13px;\">给LazySingleton的实例分配内存。</span></p></li><li><p style=\"margin: 10px 6.42188px;font-size: inherit;color: inherit;line-height: 1.75em;letter-spacing: 2px;\"><span style=\"font-size: 13px;\">初始化LazySingleton的构造器</span></p></li><li><p style=\"margin: 10px 6.42188px;font-size: inherit;color: inherit;line-height: 1.75em;letter-spacing: 2px;\"><span style=\"font-size: 13px;\">将LazySingleton对象指向分配的内存空间（注意到这步ls就非null了）。</span></p></li></ol><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">由于Java编译器允许处理器乱序执行（out-of-order），以及JDK1.5之前JMM（Java Memory Model）中Cache、寄存器到主内存回写顺序的规定，上面的第二点和第三点的顺序是无法保证的，也就是说，执行顺序可能是1-2-3也可能是1-3-2，如果是1-3-2，并且在3执行完毕、2未执行之前，被切换到线程B上，这时候LazySingleton因为已经在线程A内执行过了第三点，ls已经是非空了，所以线程B直接拿走ls，然后使用，然后顺理成章地报错，而且这种难以跟踪难以重现的错误估计调试上一星期都未必能找得出来。</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">DCL的写法来实现单例是很多技术书、教科书（包括基于JDK1.4以前版本的书籍）上推荐的写法，实际上是不完全正确的。</span><span style=\"font-size: 13px;\">的确在一些语言（譬如C语言）上DCL是可行的，取决于是否能保证2、3步的顺序。</span><span style=\"font-size: 13px;\">在JDK1.5之后，官方已经注意到这种问题，因此调整了JMM、具体化了volatile关键字，因此如果JDK是1.5或之后的版本，只需要将ls的定义加上volatile关键字，就可以禁止编译器重排序，就可以使用DCL的写法来完成单例模式。</span><span style=\"font-size: 13px;\">所以JDK1.5以后可以加上volatile来实现DCL方式的绝对线程安全。</span></p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"hljs java\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//懒汉式单例类.在第一次调用的时候实例化自己(线程安全&nbsp;--&nbsp;双重检查锁定)</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">LazySingleton</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">volatile</span>&nbsp;LazySingleton&nbsp;ls&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//volatile禁止指令重排</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">LazySingleton</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;LazySingleton&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">getInstance</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(ls&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//双重检查</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">synchronized</span>&nbsp;(LazySingleton.class)&nbsp;{&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//锁住整个类&nbsp;&nbsp;</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(ls&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//双重检查</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ls&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;LazySingleton();&nbsp;&nbsp;&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;ls;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">DCL方式要小心使用，需要了解具体的语言编译器，在禁止编译器指令重排后，才能保证绝对线程安全。</strong></span><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\"></strong></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">（3）静态内部类</strong></p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"hljs java\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//懒汉式单例类.在第一次调用的时候实例化自己(线程安全&nbsp;--&nbsp;静态内部类)</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">LazySingleton</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">LazySingleton</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;LazySingleton&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">getInstance</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;InnerClass.ls;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">InnerClass</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;LazySingleton&nbsp;ls&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;LazySingleton();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">利用了classloader的机制来保证初始化单例时只有一个线程，所以也是线程安全的。</span></p><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">破坏单例模式</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">1. 反射</strong></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">以最简单而且线程安全的\"饿汉模式\"来进行测试。</span></p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"hljs delphi\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//获得构造器</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Constructor</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">con</span>&nbsp;=&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Singleton</span>.<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>.<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">getDeclaredConstructor</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>;</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//设置为可访问</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />con.setAccessible(true);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//构造两个不同的对象</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />Singleton&nbsp;singletonA&nbsp;=&nbsp;(Singleton)con.newInstance();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />Singleton&nbsp;singletonB&nbsp;=&nbsp;(Singleton)con.newInstance();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//验证是否是相同对象</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />System.<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">out</span>.println(singletonA.equals(singletonB));<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">最后的比较结果是false，反射可以访问类里面所有的私有属性和方法。</span><span style=\"font-size: 13px;\">所以反射访问私有构造器是可以非常容易的创建多个对象实例，从而破坏单例模式。</span><span style=\"font-size: 13px;\">简单的处理方法就是在私有构造器里面进行判断，禁止进行反射,但是也仅限于饿汉的写法，懒汉的还是不能避免。</span></p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"hljs cs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//饿汉式单例类.线程安全.避免反射创建</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Singleton</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;Singleton&nbsp;ss&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Singleton();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//避免反射和多类加载器破坏</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Singleton</span>(<span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"></span>)&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(Singleton.ss&nbsp;!=&nbsp;<span class=\"hljs-literal\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Exception(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"Singleton&nbsp;can&nbsp;not&nbsp;use&nbsp;Reflection\"</span>);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;Singleton&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">getInstance</span>(<span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"></span>)&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;ss;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">2.序列化和反序列化</strong></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">还以最简单而且线程安全的\"饿汉模式\"写法来进行测试。</span></p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"hljs cs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\">Singleton&nbsp;instanceA&nbsp;=&nbsp;Singleton.getInstance();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />ObjectOutputStream&nbsp;oos&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;ObjectOutputStream(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FileOutputStream(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"sersingle_file\"</span>));<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />oos.writeObject(instanceA);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />File&nbsp;file&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;File(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"sersingle_file\"</span>);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />ObjectInputStream&nbsp;ois&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;ObjectInputStream(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;FileInputStream(file));<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />Singleton&nbsp;instanceB&nbsp;=&nbsp;(Singleton)&nbsp;ois.readObject();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />System.<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">out</span>.println(singletonA.<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">equals</span>(singletonB));<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">最后的比较结果是false,说明两个对象不一样，所以序列化和反序列化也破坏单例模式。</span><span style=\"font-size: 13px;\">解决方法是在单例中添加readResolve方法。</span></p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"hljs java\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//饿汉式单例类.避免反序列破坏</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Singleton</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Serializable</span></span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;Singleton&nbsp;ss&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Singleton();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Singleton</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;Singleton&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">getInstance</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;ss;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//避免反序列破坏</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">readResolve</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;ss;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">最佳实践</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">枚举</strong></p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"hljs cpp\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);display: block;font-family: Consolas, Inconsolata, Courier, monospace;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">enum</span>&nbsp;EnumSingleton&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;INSTANCE;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />EnumSingleton&nbsp;enumSingletonA&nbsp;=&nbsp;EnumSingleton.INSTANCE;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />EnumSingleton&nbsp;enumSingletonB&nbsp;=&nbsp;EnumSingleton.INSTANCE;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />assertEquals(enumSingletonA,&nbsp;enumSingletonB);&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;true</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">Joshua Bloch, Effective Java 2nd Edition p.18</p><blockquote style=\"padding: 15px 15px 15px 1rem;color: rgb(129, 145, 152);border-left-width: 6px;border-left-color: rgb(220, 230, 240);font-size: 0.9em;line-height: inherit;background: rgb(242, 247, 251);overflow: auto;overflow-wrap: normal;word-break: normal;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: 1.75em;letter-spacing: 2px;\">A single-element enum type is the best way to implement a singleton</p><p style=\"font-size: inherit;color: inherit;line-height: 1.75em;letter-spacing: 2px;\">单元素枚举类型是实现单例的最佳方法</p></blockquote><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 13px;\">有了enum类型修饰，JVM会阻止反射强行构造对象，而且可以在对象被反序列化的时候，保证反序列结果返回同一对象，并且是线程安全的。</span><span style=\"font-size: 13px;\">唯一的不足就是不是延迟加载，单例对象是在枚举类被初始化加载的时候就进行创建了。</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><br  /></p><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">JAVA中单例的应用案例</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 12px;\">http://docs.oracle.com/javase/8/docs/api/java/lang/Runtime.html#getRuntime()</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 12px;\">http://docs.oracle.com/javase/8/docs/api/java/awt/Desktop.html#getDesktop()</span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: 12px;\">http://docs.oracle.com/javase/8/docs/api/java/lang/System.html#getSecurityManager()</span></p><p><br  /></p><p><br  /></p><p style=\"text-align: center;\"><img class=\"\"       style=\"height: 156px;text-align: center;white-space: normal;box-shadow: rgb(170, 170, 170) 0em 0em 1em 0px;width: 156px;border-radius: 0px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361477.jpeg\" alt=\"你真的了解单例模式吗？\" title=\"你真的了解单例模式吗？\"  /></p><p><br  /></p> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（逐码）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/y3V--xTlKSODVvqZKxVAqw\" rel=\"noopener noreferrer\">你真的了解单例模式吗？</a></p></blockquote></div>', '你真的了解单例模式吗？', '', 'inherit', 'closed', 'closed', '', '71-revision-v1', '', '', '2020-03-28 10:11:17', '2020-03-28 02:11:17', '', 71, 'https://www.javashitang.com/?p=76', 0, 'revision', '', 0);
INSERT INTO `wp_posts` VALUES (77, 1, '2019-05-19 09:52:55', '2020-03-28 02:11:45', '<div class=\"bpp-post-content\">                                                                                                                            <p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\" ><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">bitchat</strong>&nbsp;是一个基于 Netty 的 IM 即时通讯框架</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">项目地址：<br style=\"font-size: inherit;color: inherit;line-height: inherit;\"  />https://github.com/all4you/bitchat</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><br  /></p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361506.jpg\" alt=\"Netty实战：设计一个IM框架\" title=\"Netty实战：设计一个IM框架\"  /></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><br  /></p><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">快速开始</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">bitchat-example</strong>&nbsp;模块提供了一个服务端与客户端的实现示例，可以参照该示例进行自己的业务实现。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">启动服务端</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">要启动服务端，需要获取一个 Server 的实例，可以通过 ServerFactory 来获取。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">目前只实现了单机模式下的 Server ，通过 SimpleServerFactory 只需要定义一个端口即可获取一个单机的 Server 实例，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">StandaloneServerApplication</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">main</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(String[]&nbsp;args)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Server&nbsp;server&nbsp;=&nbsp;SimpleServerFactory.getInstance()<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.newServer(<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">8864</span>);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server.start();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">服务端启动成功后，将显示如下信息：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"Netty实战：设计一个IM框架\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361507.jpeg\" alt=\"Netty实战：设计一个IM框架\"  /></figure><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">启动客户端</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">目前只实现了直连服务器的客户端，通过 SimpleClientFactory 只需要指定一个 ServerAttr 即可获取一个客户端，然后进行客户端与服务端的连接，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">DirectConnectServerClientApplication</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">main</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(String[]&nbsp;args)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Client&nbsp;client&nbsp;=&nbsp;SimpleClientFactory.getInstance()<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.newClient(ServerAttr.getLocalServer(<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">8864</span>));<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;client.connect();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doClientBiz(client);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">客户端连接上服务端后，将显示如下信息：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"Netty实战：设计一个IM框架\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361507.jpeg\" alt=\"Netty实战：设计一个IM框架\"  /></figure><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">体验客户端的功能</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">目前客户端提供了三种 Func，分别是：登录，查看在线用户列表，发送单聊消息，每种 Func 有不同的命令格式。</p><h5 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">登录</span></h5><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">通过在客户端中执行以下命令&nbsp;<code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">-lo houyi 123456</code>&nbsp;即可实现登录，目前用户中心还未实现，通过 Mock 的方式实现一个假的用户服务，所以输入任何的用户名密码都会登录成功，并且会为用户创建一个用户id。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">登录成功后，显示如下：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"Netty实战：设计一个IM框架\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361507.jpeg\" alt=\"Netty实战：设计一个IM框架\"  /></figure><h5 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">查看在线用户</span></h5><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">再启动一个客户端，并且也执行登录，登录成功后，可以执行&nbsp;<code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">-lu</code>&nbsp;命令，获取在线用户列表，目前用户是保存在内存中，获取的结果如下所示：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"Netty实战：设计一个IM框架\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361508.jpeg\" alt=\"Netty实战：设计一个IM框架\"  /></figure><h5 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">发送单聊信息</span></h5><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">用 gris 这个用户向 houyi 这个用户发送单聊信息，只要执行&nbsp;<code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">-pc 1 hello,houyi</code>&nbsp;命令即可</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">其中第二个参数数要发送消息给那个用户的用户id，第三个参数是消息内容</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">消息发送方，发送完消息：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"Netty实战：设计一个IM框架\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361508.jpeg\" alt=\"Netty实战：设计一个IM框架\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">消息接收方，接收到消息：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"Netty实战：设计一个IM框架\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361508.jpeg\" alt=\"Netty实战：设计一个IM框架\"  /></figure><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">客户端断线重连</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">客户端和服务端之间维持着心跳，双方都会检查连接是否可用，客户端每隔5s会向服务端发送一个 PingPacket，而服务端接收到这个 PingPacket 之后，会回复一个 PongPacket，这样表示双方都是健康的。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">当因为某种原因，服务端没有收到客户端发送的消息，服务端将会把该客户端的连接断开，同样的客户端也会做这样的检查。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">当客户端与服务端之间的连接断开之后，将会触发客户端 HealthyChecker 的 channelInactive 方法，从而进行客户端的断线重连。</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"Netty实战：设计一个IM框架\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585361509.jpeg\" alt=\"Netty实战：设计一个IM框架\"  /></figure><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">整体架构</span></h2><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">单机版</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">单机版的架构只涉及到服务端、客户端，另外有两者之间的协议层，如下图所示：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"Netty实战：设计一个IM框架\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585361509.jpeg\" alt=\"Netty实战：设计一个IM框架\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">除了服务端和客户端之外，还有三大中心：消息中心，用户中心，链接中心。</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">消息中心：主要负责消息的存储与历史、离线消息的查询</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">用户中心：主要负责用户和群组相关的服务</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">链接中心：主要负责保存客户端的链接，服务端从链接中心获取客户端的链接，向其推送消息</span></p></li></ul><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">集群版</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">单机版无法做到高可用，性能与可服务的用户数也有一定的限制，所以需要有可扩展的集群版，集群版在单机版的基础上增加了一个路由层，客户端通过路由层来获得可用的服务端地址，然后与服务端进行通讯，如下图所示：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"Netty实战：设计一个IM框架\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585361510.jpeg\" alt=\"Netty实战：设计一个IM框架\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">客户端发送消息给另一个用户，服务端接收到这个请求后，从 Connection中心中获取目标用户“挂”在哪个服务端下，如果在自己名下，那最简单直接将消息推送给目标用户即可，如果在其他服务端，则需要将该请求转交给目标服务端，让目标服务端将消息推送给目标用户。</p><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">自定义协议</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">通过一个自定义协议来实现服务端与客户端之间的通讯，协议中有如下几个字段：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\">*<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*&nbsp;&lt;p&gt;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*&nbsp;The&nbsp;structure&nbsp;of&nbsp;a&nbsp;Packet&nbsp;is&nbsp;like&nbsp;blow:<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*&nbsp;+----------+----------+----------------------------+<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*&nbsp;|&nbsp;&nbsp;size&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;value&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;intro&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*&nbsp;+----------+----------+----------------------------+<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*&nbsp;|&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;bytes&nbsp;&nbsp;|&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0xBC</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;magic&nbsp;number&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*&nbsp;|&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;bytes&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;serialize&nbsp;algorithm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*&nbsp;|&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">4</span>&nbsp;bytes&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;packet&nbsp;symbol&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*&nbsp;|&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">4</span>&nbsp;bytes&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;content&nbsp;length&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*&nbsp;|&nbsp;?&nbsp;bytes&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;the&nbsp;content&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*&nbsp;+----------+----------+----------------------------+<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*&nbsp;&lt;/p&gt;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">每个字段的含义</p><table width=\"675\" style=\"width: 556px;\"><thead style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;\"><tr style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\"><th style=\"box-sizing: border-box;padding: 0.5em 1em;text-align: left;border-top-width: 1px;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;background-color: rgb(240, 240, 240);\"><span style=\"font-size: 14px;\"></span><span style=\"font-size: 14px;\">所占字节</span></th><th style=\"box-sizing: border-box;padding: 0.5em 1em;text-align: left;border-top-width: 1px;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;background-color: rgb(240, 240, 240);\"><span style=\"font-size: 14px;\">用途</span></th></tr></thead><tbody style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 0px;border-style: initial;border-color: initial;\"><tr style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\"><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\"><span style=\"font-size: 14px;\">1</span></td><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\"><span style=\"font-size: 14px;\">魔数，默认为 0xBC</span></td></tr><tr style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\"><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\"><span style=\"font-size: 14px;\">1</span></td><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\"><span style=\"font-size: 14px;\">序列化的算法</span></td></tr><tr style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\"><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\"><span style=\"font-size: 14px;\">4</span></td><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\"><span style=\"font-size: 14px;\">Packet 的类型</span></td></tr><tr style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\"><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\"><span style=\"font-size: 14px;\">4</span></td><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\"><span style=\"font-size: 14px;\">Packet 的内容长度</span></td></tr><tr style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\"><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\"><span style=\"font-size: 14px;\">?</span></td><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\"><span style=\"font-size: 14px;\">Packet 的内容</span></td></tr></tbody></table><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">序列化算法将会决定该 Packet 在编解码时，使用何种序列化方式。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">Packet 的类型将会决定到达服务端的字节流将被反序列化为何种 Packet，也决定了该 Packet 将会被哪个 PacketHandler 进行处理。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">内容长度将会解决 Packet 的拆包与粘包问题，服务端在解析字节流时，将会等到字节的长度达到内容的长度时，才进行字节的读取。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">除此之外，Packet 中还会存储一个 sync 字段，该字段将指定服务端在处理该 Packet 的数据时是否需要使用异步的业务线程池来处理。</p><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">健康检查</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">服务端与客户端各自维护了一个健康检查的服务，即 Netty 为我们提供的 IdleStateHandler，通过继承该类，并且实现 channelIdle 方法即可实现连接 “空闲” 时的逻辑处理，当出现空闲时，目前我们只关心读空闲，我们既可以认为这条链接出现问题了。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">那么只需要在链接出现问题时，将这条链接关闭即可，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">IdleStateChecker</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">IdleStateHandler</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;DEFAULT_READER_IDLE_TIME&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">15</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;readerTime;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">IdleStateChecker</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;readerIdleTime)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">super</span>(readerIdleTime&nbsp;==&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>&nbsp;?&nbsp;DEFAULT_READER_IDLE_TIME&nbsp;:&nbsp;readerIdleTime,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>,&nbsp;TimeUnit.SECONDS);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;readerTime&nbsp;=&nbsp;readerIdleTime&nbsp;==&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>&nbsp;?&nbsp;DEFAULT_READER_IDLE_TIME&nbsp;:&nbsp;readerIdleTime;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">channelIdle</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(ChannelHandlerContext&nbsp;ctx,&nbsp;IdleStateEvent&nbsp;evt)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.warn(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"[{}]&nbsp;Hasn\'t&nbsp;read&nbsp;data&nbsp;after&nbsp;{}&nbsp;seconds,&nbsp;will&nbsp;close&nbsp;the&nbsp;channel:{}\"</span>,&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IdleStateChecker.class.getSimpleName(),&nbsp;readerTime,&nbsp;ctx.channel());<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.channel().close();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">另外，客户端需要额外再维护一个健康检查器，正常情况下他负责定时向服务端发送心跳，当链接的状态变成 inActive 时，该检查器将负责进行重连，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">HealthyChecker</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">ChannelInboundHandlerAdapter</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;DEFAULT_PING_INTERVAL&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">5</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;Client&nbsp;client;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;pingInterval;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">HealthyChecker</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(Client&nbsp;client,&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;pingInterval)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.notNull(client,&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"client&nbsp;can&nbsp;not&nbsp;be&nbsp;null\"</span>);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">this</span>.client&nbsp;=&nbsp;client;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">this</span>.pingInterval&nbsp;=&nbsp;pingInterval&nbsp;&lt;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>&nbsp;?&nbsp;DEFAULT_PING_INTERVAL&nbsp;:&nbsp;pingInterval;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">channelActive</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(ChannelHandlerContext&nbsp;ctx)</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throws</span>&nbsp;Exception&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">super</span>.channelActive(ctx);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;schedulePing(ctx);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">schedulePing</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(ChannelHandlerContext&nbsp;ctx)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.executor().schedule(()&nbsp;-&gt;&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Channel&nbsp;channel&nbsp;=&nbsp;ctx.channel();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(channel.isActive())&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.debug(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"[{}]&nbsp;Send&nbsp;a&nbsp;PingPacket\"</span>,&nbsp;HealthyChecker.class.getSimpleName());<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;channel.writeAndFlush(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;PingPacket());<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;schedulePing(ctx);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;pingInterval,&nbsp;TimeUnit.SECONDS);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">channelInactive</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(ChannelHandlerContext&nbsp;ctx)</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throws</span>&nbsp;Exception&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.executor().schedule(()&nbsp;-&gt;&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.info(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"[{}]&nbsp;Try&nbsp;to&nbsp;reconnecting...\"</span>,&nbsp;HealthyChecker.class.getSimpleName());<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;client.connect();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">5</span>,&nbsp;TimeUnit.SECONDS);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fireChannelInactive();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">业务线程池</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">我们知道，Netty 中维护着两个 IO 线程池，一个 boss 主要负责链接的建立，另外一个 worker 主要负责链接上的数据读写，我们不应该使用 IO 线程来处理我们的业务，因为这样很可能会对 IO 线程造成阻塞，导致新链接无法及时建立或者数据无法及时读写。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">为了解决这个问题，我们需要在业务线程池中来处理我们的业务逻辑，但是这并不是绝对的，如果我们要执行的逻辑很简单，不会造成太大的阻塞，则可以直接在 IO 线程中处理，比如客户端发送一个 Ping 服务端回复一个 Pong，这种情况是没有必要在业务线程池中进行处理的，因为处理完了最终还是要交给 IO 线程去写数据。但是如果一个业务逻辑需要查询数据库或者读取文件，这种操作往往比较耗时间，所以就需要将这些操作封装起来交给业务线程池去处理。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">服务端允许客户端在传输的 Packet 中指定采用何种方式进行业务的处理，服务端在将字节流解码成 Packet 之后，会根据 Packet 中的 sync 字段的值，确定怎样对该 Packet 进行处理，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">ServerPacketDispatcher</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">extends</span>&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">SimpleChannelInboundHandler</span>&lt;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Packet</span>&gt;&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">channelRead0</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(ChannelHandlerContext&nbsp;ctx,&nbsp;Packet&nbsp;request)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;if&nbsp;the&nbsp;packet&nbsp;should&nbsp;be&nbsp;handled&nbsp;async</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(request.getAsync()&nbsp;==&nbsp;AsyncHandle.ASYNC)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EventExecutor&nbsp;channelExecutor&nbsp;=&nbsp;ctx.executor();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;create&nbsp;a&nbsp;promise</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Promise&lt;Packet&gt;&nbsp;promise&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;DefaultPromise&lt;&gt;(channelExecutor);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;async&nbsp;execute&nbsp;and&nbsp;get&nbsp;a&nbsp;future</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Future&lt;Packet&gt;&nbsp;future&nbsp;=&nbsp;executor.asyncExecute(promise,&nbsp;ctx,&nbsp;request);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;future.addListener(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;GenericFutureListener&lt;Future&lt;Packet&gt;&gt;()&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">operationComplete</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(Future&lt;Packet&gt;&nbsp;f)</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throws</span>&nbsp;Exception&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(f.isSuccess())&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Packet&nbsp;response&nbsp;=&nbsp;f.get();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeResponse(ctx,&nbsp;response);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">else</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;sync&nbsp;execute&nbsp;and&nbsp;get&nbsp;the&nbsp;response&nbsp;packet</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Packet&nbsp;response&nbsp;=&nbsp;executor.execute(ctx,&nbsp;request);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeResponse(ctx,&nbsp;response);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">不止是IM框架</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">bitchat</strong>&nbsp;除了可以作为 IM 框架之外，还可以作为一个通用的通讯框架。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">Packet 作为通讯的载体，通过继承 AbstractPacket 即可快速实现自己的业务，搭配 PacketHandler 作为数据处理器即可实现客户端与服务端的通讯。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">更多信息请到我的github中查看：</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">https://github.com/all4you/bitchat</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><br  /></p><p style=\"white-space: normal;\"><span style=\"color: rgb(255, 104, 39);font-size: 16px;\">推荐阅读</span></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484172&amp;idx=1&amp;sn=8f9eaec88e04588e76b0c4958162e6af&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">线程池是怎样工作的</span></a></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484193&amp;idx=1&amp;sn=0953118972d8fdff36fae804eb5fcc8b&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">什么是 Arthas</span></a><br  /></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484110&amp;idx=1&amp;sn=2a3dbfb804f282160e288d9178b2665e&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">怎样编写一个 Web 容器</span></a></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484154&amp;idx=1&amp;sn=c99d867ebe79e5b3fa784beff06d52b7&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">更好的使用 Nacos 配置中心</span></a></p><p style=\"white-space: normal;\"><br  /></p><p style=\"white-space: normal;text-align: center;\"><img class=\"\"       style=\"height: 156px;box-shadow: rgb(170, 170, 170) 0em 0em 1em 0px;width: 156px;border-radius: 0px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361510.jpeg\" alt=\"Netty实战：设计一个IM框架\" title=\"Netty实战：设计一个IM框架\"  /></p><p><br  /></p><p style=\"white-space: normal;text-align: right;\"><span style=\"color: rgb(53, 124, 168);font-size: 15px;\">如果文章对你有帮助，欢迎转发支持</span></p><p style=\"white-space: normal;text-align: right;\"><span style=\"font-size: 13px;color: rgb(255, 104, 39);\">如果觉得好看，请点击“好看”哦 ↓↓</span></p> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（逐码）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/Y7Q20Qy-lX_j7bb4Inb-oQ\" rel=\"noopener noreferrer\">Netty实战：设计一个IM框架</a></p></blockquote></div>', 'Netty实战：设计一个IM框架', '', 'publish', 'open', 'open', '', 'd8f86dd3f2', '', '', '2020-03-28 10:11:50', '2020-03-28 02:11:50', '', 0, 'https://www.javashitang.com/?p=77', 0, 'post', '', 0);
INSERT INTO `wp_posts` VALUES (78, 1, '2020-03-28 10:11:46', '2020-03-28 02:11:46', '', 'beepress6-1585361506', '', 'inherit', 'open', 'closed', '', 'beepress6-1585361506', '', '', '2020-03-28 10:11:46', '2020-03-28 02:11:46', '', 77, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585361506.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (79, 1, '2020-03-28 10:11:46', '2020-03-28 02:11:46', '', 'beepress4-1585361506', '', 'inherit', 'open', 'closed', '', 'beepress4-1585361506', '', '', '2020-03-28 10:11:46', '2020-03-28 02:11:46', '', 77, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361506.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (80, 1, '2020-03-28 10:11:47', '2020-03-28 02:11:47', '', 'beepress0-1585361507', '', 'inherit', 'open', 'closed', '', 'beepress0-1585361507', '', '', '2020-03-28 10:11:47', '2020-03-28 02:11:47', '', 77, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361507.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (81, 1, '2020-03-28 10:11:47', '2020-03-28 02:11:47', '', 'beepress8-1585361507', '', 'inherit', 'open', 'closed', '', 'beepress8-1585361507', '', '', '2020-03-28 10:11:47', '2020-03-28 02:11:47', '', 77, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361507.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (82, 1, '2020-03-28 10:11:47', '2020-03-28 02:11:47', '', 'beepress10-1585361507', '', 'inherit', 'open', 'closed', '', 'beepress10-1585361507', '', '', '2020-03-28 10:11:47', '2020-03-28 02:11:47', '', 77, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361507.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (83, 1, '2020-03-28 10:11:48', '2020-03-28 02:11:48', '', 'beepress9-1585361508', '', 'inherit', 'open', 'closed', '', 'beepress9-1585361508', '', '', '2020-03-28 10:11:48', '2020-03-28 02:11:48', '', 77, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361508.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (84, 1, '2020-03-28 10:11:48', '2020-03-28 02:11:48', '', 'beepress1-1585361508', '', 'inherit', 'open', 'closed', '', 'beepress1-1585361508', '', '', '2020-03-28 10:11:48', '2020-03-28 02:11:48', '', 77, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361508.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (85, 1, '2020-03-28 10:11:48', '2020-03-28 02:11:48', '', 'beepress8-1585361508', '', 'inherit', 'open', 'closed', '', 'beepress8-1585361508', '', '', '2020-03-28 10:11:48', '2020-03-28 02:11:48', '', 77, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361508.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (86, 1, '2020-03-28 10:11:49', '2020-03-28 02:11:49', '', 'beepress7-1585361509', '', 'inherit', 'open', 'closed', '', 'beepress7-1585361509', '', '', '2020-03-28 10:11:49', '2020-03-28 02:11:49', '', 77, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585361509.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (87, 1, '2020-03-28 10:11:49', '2020-03-28 02:11:49', '', 'beepress6-1585361509', '', 'inherit', 'open', 'closed', '', 'beepress6-1585361509', '', '', '2020-03-28 10:11:49', '2020-03-28 02:11:49', '', 77, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585361509.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (88, 1, '2020-03-28 10:11:50', '2020-03-28 02:11:50', '', 'beepress6-1585361510', '', 'inherit', 'open', 'closed', '', 'beepress6-1585361510', '', '', '2020-03-28 10:11:50', '2020-03-28 02:11:50', '', 77, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585361510.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (89, 1, '2020-03-28 10:11:50', '2020-03-28 02:11:50', '', 'beepress0-1585361510', '', 'inherit', 'open', 'closed', '', 'beepress0-1585361510', '', '', '2020-03-28 10:11:50', '2020-03-28 02:11:50', '', 77, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361510.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (90, 1, '2020-03-28 10:11:50', '2020-03-28 02:11:50', '<div class=\"bpp-post-content\">                                                                                                                            <p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\" ><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">bitchat</strong>&nbsp;是一个基于 Netty 的 IM 即时通讯框架</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">项目地址：<br style=\"font-size: inherit;color: inherit;line-height: inherit;\"  />https://github.com/all4you/bitchat</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><br  /></p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361506.jpg\" alt=\"Netty实战：设计一个IM框架\" title=\"Netty实战：设计一个IM框架\"  /></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><br  /></p><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">快速开始</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">bitchat-example</strong>&nbsp;模块提供了一个服务端与客户端的实现示例，可以参照该示例进行自己的业务实现。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">启动服务端</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">要启动服务端，需要获取一个 Server 的实例，可以通过 ServerFactory 来获取。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">目前只实现了单机模式下的 Server ，通过 SimpleServerFactory 只需要定义一个端口即可获取一个单机的 Server 实例，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">StandaloneServerApplication</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">main</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(String[]&nbsp;args)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Server&nbsp;server&nbsp;=&nbsp;SimpleServerFactory.getInstance()<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.newServer(<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">8864</span>);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;server.start();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">服务端启动成功后，将显示如下信息：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"Netty实战：设计一个IM框架\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361507.jpeg\" alt=\"Netty实战：设计一个IM框架\"  /></figure><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">启动客户端</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">目前只实现了直连服务器的客户端，通过 SimpleClientFactory 只需要指定一个 ServerAttr 即可获取一个客户端，然后进行客户端与服务端的连接，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">DirectConnectServerClientApplication</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">main</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(String[]&nbsp;args)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Client&nbsp;client&nbsp;=&nbsp;SimpleClientFactory.getInstance()<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.newClient(ServerAttr.getLocalServer(<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">8864</span>));<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;client.connect();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doClientBiz(client);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">客户端连接上服务端后，将显示如下信息：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"Netty实战：设计一个IM框架\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361507.jpeg\" alt=\"Netty实战：设计一个IM框架\"  /></figure><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">体验客户端的功能</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">目前客户端提供了三种 Func，分别是：登录，查看在线用户列表，发送单聊消息，每种 Func 有不同的命令格式。</p><h5 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">登录</span></h5><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">通过在客户端中执行以下命令&nbsp;<code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">-lo houyi 123456</code>&nbsp;即可实现登录，目前用户中心还未实现，通过 Mock 的方式实现一个假的用户服务，所以输入任何的用户名密码都会登录成功，并且会为用户创建一个用户id。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">登录成功后，显示如下：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"Netty实战：设计一个IM框架\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361507.jpeg\" alt=\"Netty实战：设计一个IM框架\"  /></figure><h5 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">查看在线用户</span></h5><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">再启动一个客户端，并且也执行登录，登录成功后，可以执行&nbsp;<code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">-lu</code>&nbsp;命令，获取在线用户列表，目前用户是保存在内存中，获取的结果如下所示：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"Netty实战：设计一个IM框架\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361508.jpeg\" alt=\"Netty实战：设计一个IM框架\"  /></figure><h5 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">发送单聊信息</span></h5><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">用 gris 这个用户向 houyi 这个用户发送单聊信息，只要执行&nbsp;<code style=\"margin-right: 2px;margin-left: 2px;padding: 2px 4px;font-size: inherit;color: rgb(233, 105, 0);line-height: inherit;border-radius: 4px;background: rgb(248, 248, 248);\">-pc 1 hello,houyi</code>&nbsp;命令即可</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">其中第二个参数数要发送消息给那个用户的用户id，第三个参数是消息内容</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">消息发送方，发送完消息：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"Netty实战：设计一个IM框架\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361508.jpeg\" alt=\"Netty实战：设计一个IM框架\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">消息接收方，接收到消息：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"Netty实战：设计一个IM框架\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361508.jpeg\" alt=\"Netty实战：设计一个IM框架\"  /></figure><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">客户端断线重连</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">客户端和服务端之间维持着心跳，双方都会检查连接是否可用，客户端每隔5s会向服务端发送一个 PingPacket，而服务端接收到这个 PingPacket 之后，会回复一个 PongPacket，这样表示双方都是健康的。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">当因为某种原因，服务端没有收到客户端发送的消息，服务端将会把该客户端的连接断开，同样的客户端也会做这样的检查。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">当客户端与服务端之间的连接断开之后，将会触发客户端 HealthyChecker 的 channelInactive 方法，从而进行客户端的断线重连。</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"Netty实战：设计一个IM框架\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585361509.jpeg\" alt=\"Netty实战：设计一个IM框架\"  /></figure><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">整体架构</span></h2><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">单机版</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">单机版的架构只涉及到服务端、客户端，另外有两者之间的协议层，如下图所示：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"Netty实战：设计一个IM框架\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585361509.jpeg\" alt=\"Netty实战：设计一个IM框架\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">除了服务端和客户端之外，还有三大中心：消息中心，用户中心，链接中心。</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">消息中心：主要负责消息的存储与历史、离线消息的查询</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">用户中心：主要负责用户和群组相关的服务</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">链接中心：主要负责保存客户端的链接，服务端从链接中心获取客户端的链接，向其推送消息</span></p></li></ul><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">集群版</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">单机版无法做到高可用，性能与可服务的用户数也有一定的限制，所以需要有可扩展的集群版，集群版在单机版的基础上增加了一个路由层，客户端通过路由层来获得可用的服务端地址，然后与服务端进行通讯，如下图所示：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"Netty实战：设计一个IM框架\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585361510.jpeg\" alt=\"Netty实战：设计一个IM框架\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">客户端发送消息给另一个用户，服务端接收到这个请求后，从 Connection中心中获取目标用户“挂”在哪个服务端下，如果在自己名下，那最简单直接将消息推送给目标用户即可，如果在其他服务端，则需要将该请求转交给目标服务端，让目标服务端将消息推送给目标用户。</p><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">自定义协议</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">通过一个自定义协议来实现服务端与客户端之间的通讯，协议中有如下几个字段：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\">*<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*&nbsp;&lt;p&gt;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*&nbsp;The&nbsp;structure&nbsp;of&nbsp;a&nbsp;Packet&nbsp;is&nbsp;like&nbsp;blow:<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*&nbsp;+----------+----------+----------------------------+<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*&nbsp;|&nbsp;&nbsp;size&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;value&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;intro&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*&nbsp;+----------+----------+----------------------------+<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*&nbsp;|&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;bytes&nbsp;&nbsp;|&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0xBC</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;magic&nbsp;number&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*&nbsp;|&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;bytes&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;serialize&nbsp;algorithm&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*&nbsp;|&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">4</span>&nbsp;bytes&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;packet&nbsp;symbol&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*&nbsp;|&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">4</span>&nbsp;bytes&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;content&nbsp;length&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*&nbsp;|&nbsp;?&nbsp;bytes&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;the&nbsp;content&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*&nbsp;+----------+----------+----------------------------+<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*&nbsp;&lt;/p&gt;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />*<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">每个字段的含义</p><table width=\"675\" style=\"width: 556px;\"><thead style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;\"><tr style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\"><th style=\"box-sizing: border-box;padding: 0.5em 1em;text-align: left;border-top-width: 1px;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;background-color: rgb(240, 240, 240);\"><span style=\"font-size: 14px;\"></span><span style=\"font-size: 14px;\">所占字节</span></th><th style=\"box-sizing: border-box;padding: 0.5em 1em;text-align: left;border-top-width: 1px;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;background-color: rgb(240, 240, 240);\"><span style=\"font-size: 14px;\">用途</span></th></tr></thead><tbody style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 0px;border-style: initial;border-color: initial;\"><tr style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\"><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\"><span style=\"font-size: 14px;\">1</span></td><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\"><span style=\"font-size: 14px;\">魔数，默认为 0xBC</span></td></tr><tr style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\"><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\"><span style=\"font-size: 14px;\">1</span></td><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\"><span style=\"font-size: 14px;\">序列化的算法</span></td></tr><tr style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\"><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\"><span style=\"font-size: 14px;\">4</span></td><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\"><span style=\"font-size: 14px;\">Packet 的类型</span></td></tr><tr style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\"><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\"><span style=\"font-size: 14px;\">4</span></td><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\"><span style=\"font-size: 14px;\">Packet 的内容长度</span></td></tr><tr style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\"><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\"><span style=\"font-size: 14px;\">?</span></td><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\"><span style=\"font-size: 14px;\">Packet 的内容</span></td></tr></tbody></table><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">序列化算法将会决定该 Packet 在编解码时，使用何种序列化方式。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">Packet 的类型将会决定到达服务端的字节流将被反序列化为何种 Packet，也决定了该 Packet 将会被哪个 PacketHandler 进行处理。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">内容长度将会解决 Packet 的拆包与粘包问题，服务端在解析字节流时，将会等到字节的长度达到内容的长度时，才进行字节的读取。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">除此之外，Packet 中还会存储一个 sync 字段，该字段将指定服务端在处理该 Packet 的数据时是否需要使用异步的业务线程池来处理。</p><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">健康检查</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">服务端与客户端各自维护了一个健康检查的服务，即 Netty 为我们提供的 IdleStateHandler，通过继承该类，并且实现 channelIdle 方法即可实现连接 “空闲” 时的逻辑处理，当出现空闲时，目前我们只关心读空闲，我们既可以认为这条链接出现问题了。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">那么只需要在链接出现问题时，将这条链接关闭即可，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">IdleStateChecker</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">IdleStateHandler</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;DEFAULT_READER_IDLE_TIME&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">15</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;readerTime;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">IdleStateChecker</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;readerIdleTime)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">super</span>(readerIdleTime&nbsp;==&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>&nbsp;?&nbsp;DEFAULT_READER_IDLE_TIME&nbsp;:&nbsp;readerIdleTime,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>,&nbsp;TimeUnit.SECONDS);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;readerTime&nbsp;=&nbsp;readerIdleTime&nbsp;==&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>&nbsp;?&nbsp;DEFAULT_READER_IDLE_TIME&nbsp;:&nbsp;readerIdleTime;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">channelIdle</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(ChannelHandlerContext&nbsp;ctx,&nbsp;IdleStateEvent&nbsp;evt)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.warn(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"[{}]&nbsp;Hasn\'t&nbsp;read&nbsp;data&nbsp;after&nbsp;{}&nbsp;seconds,&nbsp;will&nbsp;close&nbsp;the&nbsp;channel:{}\"</span>,&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IdleStateChecker.class.getSimpleName(),&nbsp;readerTime,&nbsp;ctx.channel());<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.channel().close();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">另外，客户端需要额外再维护一个健康检查器，正常情况下他负责定时向服务端发送心跳，当链接的状态变成 inActive 时，该检查器将负责进行重连，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">HealthyChecker</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">ChannelInboundHandlerAdapter</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;DEFAULT_PING_INTERVAL&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">5</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;Client&nbsp;client;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;pingInterval;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">HealthyChecker</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(Client&nbsp;client,&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;pingInterval)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.notNull(client,&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"client&nbsp;can&nbsp;not&nbsp;be&nbsp;null\"</span>);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">this</span>.client&nbsp;=&nbsp;client;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">this</span>.pingInterval&nbsp;=&nbsp;pingInterval&nbsp;&lt;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>&nbsp;?&nbsp;DEFAULT_PING_INTERVAL&nbsp;:&nbsp;pingInterval;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">channelActive</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(ChannelHandlerContext&nbsp;ctx)</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throws</span>&nbsp;Exception&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">super</span>.channelActive(ctx);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;schedulePing(ctx);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">schedulePing</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(ChannelHandlerContext&nbsp;ctx)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.executor().schedule(()&nbsp;-&gt;&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Channel&nbsp;channel&nbsp;=&nbsp;ctx.channel();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(channel.isActive())&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.debug(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"[{}]&nbsp;Send&nbsp;a&nbsp;PingPacket\"</span>,&nbsp;HealthyChecker.class.getSimpleName());<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;channel.writeAndFlush(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;PingPacket());<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;schedulePing(ctx);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;pingInterval,&nbsp;TimeUnit.SECONDS);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">channelInactive</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(ChannelHandlerContext&nbsp;ctx)</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throws</span>&nbsp;Exception&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.executor().schedule(()&nbsp;-&gt;&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.info(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"[{}]&nbsp;Try&nbsp;to&nbsp;reconnecting...\"</span>,&nbsp;HealthyChecker.class.getSimpleName());<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;client.connect();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">5</span>,&nbsp;TimeUnit.SECONDS);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fireChannelInactive();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">业务线程池</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">我们知道，Netty 中维护着两个 IO 线程池，一个 boss 主要负责链接的建立，另外一个 worker 主要负责链接上的数据读写，我们不应该使用 IO 线程来处理我们的业务，因为这样很可能会对 IO 线程造成阻塞，导致新链接无法及时建立或者数据无法及时读写。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">为了解决这个问题，我们需要在业务线程池中来处理我们的业务逻辑，但是这并不是绝对的，如果我们要执行的逻辑很简单，不会造成太大的阻塞，则可以直接在 IO 线程中处理，比如客户端发送一个 Ping 服务端回复一个 Pong，这种情况是没有必要在业务线程池中进行处理的，因为处理完了最终还是要交给 IO 线程去写数据。但是如果一个业务逻辑需要查询数据库或者读取文件，这种操作往往比较耗时间，所以就需要将这些操作封装起来交给业务线程池去处理。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">服务端允许客户端在传输的 Packet 中指定采用何种方式进行业务的处理，服务端在将字节流解码成 Packet 之后，会根据 Packet 中的 sync 字段的值，确定怎样对该 Packet 进行处理，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">ServerPacketDispatcher</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">extends</span>&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">SimpleChannelInboundHandler</span>&lt;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Packet</span>&gt;&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">channelRead0</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(ChannelHandlerContext&nbsp;ctx,&nbsp;Packet&nbsp;request)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;if&nbsp;the&nbsp;packet&nbsp;should&nbsp;be&nbsp;handled&nbsp;async</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(request.getAsync()&nbsp;==&nbsp;AsyncHandle.ASYNC)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EventExecutor&nbsp;channelExecutor&nbsp;=&nbsp;ctx.executor();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;create&nbsp;a&nbsp;promise</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Promise&lt;Packet&gt;&nbsp;promise&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;DefaultPromise&lt;&gt;(channelExecutor);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;async&nbsp;execute&nbsp;and&nbsp;get&nbsp;a&nbsp;future</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Future&lt;Packet&gt;&nbsp;future&nbsp;=&nbsp;executor.asyncExecute(promise,&nbsp;ctx,&nbsp;request);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;future.addListener(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;GenericFutureListener&lt;Future&lt;Packet&gt;&gt;()&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">operationComplete</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(Future&lt;Packet&gt;&nbsp;f)</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throws</span>&nbsp;Exception&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(f.isSuccess())&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Packet&nbsp;response&nbsp;=&nbsp;f.get();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeResponse(ctx,&nbsp;response);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">else</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;sync&nbsp;execute&nbsp;and&nbsp;get&nbsp;the&nbsp;response&nbsp;packet</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Packet&nbsp;response&nbsp;=&nbsp;executor.execute(ctx,&nbsp;request);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;writeResponse(ctx,&nbsp;response);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">不止是IM框架</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">bitchat</strong>&nbsp;除了可以作为 IM 框架之外，还可以作为一个通用的通讯框架。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">Packet 作为通讯的载体，通过继承 AbstractPacket 即可快速实现自己的业务，搭配 PacketHandler 作为数据处理器即可实现客户端与服务端的通讯。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">更多信息请到我的github中查看：</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">https://github.com/all4you/bitchat</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><br  /></p><p style=\"white-space: normal;\"><span style=\"color: rgb(255, 104, 39);font-size: 16px;\">推荐阅读</span></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484172&amp;idx=1&amp;sn=8f9eaec88e04588e76b0c4958162e6af&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">线程池是怎样工作的</span></a></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484193&amp;idx=1&amp;sn=0953118972d8fdff36fae804eb5fcc8b&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">什么是 Arthas</span></a><br  /></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484110&amp;idx=1&amp;sn=2a3dbfb804f282160e288d9178b2665e&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">怎样编写一个 Web 容器</span></a></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484154&amp;idx=1&amp;sn=c99d867ebe79e5b3fa784beff06d52b7&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">更好的使用 Nacos 配置中心</span></a></p><p style=\"white-space: normal;\"><br  /></p><p style=\"white-space: normal;text-align: center;\"><img class=\"\"       style=\"height: 156px;box-shadow: rgb(170, 170, 170) 0em 0em 1em 0px;width: 156px;border-radius: 0px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361510.jpeg\" alt=\"Netty实战：设计一个IM框架\" title=\"Netty实战：设计一个IM框架\"  /></p><p><br  /></p><p style=\"white-space: normal;text-align: right;\"><span style=\"color: rgb(53, 124, 168);font-size: 15px;\">如果文章对你有帮助，欢迎转发支持</span></p><p style=\"white-space: normal;text-align: right;\"><span style=\"font-size: 13px;color: rgb(255, 104, 39);\">如果觉得好看，请点击“好看”哦 ↓↓</span></p> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（逐码）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/Y7Q20Qy-lX_j7bb4Inb-oQ\" rel=\"noopener noreferrer\">Netty实战：设计一个IM框架</a></p></blockquote></div>', 'Netty实战：设计一个IM框架', '', 'inherit', 'closed', 'closed', '', '77-revision-v1', '', '', '2020-03-28 10:11:50', '2020-03-28 02:11:50', '', 77, 'https://www.javashitang.com/?p=90', 0, 'revision', '', 0);
INSERT INTO `wp_posts` VALUES (91, 1, '2019-04-10 00:00:50', '2020-03-28 02:12:30', '<div class=\"bpp-post-content\">                                                                                                                            <h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\" ><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">一个 NIO 服务端启动需要哪些要素</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">一个典型的 NIO 服务端应该有哪些东西来支撑他的服务呢？</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">ServerSocketChannel</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">首先要有一个 ServerSocketChannel，就像流操作都要基于 Stream 对象一样， NIO 中的所有 I/O 操作都基于 Channel 对象。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">一个 Channel 代表着和某一实体的连接，这个实体可以是硬件设备、文件或者是网络套接字，通过 Channel 可以读写数据。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">NIO 中的 ServerSocketChannel 相当于普通 IO 中的 ServerSocket，而客户端的 SocketChannel 则相当于普通 IO 中的 Socket。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">Selector</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">另外还需要有一个 Selector，用来获取 Channel 的事件，Channel 有4种事件，分别是：</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">Accept：有可以接受的连接</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">Connect：已经连接成功</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">Read：有数据可以读取</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">Write：可以进行数据写入</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">如果我们直接从 Channel 中读取数据时，很可能会有问题，因为这时 Channel 中可能根本就没有数据可以读，而强行进行读取的话，会使线程挂起一直等待着数据的到来，直到有数据到达才被唤醒，那该线程在数据到达这段时间内将不做任何事情。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">通过 Selector 来检查 Channel 的状态变化，当具体的状态满足条件时向外发出通知即可，就跟监听器一样，我们将 Channel 注册到 Selector 上，然后告诉 Selector 我这个 Channel 所感兴趣的事件列表，接下来 Selector 就会负责把满足条件的事件通知到 Channel，这样的话 Channel 就不需要每次傻傻的来读取数据了。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">那 Channel 怎样才能知道他感兴趣的事件已经发生了呢，当 Channel 把自己感兴趣的事件注册到 Selector 上之后，只需要通过 Selector 提供的 select 方法去查询就好了。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">所以一个典型的 NIO 服务端是这样的：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;初始化服务端TCP连接通道</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />ServerSocketChannel&nbsp;serverChannel&nbsp;=&nbsp;ServerSocketChannel.open();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;设置为非阻塞模式</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />serverChannel.configureBlocking(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">false</span>);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;创建一个selector</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />Selector&nbsp;selector&nbsp;=&nbsp;Selector.open();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;把Channel注册到selector上</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />serverChannel.register(selector,&nbsp;SelectionKey.OP_ACCEPT);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;绑定端口</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />serverChannel.bind(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;InetSocketAddress(<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">8864</span>));<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">了解了 NIO 是怎么玩的之后，我们来分析下 Netty 服务端是怎么启动的，首先看一个最简单的 EchoServer 的启动代码：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\">EventLoopGroup&nbsp;bossGroup&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;NioEventLoopGroup(<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>);&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;1</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />EventLoopGroup&nbsp;workerGroup&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;NioEventLoopGroup();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">try</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;ServerBootstrap&nbsp;b&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;ServerBootstrap();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;b.group(bossGroup,&nbsp;workerGroup)&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.channel(NioServerSocketChannel.class)&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;2</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.option(ChannelOption.SO_BACKLOG,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">100</span>)<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.handler(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;LoggingHandler(LogLevel.INFO))&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;3</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.childHandler(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;ChannelInitializer&lt;SocketChannel&gt;()&nbsp;{&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;4</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">initChannel</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(SocketChannel&nbsp;ch)</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throws</span>&nbsp;Exception&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ChannelPipeline&nbsp;p&nbsp;=&nbsp;ch.pipeline();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.addLast(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;EchoServerHandler());<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;Start&nbsp;the&nbsp;server.</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;ChannelFuture&nbsp;f&nbsp;=&nbsp;b.bind(PORT).sync();&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;5</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;Wait&nbsp;until&nbsp;the&nbsp;server&nbsp;socket&nbsp;is&nbsp;closed.</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;f.channel().closeFuture().sync();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">finally</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;Shut&nbsp;down&nbsp;all&nbsp;event&nbsp;loops&nbsp;to&nbsp;terminate&nbsp;all&nbsp;threads.</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;bossGroup.shutdownGracefully();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;workerGroup.shutdownGracefully();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">整个过程主要有五个部分组成，如下图所示：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"一个 NIO 框架的启动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361551.png\" alt=\"一个 NIO 框架的启动\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">简单解释一下每个步骤的作用：</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">1、初始化两个 NioEventLoopGroup，这两个对象可以看做是传统 IO 编程模型中的线程组，bossGroup 主要进行监听端口，accept 新连接，并将新连接转交给 worker 线程去执行，workerGroup 主要是处理客户端请求的。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">2、通过指定一个 Channel 的 Class 来创建一个 Channel 工厂，后续通过该工厂来创建 Channel，实际上这里就统一了服务端的 IO 模型了，通过统一的 api 就能轻松的指定服务端的 IO 模型是 NIO 还是 BIO，只需要指定不同的 Channel 类型即可。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">3、添加一个 Server 端专属的 ChannelHandler。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">4、添加一个自定义的用来处理客户端请求的 ChannelHandler，主要用来进行编解码、数据读写、逻辑处理等。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">5、绑定端口并启动服务端。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">下面就对这五个步骤进行详细的分析，不过上面还有一个很重要的类没有说到，就是 ServerBootstrap 引导，他主要就是负责把所有的对象聚集在一起，然后把服务启动起来，所以不进行具体的描述。</p><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\">初始化 NioEventLoopGroup<br  /></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">NioEventLoopGroup 简单点理解就是线程组，他会持有一组线程，这里的线程就是 EventLoop。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">整个 NioEventLoopGroup 的初始化的过程如下图所示，具体的流程可以查看 NioEventLoopGroup 的构造方法的执行过程，这里不贴具体的代码了：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"一个 NIO 框架的启动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361551.jpg\" alt=\"一个 NIO 框架的启动\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">在 NioEventLoopGroup 初始化时，依次初始化了三个对象，分别是虚线框中黄色部分对应的对象。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(255, 104, 39);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">其中有一个对象 SelectorProvider 会在后续使用它来创建 Selector 对象。</strong></span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">在这些对象都初始化好之后，NioEventLoopGroup 会依次调用父类的构造方法，最终调用到父类 MultithreadEventExecutorGroup 中，然后再父类的构造方法中完成剩下的初始化工作，这些工作又可以分为四个部分：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"一个 NIO 框架的启动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361552.jpg\" alt=\"一个 NIO 框架的启动\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">我们来看这四个部分具体的实现。</p><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">初始化 Executor</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">首先是初始化一个 Executor 对象，代码如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">MultithreadEventExecutorGroup</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;nThreads,&nbsp;Executor&nbsp;executor,<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EventExecutorChooserFactory&nbsp;chooserFactory,&nbsp;Object...&nbsp;args)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;1.初始化&nbsp;executor</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(executor&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;executor&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;ThreadPerTaskExecutor(newDefaultThreadFactory());<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">executor 从 NioEventLoopGroup 中未进行初始化，一直到这里才进行初始化，这里默认是初始化的一个 ThreadPerTaskExecutor 对象，从类名中我们可以发现，这个 Executor 在接收到新的任务时，会为每个任务都创建一个线程来执行。</p><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">创建 EventExecutor 数组</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">第二步是创建一个 EventExecutor 数组，如下图所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">MultithreadEventExecutorGroup</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;nThreads,&nbsp;Executor&nbsp;executor,<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EventExecutorChooserFactory&nbsp;chooserFactory,&nbsp;Object...&nbsp;args)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;1.初始化&nbsp;executor</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;2.创建&nbsp;EventExecutor&nbsp;数组</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;children&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;EventExecutor[nThreads];<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">初始化 EventExecutor 数组</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">第三步就是对这个数组进行实例化，如下图所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">MultithreadEventExecutorGroup</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;nThreads,&nbsp;Executor&nbsp;executor,<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EventExecutorChooserFactory&nbsp;chooserFactory,&nbsp;Object...&nbsp;args)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;1.初始化&nbsp;executor</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;2.创建&nbsp;EventExecutor&nbsp;数组</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;3.初始化每一个&nbsp;EventExecutor</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">for</span>&nbsp;(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;i&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>;&nbsp;i&nbsp;&lt;&nbsp;nThreads;&nbsp;i&nbsp;++)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">boolean</span>&nbsp;success&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">false</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">try</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;children[i]&nbsp;=&nbsp;newChild(executor,&nbsp;args);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">true</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">catch</span>&nbsp;(Exception&nbsp;e)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;<span class=\"hljs-doctag\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">TODO:</span>&nbsp;Think&nbsp;about&nbsp;if&nbsp;this&nbsp;is&nbsp;a&nbsp;good&nbsp;exception&nbsp;type</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;IllegalStateException(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"failed&nbsp;to&nbsp;create&nbsp;a&nbsp;child&nbsp;event&nbsp;loop\"</span>,&nbsp;e);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">finally</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(!success)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;如果当前对象初始化失败，则将之前初始化的所有对象都关闭</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">这里需要注意的是，初始化 EventExecutor 对象的方法是 newChild，而这个方法的实现是在 NioEventLoopGroup 类中，具体的代码如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;EventLoop&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">newChild</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(Executor&nbsp;executor,&nbsp;Object...&nbsp;args)</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throws</span>&nbsp;Exception&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;NioEventLoop(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">this</span>,&nbsp;executor,&nbsp;(SelectorProvider)&nbsp;args[<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>],<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((SelectStrategyFactory)&nbsp;args[<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>]).newSelectStrategy(),&nbsp;(RejectedExecutionHandler)&nbsp;args[<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">2</span>]);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">可以看到最终创建的是一个 NioEventLoop 对象，并且<strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">该对象持有了 SelectorProvider 和 Executor 以及其他对象</strong>。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">但是我们的 children 数组中需要的 EventExecutor 对象，为什么这里 new 出来的是一个 NioEventLoop 对象呢？我们可以看一下 NioEventLoop 类的结构，如下图所示：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"一个 NIO 框架的启动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361552.jpg\" alt=\"一个 NIO 框架的启动\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">从类的结构图中可以看到， NioEventLoop 类继承自 SingleThreadEventLoop，而 SingleThreadEventLoop 类继承自 SingleThreadEventExecutor 类，并且实现了 EventLoop 接口。然后 SingleThreadEventExecutor 又继承自 AbstractScheduledEventExecutor 类。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">AbstractScheduledEventExecutor 类又继承自 AbstractEventExecutor，该类直接实现了 EvenExecutor 接口，所以 NioEventLoop 也就是成了一个 EventExecutor。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">从图中还可以看出，EventExecutor 还是继承自 ScheduleExecutorService 接口，这就说明了，EventExecutor 除了有线程池的能力，还具备调度的能力。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">所以 NioEventLoop 是一个具有线程池功能的事件循环器，并且还具有调度任务的功能，为什么要拥有调度的功能呢，因为 Netty 中有很多任务，包括需要定时执行的调度任务，和一次性执行的任务。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">但是 NioEventLoop 中负责执行具体任务的线程，是在 SingleThreadEventLoop 中创建的，并且只创建了一个线程，这一点从类名中就可以看出来。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">那为什么只创建一个线程呢，线程池如果只有一个线程的话，那意义不就很小了吗？其实这正是 Netty 设计的精美之处，通过一个线程来支撑所有的事件循环，从而避免了多线程之间的并发问题，也减少了线程切换所带来的性能损耗。Netty 通过充分压榨这一个线程的能力，实现了一种无锁化的高效的编程模型。</p><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">初始化 EventExecutorChooser</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">当上面的三个步骤都完成之后，最后一个步骤就是初始化一个 EventExecutorChooser，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">MultithreadEventExecutorGroup</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;nThreads,&nbsp;Executor&nbsp;executor,<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EventExecutorChooserFactory&nbsp;chooserFactory,&nbsp;Object...&nbsp;args)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;1.初始化&nbsp;executor</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;2.创建&nbsp;EventExecutor&nbsp;数组</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;3.初始化每一个&nbsp;EventExecutor</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;4.初始化&nbsp;EventExecutorChooser</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;chooser&nbsp;=&nbsp;chooserFactory.newChooser(children);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">这步主要是通过一个 chooserFactory 创建了一个 EventExecutorChooser，传递进去的参数则是 EventExecutor 数组，而 EventExecutorChooser 的作用就是从 EventExecutor 数组中选择一个可用的 EventExecutor。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(255, 104, 39);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">需要注意的是 newChooser 创建的 chooser 对象有两种类型，这取决于 children 的个数，如果个数是偶数，则选择 PowerOfTwoEventExecutorChooser，该类型的 chooser 在选择 EventExecutor 时采用位运算，效率非常高；如果个数是奇数则选择 GenericEventExecutorChooser，该类型的 chooser 在选择 EventExecutor 时采用取余运算，效率较低，这充分体现了 Netty 在性能优化上的考虑。</strong></span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">现在我们来总结一下初始化完 NioEventLoopGroup 之后一共创建了哪些对象：</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">Executor：创建了一个 Executor 对象，具体实例为：ThreadPerTaskExecutor</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">EventExecutor 数组：创建了一个大小为 nThread 的 EventExecutor 数组，每个实例都是一个 NioEventLoop</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">NioEventLoop：一个同时具备 execute 和 schedule 能力的 EventExecutor，并且每一个 NioEventLoop 只有一个 Thread 来支撑其运行</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">EventExecutorChooser：一个可以获取一个可用的 EventExecutor 的选择器</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">指定 Channel 类型</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">通过 .channel() 方法指定了一个 Channel 的 Class，该方法会创建一个 ChannelFactory，后续创建新的 Channel 则由该 ChannelFactory 来创建。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">具体是如何创建 Channel 的，只需要看下 ChannelFactory 是如何实现的即可，实际的 ChannelFactory 实例，是一个 ReflectiveChannelFactory：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;T&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">newChannel</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">try</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;clazz.getConstructor().newInstance();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">catch</span>&nbsp;(Throwable&nbsp;t)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;ChannelException(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"Unable&nbsp;to&nbsp;create&nbsp;Channel&nbsp;from&nbsp;class&nbsp;\"</span>&nbsp;+&nbsp;clazz,&nbsp;t);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">可以很清楚的知道，是通过反射获取到该类的构造方法，然后创建了一个实际。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">这里的 Channel 都是服务端的 Channel，另外该方法除了是创建了一个 Channel 工厂之外，更重要的是他指定了 IO 模型。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">我们使用 Netty 来进行编写网络应用时，一般都是使用它的 NIO 模型，因为这样才能够发挥出他最大的价值。但是如果你想使用 BIO 模型的话，也是支持的，只需要指定 Class 为：OioServerSocketChannel 即可。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">添加服务端 ChannelHandler</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">通过 .handler() 方法可以添加一个服务端的 ChannelHandler，该 ChannelHandler 是用来处理服务端的一些逻辑的，比如纪录一些日志等等。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">添加客户端 ChannelHandler</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">通过 .childHandler() 方法就可以添加一个用来处理 Client 端请求的 ChannelHandler，该 ChannelHandler 就是所有实际业务逻辑处理的核心部分。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">包括对客户端发送过来的数据进行解码，对数据进行逻辑处理，然后生成响应数据后写回客户端。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">绑定端口并启动</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">当以上的所有准备工作都执行完毕之后，服务端启动过程中最重要的部分就要开始执行了：那就是绑定端口，也就是执行 ServerBootstrap 的 bind 方法。该方法也可以拆分成两个独立的部分：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"一个 NIO 框架的启动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361553.png\" alt=\"一个 NIO 框架的启动\"  /></figure><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">初始化 Channel</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">initAndRegister 方法，主要做的就是初始化并注册 Channel 对象，这个 Channel 的类型就是开始的时候通过 .channel() 方法指定的类型。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">首先通过 ChannelFactory 创建一个我们所需类型的 Channel 对象，然后对这个 Channel 进行初始化，具体的代码如下：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;ChannelFuture&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">initAndRegister</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;Channel&nbsp;channel&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">try</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;创建一个&nbsp;channel</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;channel&nbsp;=&nbsp;channelFactory.newChannel();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init(channel);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">catch</span>&nbsp;(Throwable&nbsp;t)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><h5 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">创建 Channel</span></h5><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">我们先看下创建 Channel 的过程，上面我们已经分析过了 channelFactory.newChannel() 是通过反射创建了一个 Channel 的实例，而该 Channel 的 Class 是我们指定的 NioServerSocketChannel，现在我们需要知道该 Channel 是如何被创建的，整个过程也分为四个部分：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"一个 NIO 框架的启动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361553.png\" alt=\"一个 NIO 框架的启动\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">第一步，创建一个 ServerSocketChannel：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;SelectorProvider&nbsp;DEFAULT_SELECTOR_PROVIDER&nbsp;=&nbsp;SelectorProvider.provider();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;ServerSocketChannel&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">newSocket</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(SelectorProvider&nbsp;provider)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">try</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;provider.openServerSocketChannel();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">catch</span>&nbsp;(IOException&nbsp;e)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;ChannelException(<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"Failed&nbsp;to&nbsp;open&nbsp;a&nbsp;server&nbsp;socket.\"</span>,&nbsp;e);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(255, 104, 39);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">这里就是通过 JDK 底层的 SelectorProvider 创建了一个 ServerSocketChannel，后续都是通过该 Channel 对客户端请求进行 accept 操作。</strong></span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">PS：在创建 NioEventLoopGroup 时也创建了一个 SelectorProvider，不过该 provider 是为了在某个条件下重新创建一个新的 Selector ，通过 rebuildSelector 的方式来解决 JDK 的 epoll 空转的bug。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">第二步，将第一步创建的 ServerSocketChannel 以及一个感兴趣的事件传入并调用父类构造方法：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">NioServerSocketChannel</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(ServerSocketChannel&nbsp;channel)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">super</span>(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>,&nbsp;channel,&nbsp;SelectionKey.OP_ACCEPT);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;config&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;NioServerSocketChannelConfig(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">this</span>,&nbsp;javaChannel().socket());<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">这里的第二行代码，是将当前 NioServerSocketChannel 和 一个 ServerSocket 封装成一个 NioServerSocketChannelConfig。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">第三步，调用父类构造方法初始化一些变量：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">AbstractNioChannel</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(Channel&nbsp;parent,&nbsp;SelectableChannel&nbsp;ch,&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;readInterestOp)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">super</span>(parent);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">this</span>.ch&nbsp;=&nbsp;ch;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">this</span>.readInterestOp&nbsp;=&nbsp;readInterestOp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">try</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ch.configureBlocking(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">false</span>);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">catch</span>&nbsp;(IOException&nbsp;e)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">这一步主要是将一些变量保存起来，<strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">并设置了 channel 的阻塞模式为非阻塞模式</strong>。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">第四步，创建核心对象，包括 channelId，unsafe，pipeline：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">AbstractChannel</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(Channel&nbsp;parent)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">this</span>.parent&nbsp;=&nbsp;parent;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;id&nbsp;=&nbsp;newId();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;unsafe&nbsp;=&nbsp;newUnsafe();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;pipeline&nbsp;=&nbsp;newChannelPipeline();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">因为我们本篇文章是对服务器启动流程的分析，所以这里不对每一个对象的创建过程进行分析了，只需要知道是在创建 NioServerSocketChannel 的时候，创建了 channelId，unsafe 和 pipeline 对象。后面的操作中会用到这些对象。</p><h5 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">初始化 Channel</span></h5><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">初始化 Channel 的 init 方法 在 AbstractBootstrap 中是一个抽象方法，具体的实现在 ServerBootstrap 中，我们来看下具体的实现：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">init</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(Channel&nbsp;channel)</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throws</span>&nbsp;Exception&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;获取Channel的pipeline</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;ChannelPipeline&nbsp;p&nbsp;=&nbsp;channel.pipeline();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;EventLoopGroup&nbsp;currentChildGroup&nbsp;=&nbsp;childGroup;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;该childHandler对象是在创建ServerBootstrap对象时，通过childHandler方法创建的</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;ChannelHandler&nbsp;currentChildHandler&nbsp;=&nbsp;childHandler;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;把在创建ServerBootstrap对象时，创建的channelHandler和childHandler对象都添加到</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;channel的pipeline中去</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;p.addLast(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;ChannelInitializer&lt;Channel&gt;()&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">initChannel</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;Channel&nbsp;ch)</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throws</span>&nbsp;Exception&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;ChannelPipeline&nbsp;pipeline&nbsp;=&nbsp;ch.pipeline();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ChannelHandler&nbsp;handler&nbsp;=&nbsp;config.handler();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(handler&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pipeline.addLast(handler);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ch.eventLoop().execute(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Runnable()&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">run</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pipeline.addLast(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;ServerBootstrapAcceptor(<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ch,&nbsp;currentChildGroup,&nbsp;currentChildHandler,&nbsp;currentChildOptions,&nbsp;currentChildAttrs));<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;});<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">这里初始化最主要的工作就是为 NioServerSocketChannel 的 pipeline 添加了一个 ChannelHandler。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">该 ChannelHandler 就是来处理客户端连接的接入的，通过 ServerBootstrapAcceptor 来实现。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">其中的 currentChildGroup 就是我们创建的 workerGroup，currentChildHandler 则是我们通过 childHandler 方法指定的处理客户端请求的 ChannelHandler。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">所以 ServerBootstrapAcceptor 主要的工作就是接受客户端的请求，并将请求转发给 workGroup 去处理，具体的处理逻辑由用户自定义的 ChannelHandler 确定。</p><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">注册 Channel</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">对 Channel 初始化完了之后，现在就需要对 Channel 进行注册了，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;ChannelFuture&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">initAndRegister</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;Channel&nbsp;channel&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;创建并初始化&nbsp;channel</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;ChannelFuture&nbsp;regFuture&nbsp;=&nbsp;config().group().register(channel);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">config().group() 返回的是 bootstrap 的 group 属性，也就是我们创建 ServerBootstrap 时传入的 bossGroup，他是一个 NioEventLoopGroup 实例。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">整个注册的过程也分为四个部分：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"一个 NIO 框架的启动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361554.png\" alt=\"一个 NIO 框架的启动\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">第一步，调用 NioEventLoopGroup 的注册方法，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">abstract</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">MultithreadEventLoopGroup</span>&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">MultithreadEventExecutorGroup</span>&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">EventLoopGroup</span>&nbsp;</span>{&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;ChannelFuture&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">register</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(Channel&nbsp;channel)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;next().register(channel);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">其中 next() 的方法实现是在父类 MultithreadEventExecutorGroup 中，也就是第二步的操作。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">第二步，获取一个可用的 EventExecutor，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">abstract</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">MultithreadEventExecutorGroup</span>&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">AbstractEventExecutorGroup</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;EventExecutor&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">next</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;chooser.next();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">看到 chooser 我们应该马上反应出来，这个对象是在初始化 NioEventLoopGroup 的时候创建的，同时还通过 newChild 方法创建了 nThreads 个 EventExecutor，并将这些 EventExecutor 都保存在了一个叫 children 的数组中，这里的 EventExecutor 实例是一个 NioEventLoop 。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">chooser 选择器的 next 方法其实就是从 children 数组中获取一个可用的 EventExecutor，也就是获取一个可用的 NioEventLoop，所以 next().register(channel) 的方法，实际上是执行的 NioEventLoop 的 register(channel) 方法。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">第三步，执行 NioEventLoop 的 register 方法，该方法是在 NioEventLoop 的父类 SingleThreadEventLoop 中实现的，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">abstract</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">SingleThreadEventLoop</span>&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">SingleThreadEventExecutor</span>&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">EventLoop</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;ChannelFuture&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">register</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(Channel&nbsp;channel)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;register(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;DefaultChannelPromise(channel,&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">this</span>));<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;ChannelFuture&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">register</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;ChannelPromise&nbsp;promise)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObjectUtil.checkNotNull(promise,&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"promise\"</span>);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;promise.channel().unsafe().register(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">this</span>,&nbsp;promise);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;promise;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">第四步，执行 unsafe 的 register 方法，看到 unsafe 我们也应该马上就想到，该对象是在初始化 NioServerSocketChannel 的时候，在父类 AbstractChannel 中通过 newUnsafe() 方法初始化的，所以我们回到 AbstractChannel 中查看 newUnsafe 方法创建的 unsafe 对象到底是什么。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">但是很可惜，该方法是一个抽象方法，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">abstract</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">AbstractChannel</span>&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">DefaultAttributeMap</span>&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Channel</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">abstract</span>&nbsp;AbstractUnsafe&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">newUnsafe</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span></span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">所以需要到 AbstractChannel 的子类中寻找该方法的实现，并且该子类也要满足是 NIOServerSocketChannel 的父类，所以很容易找到，该实现类是：AbstractNioMessageChannel，现在看下 newUnsafe 方法创建的 unsafe 对象是什么，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;AbstractNioUnsafe&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">newUnsafe</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;NioMessageUnsafe();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">NioMessageUnsafe</span>&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">AbstractNioUnsafe</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">所以现在我们得到了 unsafe 对象的实例是 NioMessageUnsafe，接下来就看 NioMessageUnsafe 的 register 方法了，该方法是在父类 AbstractUnsafe 中实现的，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">register</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(EventLoop&nbsp;eventLoop,&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;ChannelPromise&nbsp;promise)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;AbstractChannel.<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">this</span>.eventLoop&nbsp;=&nbsp;eventLoop;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(eventLoop.inEventLoop())&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;register0(promise);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">else</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">try</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eventLoop.execute(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Runnable()&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">run</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;register0(promise);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">catch</span>&nbsp;(Throwable&nbsp;t)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">但是该方法仍然不是最终的注册方法，又调用了一个叫 register0 的方法，但是该方法调用在两个分支内：</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">如果 eventLoop.inEventLoop 为 true 则直接调用</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">否则将该方法封装成一个 Runnable 交给 eventLoop 去执行</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(255, 104, 39);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">这里我们需要注意的是 Netty 的 EventLoop 底层是使用的一个单线程来支撑他的工作的，很多操作都会看到对于当前线程的判断，这正是 Netty 线程模型高效的原因所在。</strong></span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">让该线程执行某个方法之前，要先判断，当前是否在 EventLoop 线程之中，如果在的话就直接执行，否则将需要执行的方法封装成一个 Runnable 交给 EventLoop 去调度，EventLoop 会在下个时间点来执行该任务，并且是在 EventLoop 线程中执行。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">该方法可以拆分成两个部分，如下图所示：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"一个 NIO 框架的启动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361554.png\" alt=\"一个 NIO 框架的启动\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">第一步调用的是 doRegister 方法，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">register0</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(ChannelPromise&nbsp;promise)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">try</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;执行具体的注册</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doRegister();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">catch</span>&nbsp;(Throwable&nbsp;t)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分的代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">doRegister 方法在 AbstractChannel 中是一个空实现，所以我们需要到他的子类中去寻找具体的实现，很容易我们在 AbstractNioChannel 中找到了该方法的实现，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">doRegister</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throws</span>&nbsp;Exception&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">boolean</span>&nbsp;selected&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">false</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">for</span>&nbsp;(;;)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">try</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectionKey&nbsp;=&nbsp;javaChannel().register(eventLoop().unwrappedSelector(),&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>,&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">this</span>);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">catch</span>&nbsp;(CancelledKeyException&nbsp;e)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(!selected)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eventLoop().selectNow();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selected&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">true</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">else</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throw</span>&nbsp;e;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">到这里就是最底层的调用了，这里的 JavaChannel() 方法获取到的就是我们创建 NioServerSocketChannel 时通过 provider.openServerSocketChannel() 方法创建的 ServerSocketChannel。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">而 eventLoop().unwrappedSelector() 方法获取到的则是通过 provider.openSelector() 创建的一个原始的 Selector 对象。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">换一个写法这步操作实际上就是：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\">ServerSocketChannel.register(Selector,&nbsp;interest&nbsp;set);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(255, 104, 39);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">就是通过这一步操作把 ServerSocketChannel 感兴趣的事件注册到 JDK 底层的一个 Selector 上。</strong></span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">但是有可能这个这个时候，注册事件有可能失败，所以需要立即执行一次 selector 的 selectNow 方法，因为这个被“取消”的SelectionKey 可能还缓存着没有被移除。然后尝试进行第二次注册，如果成功的话就直接返回，如果还是失败的话就抛出异常。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">第二步，通过 pipeline 触发 handler 中的某些回调方法，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">register0</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(ChannelPromise&nbsp;promise)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">try</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;执行具体的注册</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pipeline.invokeHandlerAddedIfNeeded();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;safeSetSuccess(promise);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pipeline.fireChannelRegistered();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(isActive())&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(firstRegistration)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pipeline.fireChannelActive();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">else</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(config().isAutoRead())&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beginRead();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">catch</span>&nbsp;(Throwable&nbsp;t)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">首先通过 pipeline 的 invokeHandlerAddedIfNeeded 方法来触发调用那些通过 pipeline.addLast() 方法添加的 ChannelHandler 的 channelAdded() 方法。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">然后通知 promise 已经成功了，现在可以执行监听器的 operationComplete 方法了。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">最后 isActive() 方法默认是返回的 false，因为到现在我们还没有绑定端口呢。</p><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">绑定端口</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">当 Channel 已经创建、初始化、并成功注册好之后，最后就需要执行端口绑定了，现在回到 ServerBootstrap 的 doBind 方法中，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;ChannelFuture&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">doBind</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;SocketAddress&nbsp;localAddress)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;初始化Channel并进行注册</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(regFuture.isDone())&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ChannelPromise&nbsp;promise&nbsp;=&nbsp;channel.newPromise();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doBind0(regFuture,&nbsp;channel,&nbsp;localAddress,&nbsp;promise);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;promise;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">else</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;PendingRegistrationPromise&nbsp;promise&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;PendingRegistrationPromise(channel);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;regFuture.addListener(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;ChannelFutureListener()&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">operationComplete</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(ChannelFuture&nbsp;future)</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throws</span>&nbsp;Exception&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Throwable&nbsp;cause&nbsp;=&nbsp;future.cause();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(cause&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;promise.setFailure(cause);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">else</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;promise.registered();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doBind0(regFuture,&nbsp;channel,&nbsp;localAddress,&nbsp;promise);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;promise;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">当注册的结果 regFuture 已经完成了，那么就可以直接执行绑定操作了，否则需要在 regFuture 上增加一个监听器，当注册完成时再执行绑定操作，不管怎么样，具体的绑定操作都是在 doBind0 方法中，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">doBind0</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;ChannelFuture&nbsp;regFuture,&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;Channel&nbsp;channel,<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;SocketAddress&nbsp;localAddress,&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;ChannelPromise&nbsp;promise)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;channel.eventLoop().execute(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Runnable()&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">run</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(regFuture.isSuccess())&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;channel.bind(localAddress,&nbsp;promise).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">else</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;promise.setFailure(regFuture.cause());<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;});<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">doBind0 的方法可以拆分成以下几个部分：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"一个 NIO 框架的启动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361554-1.png\" alt=\"一个 NIO 框架的启动\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">中间的几步调用过程这里就不再赘述了，大家可以从源码中跟一下，我们直接跳到最后一步调用 unsafe 的 bind 方法，不出意外就是在这一步进行了 JDK 底层 Channel 的端口绑定了，最终代码如下：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">NioServerSocketChannel</span>&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">AbstractNioMessageChannel</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">io</span>.<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">netty</span>.<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">channel</span>.<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">socket</span>.<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">ServerSocketChannel</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">doBind</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(SocketAddress&nbsp;localAddress)</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throws</span>&nbsp;Exception&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(PlatformDependent.javaVersion()&nbsp;&gt;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">7</span>)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;javaChannel().bind(localAddress,&nbsp;config.getBacklog());<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">else</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;javaChannel().socket().bind(localAddress,&nbsp;config.getBacklog());<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">看到这里一切就都清楚了，终于将端口绑定到了 ServerSocketChannel 上去了。</p><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">Netty 启动过程总结</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">下面我们总结下 Netty 是如何在整个启动过程中，把 NIO 那一套启动步骤完美的分散到各个地方去的。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">ServerSocketChannel 在哪创建的</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">首先需要知道 Netty 是在哪里创建的 ServerSocketChannel，是在初始化 NioServerSocketChannel 对象的时候在 newSocket 方法中，通过 provider.openServerSocketChannel() 创建的。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">非阻塞模式在哪设置的</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">同样是在初始化 NioServerSocketChannel 对象的时候，在调用到父类 AbstractNioChannel 的构造方法的时候，执行的 ch.configureBlocking(false)。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">Selector 在哪创建的</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">在 NioEventLoop 中通过 provider.openSelector() 创建的，并将该 Selector 对象存放在一个叫 unwrappedSelector 的变量中。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">而 NioEventLoop 中的 provider，是在初始化 NioEventLoopGroup 时，通过 SelectorProvider.provider() 创建的，并最终传递给了 NioEventLoop。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">Channel 是什么时候注册到 Selector 上去的</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">在 initAndRegister 方法中最终执行到了 AbstractNioChannel 中的 doRegister 方法，在该方法中将 Channel 注册到 Selector 上去的。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">端口是什么时候绑定的</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">在 ServerBootstrap 的 doBind 方法中会先执行 initAndRegister 方法，执行完之后就会执行 doBind0 来进行端口绑定，最终会执行到 NioServerSocketChannel 类中的 doBind 方法，在该方法中完成了 JDK 底层端口的绑定。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><br  /></p><p style=\"white-space: normal;\"><span style=\"color: rgb(255, 104, 39);font-size: 16px;\">推荐阅读</span></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484172&amp;idx=1&amp;sn=8f9eaec88e04588e76b0c4958162e6af&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">线程池是怎样工作的</span></a></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484193&amp;idx=1&amp;sn=0953118972d8fdff36fae804eb5fcc8b&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">什么是 Arthas</span></a><br  /></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484110&amp;idx=1&amp;sn=2a3dbfb804f282160e288d9178b2665e&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">怎样编写一个 Web 容器</span></a></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484154&amp;idx=1&amp;sn=c99d867ebe79e5b3fa784beff06d52b7&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">更好的使用 Nacos 配置中心</span></a></p><p style=\"white-space: normal;\"><br  /></p><p style=\"white-space: normal;text-align: center;\"><img class=\"\"       style=\"box-shadow: rgb(170, 170, 170) 0em 0em 1em 0px;width: 35%;border-radius: 0px;height: auto !important;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361554.jpeg\" alt=\"一个 NIO 框架的启动\" title=\"一个 NIO 框架的启动\"  /></p><p>&nbsp; &nbsp;&nbsp;<br  /></p> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（逐码）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/3eWyOgWCDeuQB0x3qxueow\" rel=\"noopener noreferrer\">一个 NIO 框架的启动</a></p></blockquote></div>', '一个 NIO 框架的启动', '', 'publish', 'open', 'open', '', 'e372f25f04', '', '', '2020-03-28 10:12:35', '2020-03-28 02:12:35', '', 0, 'https://www.javashitang.com/?p=91', 0, 'post', '', 0);
INSERT INTO `wp_posts` VALUES (92, 1, '2020-03-28 10:12:31', '2020-03-28 02:12:31', '', 'beepress6-1585361551', '', 'inherit', 'open', 'closed', '', 'beepress6-1585361551', '', '', '2020-03-28 10:12:31', '2020-03-28 02:12:31', '', 91, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585361551.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (93, 1, '2020-03-28 10:12:31', '2020-03-28 02:12:31', '', 'beepress9-1585361551', '', 'inherit', 'open', 'closed', '', 'beepress9-1585361551', '', '', '2020-03-28 10:12:31', '2020-03-28 02:12:31', '', 91, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361551.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (94, 1, '2020-03-28 10:12:31', '2020-03-28 02:12:31', '', 'beepress3-1585361551', '', 'inherit', 'open', 'closed', '', 'beepress3-1585361551', '', '', '2020-03-28 10:12:31', '2020-03-28 02:12:31', '', 91, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361551.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (95, 1, '2020-03-28 10:12:32', '2020-03-28 02:12:32', '', 'beepress9-1585361552', '', 'inherit', 'open', 'closed', '', 'beepress9-1585361552', '', '', '2020-03-28 10:12:32', '2020-03-28 02:12:32', '', 91, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361552.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (96, 1, '2020-03-28 10:12:32', '2020-03-28 02:12:32', '', 'beepress10-1585361552', '', 'inherit', 'open', 'closed', '', 'beepress10-1585361552', '', '', '2020-03-28 10:12:32', '2020-03-28 02:12:32', '', 91, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361552.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (97, 1, '2020-03-28 10:12:33', '2020-03-28 02:12:33', '', 'beepress3-1585361553', '', 'inherit', 'open', 'closed', '', 'beepress3-1585361553', '', '', '2020-03-28 10:12:33', '2020-03-28 02:12:33', '', 91, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361553.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (98, 1, '2020-03-28 10:12:33', '2020-03-28 02:12:33', '', 'beepress0-1585361553', '', 'inherit', 'open', 'closed', '', 'beepress0-1585361553', '', '', '2020-03-28 10:12:33', '2020-03-28 02:12:33', '', 91, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361553.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (99, 1, '2020-03-28 10:12:34', '2020-03-28 02:12:34', '', 'beepress4-1585361554', '', 'inherit', 'open', 'closed', '', 'beepress4-1585361554', '', '', '2020-03-28 10:12:34', '2020-03-28 02:12:34', '', 91, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361554.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (100, 1, '2020-03-28 10:12:34', '2020-03-28 02:12:34', '', 'beepress1-1585361554', '', 'inherit', 'open', 'closed', '', 'beepress1-1585361554', '', '', '2020-03-28 10:12:34', '2020-03-28 02:12:34', '', 91, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361554.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (101, 1, '2020-03-28 10:12:34', '2020-03-28 02:12:34', '', 'beepress4-1585361554-1', '', 'inherit', 'open', 'closed', '', 'beepress4-1585361554-1', '', '', '2020-03-28 10:12:34', '2020-03-28 02:12:34', '', 91, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361554-1.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (102, 1, '2020-03-28 10:12:34', '2020-03-28 02:12:34', '', 'beepress0-1585361554', '', 'inherit', 'open', 'closed', '', 'beepress0-1585361554', '', '', '2020-03-28 10:12:34', '2020-03-28 02:12:34', '', 91, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361554.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (103, 1, '2020-03-28 10:12:35', '2020-03-28 02:12:35', '<div class=\"bpp-post-content\">                                                                                                                            <h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\" ><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">一个 NIO 服务端启动需要哪些要素</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">一个典型的 NIO 服务端应该有哪些东西来支撑他的服务呢？</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">ServerSocketChannel</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">首先要有一个 ServerSocketChannel，就像流操作都要基于 Stream 对象一样， NIO 中的所有 I/O 操作都基于 Channel 对象。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">一个 Channel 代表着和某一实体的连接，这个实体可以是硬件设备、文件或者是网络套接字，通过 Channel 可以读写数据。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">NIO 中的 ServerSocketChannel 相当于普通 IO 中的 ServerSocket，而客户端的 SocketChannel 则相当于普通 IO 中的 Socket。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">Selector</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">另外还需要有一个 Selector，用来获取 Channel 的事件，Channel 有4种事件，分别是：</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">Accept：有可以接受的连接</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">Connect：已经连接成功</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">Read：有数据可以读取</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">Write：可以进行数据写入</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">如果我们直接从 Channel 中读取数据时，很可能会有问题，因为这时 Channel 中可能根本就没有数据可以读，而强行进行读取的话，会使线程挂起一直等待着数据的到来，直到有数据到达才被唤醒，那该线程在数据到达这段时间内将不做任何事情。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">通过 Selector 来检查 Channel 的状态变化，当具体的状态满足条件时向外发出通知即可，就跟监听器一样，我们将 Channel 注册到 Selector 上，然后告诉 Selector 我这个 Channel 所感兴趣的事件列表，接下来 Selector 就会负责把满足条件的事件通知到 Channel，这样的话 Channel 就不需要每次傻傻的来读取数据了。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">那 Channel 怎样才能知道他感兴趣的事件已经发生了呢，当 Channel 把自己感兴趣的事件注册到 Selector 上之后，只需要通过 Selector 提供的 select 方法去查询就好了。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">所以一个典型的 NIO 服务端是这样的：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;初始化服务端TCP连接通道</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />ServerSocketChannel&nbsp;serverChannel&nbsp;=&nbsp;ServerSocketChannel.open();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;设置为非阻塞模式</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />serverChannel.configureBlocking(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">false</span>);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;创建一个selector</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />Selector&nbsp;selector&nbsp;=&nbsp;Selector.open();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;把Channel注册到selector上</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />serverChannel.register(selector,&nbsp;SelectionKey.OP_ACCEPT);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;绑定端口</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />serverChannel.bind(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;InetSocketAddress(<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">8864</span>));<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">了解了 NIO 是怎么玩的之后，我们来分析下 Netty 服务端是怎么启动的，首先看一个最简单的 EchoServer 的启动代码：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\">EventLoopGroup&nbsp;bossGroup&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;NioEventLoopGroup(<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>);&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;1</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />EventLoopGroup&nbsp;workerGroup&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;NioEventLoopGroup();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">try</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;ServerBootstrap&nbsp;b&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;ServerBootstrap();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;b.group(bossGroup,&nbsp;workerGroup)&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.channel(NioServerSocketChannel.class)&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;2</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.option(ChannelOption.SO_BACKLOG,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">100</span>)<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.handler(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;LoggingHandler(LogLevel.INFO))&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;3</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.childHandler(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;ChannelInitializer&lt;SocketChannel&gt;()&nbsp;{&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;4</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">initChannel</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(SocketChannel&nbsp;ch)</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throws</span>&nbsp;Exception&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ChannelPipeline&nbsp;p&nbsp;=&nbsp;ch.pipeline();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.addLast(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;EchoServerHandler());<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;Start&nbsp;the&nbsp;server.</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;ChannelFuture&nbsp;f&nbsp;=&nbsp;b.bind(PORT).sync();&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;5</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;Wait&nbsp;until&nbsp;the&nbsp;server&nbsp;socket&nbsp;is&nbsp;closed.</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;f.channel().closeFuture().sync();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">finally</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;Shut&nbsp;down&nbsp;all&nbsp;event&nbsp;loops&nbsp;to&nbsp;terminate&nbsp;all&nbsp;threads.</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;bossGroup.shutdownGracefully();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;workerGroup.shutdownGracefully();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">整个过程主要有五个部分组成，如下图所示：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"一个 NIO 框架的启动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361551.png\" alt=\"一个 NIO 框架的启动\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">简单解释一下每个步骤的作用：</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">1、初始化两个 NioEventLoopGroup，这两个对象可以看做是传统 IO 编程模型中的线程组，bossGroup 主要进行监听端口，accept 新连接，并将新连接转交给 worker 线程去执行，workerGroup 主要是处理客户端请求的。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">2、通过指定一个 Channel 的 Class 来创建一个 Channel 工厂，后续通过该工厂来创建 Channel，实际上这里就统一了服务端的 IO 模型了，通过统一的 api 就能轻松的指定服务端的 IO 模型是 NIO 还是 BIO，只需要指定不同的 Channel 类型即可。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">3、添加一个 Server 端专属的 ChannelHandler。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">4、添加一个自定义的用来处理客户端请求的 ChannelHandler，主要用来进行编解码、数据读写、逻辑处理等。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">5、绑定端口并启动服务端。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">下面就对这五个步骤进行详细的分析，不过上面还有一个很重要的类没有说到，就是 ServerBootstrap 引导，他主要就是负责把所有的对象聚集在一起，然后把服务启动起来，所以不进行具体的描述。</p><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\">初始化 NioEventLoopGroup<br  /></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">NioEventLoopGroup 简单点理解就是线程组，他会持有一组线程，这里的线程就是 EventLoop。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">整个 NioEventLoopGroup 的初始化的过程如下图所示，具体的流程可以查看 NioEventLoopGroup 的构造方法的执行过程，这里不贴具体的代码了：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"一个 NIO 框架的启动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361551.jpg\" alt=\"一个 NIO 框架的启动\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">在 NioEventLoopGroup 初始化时，依次初始化了三个对象，分别是虚线框中黄色部分对应的对象。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(255, 104, 39);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">其中有一个对象 SelectorProvider 会在后续使用它来创建 Selector 对象。</strong></span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">在这些对象都初始化好之后，NioEventLoopGroup 会依次调用父类的构造方法，最终调用到父类 MultithreadEventExecutorGroup 中，然后再父类的构造方法中完成剩下的初始化工作，这些工作又可以分为四个部分：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"一个 NIO 框架的启动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361552.jpg\" alt=\"一个 NIO 框架的启动\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">我们来看这四个部分具体的实现。</p><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">初始化 Executor</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">首先是初始化一个 Executor 对象，代码如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">MultithreadEventExecutorGroup</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;nThreads,&nbsp;Executor&nbsp;executor,<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EventExecutorChooserFactory&nbsp;chooserFactory,&nbsp;Object...&nbsp;args)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;1.初始化&nbsp;executor</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(executor&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;executor&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;ThreadPerTaskExecutor(newDefaultThreadFactory());<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">executor 从 NioEventLoopGroup 中未进行初始化，一直到这里才进行初始化，这里默认是初始化的一个 ThreadPerTaskExecutor 对象，从类名中我们可以发现，这个 Executor 在接收到新的任务时，会为每个任务都创建一个线程来执行。</p><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">创建 EventExecutor 数组</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">第二步是创建一个 EventExecutor 数组，如下图所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">MultithreadEventExecutorGroup</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;nThreads,&nbsp;Executor&nbsp;executor,<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EventExecutorChooserFactory&nbsp;chooserFactory,&nbsp;Object...&nbsp;args)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;1.初始化&nbsp;executor</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;2.创建&nbsp;EventExecutor&nbsp;数组</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;children&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;EventExecutor[nThreads];<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">初始化 EventExecutor 数组</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">第三步就是对这个数组进行实例化，如下图所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">MultithreadEventExecutorGroup</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;nThreads,&nbsp;Executor&nbsp;executor,<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EventExecutorChooserFactory&nbsp;chooserFactory,&nbsp;Object...&nbsp;args)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;1.初始化&nbsp;executor</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;2.创建&nbsp;EventExecutor&nbsp;数组</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;3.初始化每一个&nbsp;EventExecutor</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">for</span>&nbsp;(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;i&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>;&nbsp;i&nbsp;&lt;&nbsp;nThreads;&nbsp;i&nbsp;++)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">boolean</span>&nbsp;success&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">false</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">try</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;children[i]&nbsp;=&nbsp;newChild(executor,&nbsp;args);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">true</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">catch</span>&nbsp;(Exception&nbsp;e)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;<span class=\"hljs-doctag\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">TODO:</span>&nbsp;Think&nbsp;about&nbsp;if&nbsp;this&nbsp;is&nbsp;a&nbsp;good&nbsp;exception&nbsp;type</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;IllegalStateException(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"failed&nbsp;to&nbsp;create&nbsp;a&nbsp;child&nbsp;event&nbsp;loop\"</span>,&nbsp;e);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">finally</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(!success)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;如果当前对象初始化失败，则将之前初始化的所有对象都关闭</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">这里需要注意的是，初始化 EventExecutor 对象的方法是 newChild，而这个方法的实现是在 NioEventLoopGroup 类中，具体的代码如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;EventLoop&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">newChild</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(Executor&nbsp;executor,&nbsp;Object...&nbsp;args)</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throws</span>&nbsp;Exception&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;NioEventLoop(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">this</span>,&nbsp;executor,&nbsp;(SelectorProvider)&nbsp;args[<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>],<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((SelectStrategyFactory)&nbsp;args[<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>]).newSelectStrategy(),&nbsp;(RejectedExecutionHandler)&nbsp;args[<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">2</span>]);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">可以看到最终创建的是一个 NioEventLoop 对象，并且<strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">该对象持有了 SelectorProvider 和 Executor 以及其他对象</strong>。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">但是我们的 children 数组中需要的 EventExecutor 对象，为什么这里 new 出来的是一个 NioEventLoop 对象呢？我们可以看一下 NioEventLoop 类的结构，如下图所示：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"一个 NIO 框架的启动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361552.jpg\" alt=\"一个 NIO 框架的启动\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">从类的结构图中可以看到， NioEventLoop 类继承自 SingleThreadEventLoop，而 SingleThreadEventLoop 类继承自 SingleThreadEventExecutor 类，并且实现了 EventLoop 接口。然后 SingleThreadEventExecutor 又继承自 AbstractScheduledEventExecutor 类。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">AbstractScheduledEventExecutor 类又继承自 AbstractEventExecutor，该类直接实现了 EvenExecutor 接口，所以 NioEventLoop 也就是成了一个 EventExecutor。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">从图中还可以看出，EventExecutor 还是继承自 ScheduleExecutorService 接口，这就说明了，EventExecutor 除了有线程池的能力，还具备调度的能力。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">所以 NioEventLoop 是一个具有线程池功能的事件循环器，并且还具有调度任务的功能，为什么要拥有调度的功能呢，因为 Netty 中有很多任务，包括需要定时执行的调度任务，和一次性执行的任务。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">但是 NioEventLoop 中负责执行具体任务的线程，是在 SingleThreadEventLoop 中创建的，并且只创建了一个线程，这一点从类名中就可以看出来。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">那为什么只创建一个线程呢，线程池如果只有一个线程的话，那意义不就很小了吗？其实这正是 Netty 设计的精美之处，通过一个线程来支撑所有的事件循环，从而避免了多线程之间的并发问题，也减少了线程切换所带来的性能损耗。Netty 通过充分压榨这一个线程的能力，实现了一种无锁化的高效的编程模型。</p><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">初始化 EventExecutorChooser</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">当上面的三个步骤都完成之后，最后一个步骤就是初始化一个 EventExecutorChooser，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">MultithreadEventExecutorGroup</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;nThreads,&nbsp;Executor&nbsp;executor,<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EventExecutorChooserFactory&nbsp;chooserFactory,&nbsp;Object...&nbsp;args)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;1.初始化&nbsp;executor</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;2.创建&nbsp;EventExecutor&nbsp;数组</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;3.初始化每一个&nbsp;EventExecutor</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;4.初始化&nbsp;EventExecutorChooser</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;chooser&nbsp;=&nbsp;chooserFactory.newChooser(children);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">这步主要是通过一个 chooserFactory 创建了一个 EventExecutorChooser，传递进去的参数则是 EventExecutor 数组，而 EventExecutorChooser 的作用就是从 EventExecutor 数组中选择一个可用的 EventExecutor。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(255, 104, 39);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">需要注意的是 newChooser 创建的 chooser 对象有两种类型，这取决于 children 的个数，如果个数是偶数，则选择 PowerOfTwoEventExecutorChooser，该类型的 chooser 在选择 EventExecutor 时采用位运算，效率非常高；如果个数是奇数则选择 GenericEventExecutorChooser，该类型的 chooser 在选择 EventExecutor 时采用取余运算，效率较低，这充分体现了 Netty 在性能优化上的考虑。</strong></span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">现在我们来总结一下初始化完 NioEventLoopGroup 之后一共创建了哪些对象：</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">Executor：创建了一个 Executor 对象，具体实例为：ThreadPerTaskExecutor</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">EventExecutor 数组：创建了一个大小为 nThread 的 EventExecutor 数组，每个实例都是一个 NioEventLoop</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">NioEventLoop：一个同时具备 execute 和 schedule 能力的 EventExecutor，并且每一个 NioEventLoop 只有一个 Thread 来支撑其运行</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">EventExecutorChooser：一个可以获取一个可用的 EventExecutor 的选择器</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">指定 Channel 类型</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">通过 .channel() 方法指定了一个 Channel 的 Class，该方法会创建一个 ChannelFactory，后续创建新的 Channel 则由该 ChannelFactory 来创建。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">具体是如何创建 Channel 的，只需要看下 ChannelFactory 是如何实现的即可，实际的 ChannelFactory 实例，是一个 ReflectiveChannelFactory：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;T&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">newChannel</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">try</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;clazz.getConstructor().newInstance();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">catch</span>&nbsp;(Throwable&nbsp;t)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;ChannelException(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"Unable&nbsp;to&nbsp;create&nbsp;Channel&nbsp;from&nbsp;class&nbsp;\"</span>&nbsp;+&nbsp;clazz,&nbsp;t);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">可以很清楚的知道，是通过反射获取到该类的构造方法，然后创建了一个实际。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">这里的 Channel 都是服务端的 Channel，另外该方法除了是创建了一个 Channel 工厂之外，更重要的是他指定了 IO 模型。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">我们使用 Netty 来进行编写网络应用时，一般都是使用它的 NIO 模型，因为这样才能够发挥出他最大的价值。但是如果你想使用 BIO 模型的话，也是支持的，只需要指定 Class 为：OioServerSocketChannel 即可。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">添加服务端 ChannelHandler</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">通过 .handler() 方法可以添加一个服务端的 ChannelHandler，该 ChannelHandler 是用来处理服务端的一些逻辑的，比如纪录一些日志等等。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">添加客户端 ChannelHandler</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">通过 .childHandler() 方法就可以添加一个用来处理 Client 端请求的 ChannelHandler，该 ChannelHandler 就是所有实际业务逻辑处理的核心部分。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">包括对客户端发送过来的数据进行解码，对数据进行逻辑处理，然后生成响应数据后写回客户端。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">绑定端口并启动</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">当以上的所有准备工作都执行完毕之后，服务端启动过程中最重要的部分就要开始执行了：那就是绑定端口，也就是执行 ServerBootstrap 的 bind 方法。该方法也可以拆分成两个独立的部分：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"一个 NIO 框架的启动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361553.png\" alt=\"一个 NIO 框架的启动\"  /></figure><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">初始化 Channel</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">initAndRegister 方法，主要做的就是初始化并注册 Channel 对象，这个 Channel 的类型就是开始的时候通过 .channel() 方法指定的类型。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">首先通过 ChannelFactory 创建一个我们所需类型的 Channel 对象，然后对这个 Channel 进行初始化，具体的代码如下：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;ChannelFuture&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">initAndRegister</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;Channel&nbsp;channel&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">try</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;创建一个&nbsp;channel</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;channel&nbsp;=&nbsp;channelFactory.newChannel();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init(channel);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">catch</span>&nbsp;(Throwable&nbsp;t)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><h5 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">创建 Channel</span></h5><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">我们先看下创建 Channel 的过程，上面我们已经分析过了 channelFactory.newChannel() 是通过反射创建了一个 Channel 的实例，而该 Channel 的 Class 是我们指定的 NioServerSocketChannel，现在我们需要知道该 Channel 是如何被创建的，整个过程也分为四个部分：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"一个 NIO 框架的启动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361553.png\" alt=\"一个 NIO 框架的启动\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">第一步，创建一个 ServerSocketChannel：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;SelectorProvider&nbsp;DEFAULT_SELECTOR_PROVIDER&nbsp;=&nbsp;SelectorProvider.provider();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;ServerSocketChannel&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">newSocket</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(SelectorProvider&nbsp;provider)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">try</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;provider.openServerSocketChannel();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">catch</span>&nbsp;(IOException&nbsp;e)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;ChannelException(<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"Failed&nbsp;to&nbsp;open&nbsp;a&nbsp;server&nbsp;socket.\"</span>,&nbsp;e);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(255, 104, 39);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">这里就是通过 JDK 底层的 SelectorProvider 创建了一个 ServerSocketChannel，后续都是通过该 Channel 对客户端请求进行 accept 操作。</strong></span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">PS：在创建 NioEventLoopGroup 时也创建了一个 SelectorProvider，不过该 provider 是为了在某个条件下重新创建一个新的 Selector ，通过 rebuildSelector 的方式来解决 JDK 的 epoll 空转的bug。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">第二步，将第一步创建的 ServerSocketChannel 以及一个感兴趣的事件传入并调用父类构造方法：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">NioServerSocketChannel</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(ServerSocketChannel&nbsp;channel)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">super</span>(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>,&nbsp;channel,&nbsp;SelectionKey.OP_ACCEPT);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;config&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;NioServerSocketChannelConfig(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">this</span>,&nbsp;javaChannel().socket());<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">这里的第二行代码，是将当前 NioServerSocketChannel 和 一个 ServerSocket 封装成一个 NioServerSocketChannelConfig。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">第三步，调用父类构造方法初始化一些变量：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">AbstractNioChannel</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(Channel&nbsp;parent,&nbsp;SelectableChannel&nbsp;ch,&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;readInterestOp)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">super</span>(parent);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">this</span>.ch&nbsp;=&nbsp;ch;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">this</span>.readInterestOp&nbsp;=&nbsp;readInterestOp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">try</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ch.configureBlocking(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">false</span>);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">catch</span>&nbsp;(IOException&nbsp;e)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">这一步主要是将一些变量保存起来，<strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">并设置了 channel 的阻塞模式为非阻塞模式</strong>。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">第四步，创建核心对象，包括 channelId，unsafe，pipeline：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">AbstractChannel</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(Channel&nbsp;parent)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">this</span>.parent&nbsp;=&nbsp;parent;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;id&nbsp;=&nbsp;newId();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;unsafe&nbsp;=&nbsp;newUnsafe();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;pipeline&nbsp;=&nbsp;newChannelPipeline();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">因为我们本篇文章是对服务器启动流程的分析，所以这里不对每一个对象的创建过程进行分析了，只需要知道是在创建 NioServerSocketChannel 的时候，创建了 channelId，unsafe 和 pipeline 对象。后面的操作中会用到这些对象。</p><h5 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">初始化 Channel</span></h5><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">初始化 Channel 的 init 方法 在 AbstractBootstrap 中是一个抽象方法，具体的实现在 ServerBootstrap 中，我们来看下具体的实现：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">init</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(Channel&nbsp;channel)</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throws</span>&nbsp;Exception&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;获取Channel的pipeline</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;ChannelPipeline&nbsp;p&nbsp;=&nbsp;channel.pipeline();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;EventLoopGroup&nbsp;currentChildGroup&nbsp;=&nbsp;childGroup;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;该childHandler对象是在创建ServerBootstrap对象时，通过childHandler方法创建的</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;ChannelHandler&nbsp;currentChildHandler&nbsp;=&nbsp;childHandler;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;把在创建ServerBootstrap对象时，创建的channelHandler和childHandler对象都添加到</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;channel的pipeline中去</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;p.addLast(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;ChannelInitializer&lt;Channel&gt;()&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">initChannel</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;Channel&nbsp;ch)</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throws</span>&nbsp;Exception&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;ChannelPipeline&nbsp;pipeline&nbsp;=&nbsp;ch.pipeline();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ChannelHandler&nbsp;handler&nbsp;=&nbsp;config.handler();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(handler&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pipeline.addLast(handler);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ch.eventLoop().execute(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Runnable()&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">run</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pipeline.addLast(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;ServerBootstrapAcceptor(<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ch,&nbsp;currentChildGroup,&nbsp;currentChildHandler,&nbsp;currentChildOptions,&nbsp;currentChildAttrs));<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;});<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">这里初始化最主要的工作就是为 NioServerSocketChannel 的 pipeline 添加了一个 ChannelHandler。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">该 ChannelHandler 就是来处理客户端连接的接入的，通过 ServerBootstrapAcceptor 来实现。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">其中的 currentChildGroup 就是我们创建的 workerGroup，currentChildHandler 则是我们通过 childHandler 方法指定的处理客户端请求的 ChannelHandler。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">所以 ServerBootstrapAcceptor 主要的工作就是接受客户端的请求，并将请求转发给 workGroup 去处理，具体的处理逻辑由用户自定义的 ChannelHandler 确定。</p><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">注册 Channel</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">对 Channel 初始化完了之后，现在就需要对 Channel 进行注册了，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;ChannelFuture&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">initAndRegister</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;Channel&nbsp;channel&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;创建并初始化&nbsp;channel</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;ChannelFuture&nbsp;regFuture&nbsp;=&nbsp;config().group().register(channel);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">config().group() 返回的是 bootstrap 的 group 属性，也就是我们创建 ServerBootstrap 时传入的 bossGroup，他是一个 NioEventLoopGroup 实例。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">整个注册的过程也分为四个部分：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"一个 NIO 框架的启动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361554.png\" alt=\"一个 NIO 框架的启动\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">第一步，调用 NioEventLoopGroup 的注册方法，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">abstract</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">MultithreadEventLoopGroup</span>&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">MultithreadEventExecutorGroup</span>&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">EventLoopGroup</span>&nbsp;</span>{&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;ChannelFuture&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">register</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(Channel&nbsp;channel)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;next().register(channel);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">其中 next() 的方法实现是在父类 MultithreadEventExecutorGroup 中，也就是第二步的操作。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">第二步，获取一个可用的 EventExecutor，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">abstract</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">MultithreadEventExecutorGroup</span>&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">AbstractEventExecutorGroup</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;EventExecutor&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">next</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;chooser.next();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">看到 chooser 我们应该马上反应出来，这个对象是在初始化 NioEventLoopGroup 的时候创建的，同时还通过 newChild 方法创建了 nThreads 个 EventExecutor，并将这些 EventExecutor 都保存在了一个叫 children 的数组中，这里的 EventExecutor 实例是一个 NioEventLoop 。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">chooser 选择器的 next 方法其实就是从 children 数组中获取一个可用的 EventExecutor，也就是获取一个可用的 NioEventLoop，所以 next().register(channel) 的方法，实际上是执行的 NioEventLoop 的 register(channel) 方法。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">第三步，执行 NioEventLoop 的 register 方法，该方法是在 NioEventLoop 的父类 SingleThreadEventLoop 中实现的，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">abstract</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">SingleThreadEventLoop</span>&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">SingleThreadEventExecutor</span>&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">EventLoop</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;ChannelFuture&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">register</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(Channel&nbsp;channel)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;register(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;DefaultChannelPromise(channel,&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">this</span>));<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;ChannelFuture&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">register</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;ChannelPromise&nbsp;promise)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ObjectUtil.checkNotNull(promise,&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"promise\"</span>);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;promise.channel().unsafe().register(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">this</span>,&nbsp;promise);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;promise;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">第四步，执行 unsafe 的 register 方法，看到 unsafe 我们也应该马上就想到，该对象是在初始化 NioServerSocketChannel 的时候，在父类 AbstractChannel 中通过 newUnsafe() 方法初始化的，所以我们回到 AbstractChannel 中查看 newUnsafe 方法创建的 unsafe 对象到底是什么。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">但是很可惜，该方法是一个抽象方法，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">abstract</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">AbstractChannel</span>&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">DefaultAttributeMap</span>&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Channel</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">abstract</span>&nbsp;AbstractUnsafe&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">newUnsafe</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span></span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">所以需要到 AbstractChannel 的子类中寻找该方法的实现，并且该子类也要满足是 NIOServerSocketChannel 的父类，所以很容易找到，该实现类是：AbstractNioMessageChannel，现在看下 newUnsafe 方法创建的 unsafe 对象是什么，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;AbstractNioUnsafe&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">newUnsafe</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;NioMessageUnsafe();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">NioMessageUnsafe</span>&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">AbstractNioUnsafe</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">所以现在我们得到了 unsafe 对象的实例是 NioMessageUnsafe，接下来就看 NioMessageUnsafe 的 register 方法了，该方法是在父类 AbstractUnsafe 中实现的，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">register</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(EventLoop&nbsp;eventLoop,&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;ChannelPromise&nbsp;promise)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;AbstractChannel.<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">this</span>.eventLoop&nbsp;=&nbsp;eventLoop;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(eventLoop.inEventLoop())&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;register0(promise);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">else</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">try</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eventLoop.execute(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Runnable()&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">run</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;register0(promise);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">catch</span>&nbsp;(Throwable&nbsp;t)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">但是该方法仍然不是最终的注册方法，又调用了一个叫 register0 的方法，但是该方法调用在两个分支内：</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">如果 eventLoop.inEventLoop 为 true 则直接调用</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">否则将该方法封装成一个 Runnable 交给 eventLoop 去执行</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(255, 104, 39);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">这里我们需要注意的是 Netty 的 EventLoop 底层是使用的一个单线程来支撑他的工作的，很多操作都会看到对于当前线程的判断，这正是 Netty 线程模型高效的原因所在。</strong></span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">让该线程执行某个方法之前，要先判断，当前是否在 EventLoop 线程之中，如果在的话就直接执行，否则将需要执行的方法封装成一个 Runnable 交给 EventLoop 去调度，EventLoop 会在下个时间点来执行该任务，并且是在 EventLoop 线程中执行。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">该方法可以拆分成两个部分，如下图所示：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"一个 NIO 框架的启动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361554.png\" alt=\"一个 NIO 框架的启动\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">第一步调用的是 doRegister 方法，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">register0</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(ChannelPromise&nbsp;promise)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">try</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;执行具体的注册</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doRegister();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">catch</span>&nbsp;(Throwable&nbsp;t)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分的代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">doRegister 方法在 AbstractChannel 中是一个空实现，所以我们需要到他的子类中去寻找具体的实现，很容易我们在 AbstractNioChannel 中找到了该方法的实现，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">doRegister</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throws</span>&nbsp;Exception&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">boolean</span>&nbsp;selected&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">false</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">for</span>&nbsp;(;;)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">try</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectionKey&nbsp;=&nbsp;javaChannel().register(eventLoop().unwrappedSelector(),&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>,&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">this</span>);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">catch</span>&nbsp;(CancelledKeyException&nbsp;e)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(!selected)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eventLoop().selectNow();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selected&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">true</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">else</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throw</span>&nbsp;e;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">到这里就是最底层的调用了，这里的 JavaChannel() 方法获取到的就是我们创建 NioServerSocketChannel 时通过 provider.openServerSocketChannel() 方法创建的 ServerSocketChannel。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">而 eventLoop().unwrappedSelector() 方法获取到的则是通过 provider.openSelector() 创建的一个原始的 Selector 对象。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">换一个写法这步操作实际上就是：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\">ServerSocketChannel.register(Selector,&nbsp;interest&nbsp;set);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(255, 104, 39);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">就是通过这一步操作把 ServerSocketChannel 感兴趣的事件注册到 JDK 底层的一个 Selector 上。</strong></span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">但是有可能这个这个时候，注册事件有可能失败，所以需要立即执行一次 selector 的 selectNow 方法，因为这个被“取消”的SelectionKey 可能还缓存着没有被移除。然后尝试进行第二次注册，如果成功的话就直接返回，如果还是失败的话就抛出异常。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">第二步，通过 pipeline 触发 handler 中的某些回调方法，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">register0</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(ChannelPromise&nbsp;promise)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">try</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;执行具体的注册</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pipeline.invokeHandlerAddedIfNeeded();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;safeSetSuccess(promise);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pipeline.fireChannelRegistered();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(isActive())&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(firstRegistration)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pipeline.fireChannelActive();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">else</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(config().isAutoRead())&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;beginRead();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">catch</span>&nbsp;(Throwable&nbsp;t)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">首先通过 pipeline 的 invokeHandlerAddedIfNeeded 方法来触发调用那些通过 pipeline.addLast() 方法添加的 ChannelHandler 的 channelAdded() 方法。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">然后通知 promise 已经成功了，现在可以执行监听器的 operationComplete 方法了。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">最后 isActive() 方法默认是返回的 false，因为到现在我们还没有绑定端口呢。</p><h4 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 14px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">绑定端口</span></h4><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">当 Channel 已经创建、初始化、并成功注册好之后，最后就需要执行端口绑定了，现在回到 ServerBootstrap 的 doBind 方法中，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;ChannelFuture&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">doBind</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;SocketAddress&nbsp;localAddress)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;初始化Channel并进行注册</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;省略部分代码</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(regFuture.isDone())&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ChannelPromise&nbsp;promise&nbsp;=&nbsp;channel.newPromise();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doBind0(regFuture,&nbsp;channel,&nbsp;localAddress,&nbsp;promise);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;promise;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">else</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;PendingRegistrationPromise&nbsp;promise&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;PendingRegistrationPromise(channel);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;regFuture.addListener(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;ChannelFutureListener()&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">operationComplete</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(ChannelFuture&nbsp;future)</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throws</span>&nbsp;Exception&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Throwable&nbsp;cause&nbsp;=&nbsp;future.cause();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(cause&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;promise.setFailure(cause);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">else</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;promise.registered();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doBind0(regFuture,&nbsp;channel,&nbsp;localAddress,&nbsp;promise);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;promise;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">当注册的结果 regFuture 已经完成了，那么就可以直接执行绑定操作了，否则需要在 regFuture 上增加一个监听器，当注册完成时再执行绑定操作，不管怎么样，具体的绑定操作都是在 doBind0 方法中，如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">doBind0</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;ChannelFuture&nbsp;regFuture,&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;Channel&nbsp;channel,<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;SocketAddress&nbsp;localAddress,&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">final</span>&nbsp;ChannelPromise&nbsp;promise)</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;channel.eventLoop().execute(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Runnable()&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">run</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(regFuture.isSuccess())&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;channel.bind(localAddress,&nbsp;promise).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">else</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;promise.setFailure(regFuture.cause());<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;});<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">doBind0 的方法可以拆分成以下几个部分：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"一个 NIO 框架的启动\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361554-1.png\" alt=\"一个 NIO 框架的启动\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">中间的几步调用过程这里就不再赘述了，大家可以从源码中跟一下，我们直接跳到最后一步调用 unsafe 的 bind 方法，不出意外就是在这一步进行了 JDK 底层 Channel 的端口绑定了，最终代码如下：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">NioServerSocketChannel</span>&nbsp;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">AbstractNioMessageChannel</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">io</span>.<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">netty</span>.<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">channel</span>.<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">socket</span>.<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">ServerSocketChannel</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">doBind</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">(SocketAddress&nbsp;localAddress)</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">throws</span>&nbsp;Exception&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(PlatformDependent.javaVersion()&nbsp;&gt;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">7</span>)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;javaChannel().bind(localAddress,&nbsp;config.getBacklog());<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">else</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;javaChannel().socket().bind(localAddress,&nbsp;config.getBacklog());<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">看到这里一切就都清楚了，终于将端口绑定到了 ServerSocketChannel 上去了。</p><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">Netty 启动过程总结</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">下面我们总结下 Netty 是如何在整个启动过程中，把 NIO 那一套启动步骤完美的分散到各个地方去的。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">ServerSocketChannel 在哪创建的</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">首先需要知道 Netty 是在哪里创建的 ServerSocketChannel，是在初始化 NioServerSocketChannel 对象的时候在 newSocket 方法中，通过 provider.openServerSocketChannel() 创建的。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">非阻塞模式在哪设置的</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">同样是在初始化 NioServerSocketChannel 对象的时候，在调用到父类 AbstractNioChannel 的构造方法的时候，执行的 ch.configureBlocking(false)。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">Selector 在哪创建的</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">在 NioEventLoop 中通过 provider.openSelector() 创建的，并将该 Selector 对象存放在一个叫 unwrappedSelector 的变量中。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">而 NioEventLoop 中的 provider，是在初始化 NioEventLoopGroup 时，通过 SelectorProvider.provider() 创建的，并最终传递给了 NioEventLoop。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">Channel 是什么时候注册到 Selector 上去的</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">在 initAndRegister 方法中最终执行到了 AbstractNioChannel 中的 doRegister 方法，在该方法中将 Channel 注册到 Selector 上去的。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">端口是什么时候绑定的</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">在 ServerBootstrap 的 doBind 方法中会先执行 initAndRegister 方法，执行完之后就会执行 doBind0 来进行端口绑定，最终会执行到 NioServerSocketChannel 类中的 doBind 方法，在该方法中完成了 JDK 底层端口的绑定。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><br  /></p><p style=\"white-space: normal;\"><span style=\"color: rgb(255, 104, 39);font-size: 16px;\">推荐阅读</span></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484172&amp;idx=1&amp;sn=8f9eaec88e04588e76b0c4958162e6af&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">线程池是怎样工作的</span></a></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484193&amp;idx=1&amp;sn=0953118972d8fdff36fae804eb5fcc8b&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">什么是 Arthas</span></a><br  /></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484110&amp;idx=1&amp;sn=2a3dbfb804f282160e288d9178b2665e&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">怎样编写一个 Web 容器</span></a></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484154&amp;idx=1&amp;sn=c99d867ebe79e5b3fa784beff06d52b7&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">更好的使用 Nacos 配置中心</span></a></p><p style=\"white-space: normal;\"><br  /></p><p style=\"white-space: normal;text-align: center;\"><img class=\"\"       style=\"box-shadow: rgb(170, 170, 170) 0em 0em 1em 0px;width: 35%;border-radius: 0px;height: auto !important;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361554.jpeg\" alt=\"一个 NIO 框架的启动\" title=\"一个 NIO 框架的启动\"  /></p><p>&nbsp; &nbsp;&nbsp;<br  /></p> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（逐码）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/3eWyOgWCDeuQB0x3qxueow\" rel=\"noopener noreferrer\">一个 NIO 框架的启动</a></p></blockquote></div>', '一个 NIO 框架的启动', '', 'inherit', 'closed', 'closed', '', '91-revision-v1', '', '', '2020-03-28 10:12:35', '2020-03-28 02:12:35', '', 91, 'https://www.javashitang.com/?p=103', 0, 'revision', '', 0);
INSERT INTO `wp_posts` VALUES (104, 1, '2019-04-03 00:00:50', '2020-03-28 02:12:56', '<div class=\"bpp-post-content\">                                                                                                                            <p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\" >我们的程序要运行，离不开CPU、内存、IO设备，但是他们三者之间的执行速度是有差异的。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">CPU 的执行速度最快，内存的速度次之，IO设备的速度最慢。</p><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">为什么会有内存缓存</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">CPU 执行一条指令非常快，但是他从内存中读取某个数据时，就需要等待很长的时间，为了弥补速度上的巨大差异，让 CPU 不被内存拖垮，所以在 CPU 上增加了缓存。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">当 CPU 请求内存中的数据时，会先查看缓存中是否有该数据，如果存在则直接返回该数据；如果不存在，则要先把内存中的数据载入缓存，然后再返回给 CPU。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">所以我们的程序在执行时，往往就需要将数据从内存中读取出来载入到缓存中，然后进行处理，处理完成之后再将数据回写到内存中去。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">除此以外，现代的计算机都是多CPU、多核的，程序也不再只运行在单一线程中，而是有多个线程在运行。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">每个线程都会维护一份自己的内存副本，也就是 CPU 缓存，所以线程之间一定会存在数据一致性的问题。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">一般来说，导致并发问题的根源不外乎以下这几个原因：</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">可见性：一个线程对共享变量的修改，另一个线程是否可见？</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">原子性：一个或多个操作在 CPU 执行的过程中是否会被中断？</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">有序性：程序编译后的指令是否会按照代码原本的顺序执行？</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">遗憾的是，以上三个问题的答案都是不确定的，正因为这些不确定所以才会存在并发下的各种问题。</p><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">什么是可见性</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">如果我们的程序是在单个 CPU 上执行的，那么对于一个变量的原子性操作，无论如何都是不会出现问题的，不管是由一个线程还是多个线程来操作该变量，对结果都不会造成影响，因为内存的副本只有一个。</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"并发问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585361576.jpeg\" alt=\"并发问题是怎样造成的\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">在单个 CPU 上操作虽然不会有问题，但是要强调一点，就是这个操作必须是原子性的。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">比如线程A 设置变量 V 的值为10，那线程B获取到该变量的值就是10，不会出现问题。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">但是我们的程序是不可能只在单个 CPU 上运行的，而是要在多个 CPU 上运行的，在多个 CPU 上执行时，就会出现问题。</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"并发问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361577.jpeg\" alt=\"并发问题是怎样造成的\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">如线程A 在CPU1 中对变量 V 设置了一个新的值，但是线程B是在 CPU2 中，而 CPU1 对缓存进行了修改，并不会通知到 CPU2，所以这时线程B 拿到的变量 V 的值还是原来的老的值，也就是脏数据。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">所以这就是导致并发问题的第一个原因，在一个线程中对共享变量的更改，对其他的线程是不可见的。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">一个不可见性的示例</span></h3><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;counter;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">boolean</span>&nbsp;stop;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Reader</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Runnable</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;newestCounter;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">run</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">while</span>&nbsp;(!stop)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(newestCounter&nbsp;!=&nbsp;counter)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newestCounter&nbsp;=&nbsp;counter;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"Reader&nbsp;has&nbsp;read&nbsp;a&nbsp;new&nbsp;value=\"</span>&nbsp;+&nbsp;newestCounter);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"Reader&nbsp;stopped&nbsp;at:\"</span>&nbsp;+&nbsp;System.currentTimeMillis());<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Writer</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Runnable</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">run</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">for</span>&nbsp;(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;i&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>;&nbsp;i&nbsp;&lt;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">5</span>;&nbsp;i++)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counter&nbsp;=&nbsp;i;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"writer&nbsp;has&nbsp;write&nbsp;a&nbsp;new&nbsp;value&nbsp;to&nbsp;counter=\"</span>&nbsp;+&nbsp;counter);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;等待&nbsp;Reader&nbsp;去读取&nbsp;counter&nbsp;的变化</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">try</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.sleep(<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">1000</span>);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">catch</span>&nbsp;(InterruptedException&nbsp;e)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stop&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">true</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"Writer&nbsp;set&nbsp;stop&nbsp;at:\"</span>&nbsp;+&nbsp;System.currentTimeMillis());<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">有两个线程，一个 Reader 线程，一个 Writer 线程，并且有两个共享变量：counter 和 stop 标志位。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">启动完两个线程之后，打印出如下结果：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\">writer&nbsp;has&nbsp;write&nbsp;a&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;value&nbsp;to&nbsp;counter=<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">1</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />Reader&nbsp;has&nbsp;read&nbsp;a&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;value=<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">1</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />writer&nbsp;has&nbsp;write&nbsp;a&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;value&nbsp;to&nbsp;counter=<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">2</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />writer&nbsp;has&nbsp;write&nbsp;a&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;value&nbsp;to&nbsp;counter=<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">3</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />writer&nbsp;has&nbsp;write&nbsp;a&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;value&nbsp;to&nbsp;counter=<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">4</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />writer&nbsp;has&nbsp;write&nbsp;a&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;value&nbsp;to&nbsp;counter=<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">5</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />Writer&nbsp;set&nbsp;stop&nbsp;at:<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">1553871839283</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">Writer 线程每隔一秒更新一次 counter 的值， Reader 线程只读取到第一次 counter 的变化后的值，后面的值变更，都没有读取到，因为此时 Reader 线程已经将 counter 的值缓存在本地的内存副本中了， Writer 线程再怎么修改 counter 的值， Reader 线程也不会知道的，所以说 Writer 线程对于 counter 的修改，对 Reader 线程是不可见的。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">同样的， Reader 线程启动后，读取到 stop 变量的值为 false，在后续 Writer 线程将 stop 的值更新为 true 之后， Reader 线程也不会感知到，所以该程序会一直运行下去，因为 Reader 线程中的 stop 状态永远是 false。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">如果我们将 Writer 线程中的休眠1s的代码注释掉，那么 Reader 线程可能会读取到 stop 为 true。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">为了解决这个问题，Java 给我们提供了一个 volatile 关键字，用来保证可见性。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">当一个变量被 volatile 修饰后，表示着线程本地内存无效，当一个线程修改共享变量后他会立即被更新到主内存中，当其他线程读取共享变量时，它会直接从主内存中读取。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">将上述的代码中 counter 改为如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">volatile</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;counter;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">即可返回正确的结果，Writer 线程每次对 counter 所做的修改，Reader 线程都能感知到，也就是说 Writer 对变量 counter 做的修改，对 Reader 线程是可见的。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">除了 volatile 可以保证可见性之外，synchronized 关键字和 Lock 都能保证可见性，但是和 volatile 比起来，加锁的方式都太重了，涉及到线程的阻塞与唤醒。</p><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">为什么会有线程切换</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">我们的程序都是由非常多的线程来协作执行的，而具体的执行都是给 CPU 下达指令，让 CPU 去执行的。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">那么每个线程该怎么使唤 CPU 让他为自己干活呢？CPU 又是怎样接受和处理这么多线程下发给自己的指令的呢？</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">由于 CPU 的执行非常快，而线程下发给他的任务有可能很快就执行完了，也可能由于其他的原因导致要执行很久。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">如果一个任务执行的时间很久，是否需要一直占着 CPU 资源呢？</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">那 CPU 肯定不会同意的，CPU 为了更高效的处理各种任务，会为每个线程分配一段差不多长的时间用来执行他们的任务，当时间用完了之后，就去执行其他线程的任务了，这个时间就称为 “时间片” ，执行不同的任务就是线程之间的切换了。</p><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">什么是原子性</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">虽然 CPU 通过时间片和线程切换，提高了程序运行的效率，但是说到线程切换，就可能导致另一种问题。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">那么线程切换会在什么时候发生呢，在 CPU 指令执行完成之后的任何时间点都可能发生线程切换。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">所以对于非原子操作就可能，操作执行了一半，发生了线程切换，另外的操作没来得及执行，要等到下一个线程切换时，轮到自己占有 CPU 时，才能完成剩下的操作。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">但是这样明显是有问题的，你执行了一半的操作，CPU 到别的地方转了一圈回来之后，你原本的操作结果很可能就不对了，为什么会不对呢，因为你在等待 CPU 的这段时间内，很可能有别的线程也执行了和你相同的事。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">我们知道数据库事务中也有原子性的概念，他主要说的是事务中的多个操作，要么全部执行，要么全部不执行。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">但是 Java 中的原子性，并不能保证要么全部执行，要么全部不执行，反而是很可能多个操作只执行了一部分。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">说了这么多的 “操作”，Java 中的一条语句难道不就是一条 “操作” 吗？</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">Java 中的一条语句还真不一定是一条 “操作”，这里说的 “操作” 是对 CPU 而言的，指的是一条指令。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">而我们 Java 中的一条语句可能由一条指令组成，也可能由多条指令组成，操作系统只能保证一条指令的原子性，也就是要么该条指令执行，要么该条指令不执行，但是并不能保证多条指令的原子性。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">所以说虽然线程切换解决了性能问题，但是却带来了原子性的问题。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">Java 中的自增运算是一个典型的非原子性的操作，为什么这么说呢？</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">自增运算看似是一条语句，但是实际上需要三条 CPU 指令构成，分别是：取值，值加1，回写值。</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"并发问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585361577.jpeg\" alt=\"并发问题是怎样造成的\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">假设我们有一个变量 V，初始值是0，当两个线程都对变量 V 执行自增操作，正常情况下，我们期望的结果是最终变量 V 的值是2，但是很可能由于县城切换导致，最终被更新到内存中的变量的值是1。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">线程 A 从内存中获取到变量 V 的值为0，然后还没来得及执行后续的指令，就发生了线程切换，线程 B 这时从内存中获取到变量 V 的值也为 0，然后执行了后续的指令，将值加1并把值回写到了内存中，这时内存中的变量 V 的值为1。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">然后又发生了线程切换，线程 A 重新获得了 CPU 资源，继续执行未完成的指令，最终的也将变量 V 的值更新为1，然后写入到了内存中。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">整个过程由于发生了线程切换，导致非原子性的操作的结果出现了问题，事实上只要线程 A 在执行玩第一步或者第二步指令之后发生了线程切换，都会导致问题的发生。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">而当线程 A 在执行完了第三步指令之后，再发生线程切换的话，则不会出现问题，原因是第三步指令执行完之后，内存中的变量值已经更新为最新值了，即便发生了线程切换，其他线程也会从内存中获取到最新的值。当然啦，假如第三步指令都执行完了，那整个过程就相当于是一个原子性的过程了，那就不存在由于线程切换而导致的问题了。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">一个非原子性的示例</span></h3><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;increment&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">10000</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;unsafeCounter&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">unsafeIncrease</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;idx&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">while</span>&nbsp;(idx++&nbsp;&lt;&nbsp;increment)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsafeCounter++;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;多个线程执行不安全的非原子性操作</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />Runnable&nbsp;runnable&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Runnable()&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">run</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsafeIncrease();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />};<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />Thread&nbsp;t1&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Thread(runnable);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />Thread&nbsp;t2&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Thread(runnable);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />t1.start();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />t2.start();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />t1.join();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />t2.join();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />System.out.println(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"unsafeCounter=\"</span>&nbsp;+&nbsp;unsafeCounter);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">执行上述代码之后，你会发现，unsafeCounter 的值是一个1000~2000之间的数字。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">一个原子性的示例</span></h3><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;increment&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">10000</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;AtomicInteger&nbsp;safeCounter&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;AtomicInteger(<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">safeIncrease</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;idx&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">while</span>&nbsp;(idx++&nbsp;&lt;&nbsp;increment)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;safeCounter.incrementAndGet();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;多个线程执行安全的原子性操作</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />Runnable&nbsp;runnable&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Runnable()&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">run</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;safeIncrease();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />};<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />Thread&nbsp;t1&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Thread(runnable);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />Thread&nbsp;t2&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Thread(runnable);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />t1.start();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />t2.start();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />t1.join();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />t2.join();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />System.out.println(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"safeCounter=\"</span>&nbsp;+&nbsp;safeCounter);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">执行上述代码之后，你会发现，safeCounter 的值确实是2000。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">为什么使用 AtomicInteger 就能保证原子性呢，这些 Atomic* 开头的类都是为了解决原子性的问题而存在的，为什么他们就能保证原子性呢，原因是他们底层是通过 CAS 实现的。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">通过 CAS 来设置某个变量的值时，会先检查该变量内存中的值是否与当前期望的值一致，如果发现不一致则会重新获取内存中的最新值，直到内存中的值与当前期望的值一致时，才将最新的值更新到内存中去，所以整个过程是原子性的。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">复合原子操作是不是原子性的</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">现在我们知道了一个操作必须是原子性的才能保证在并发的情况下不出问题，具体可以使用原子类 Atomic* 来代替原始的变量。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">但是 Atomic* 能否保证永远不出问题呢？</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">答案是不会，只要使用的不正确，Atomic* 也会出现问题，例如下面的代码：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>[]&nbsp;nodes&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>[]{<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">2</span>};<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;AtomicInteger&nbsp;nodeIndex&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;AtomicInteger(<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">unsafeAtomic</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;i&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">while</span>&nbsp;(i++&nbsp;&lt;&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">100</span>)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;获取当前节点的索引，并将索引加1</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;value&nbsp;=&nbsp;nodes[nodeIndex.getAndIncrement()];<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;如果索引值等于节点的长度了，则设置为0</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodeIndex.compareAndSet(nodes.length,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"Thread=\"</span>&nbsp;+&nbsp;Thread.currentThread().getName()&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"&nbsp;current&nbsp;node&nbsp;value=\"</span>&nbsp;+&nbsp;value);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">上述代码是模拟轮询获取可用节点的功能，假设有两个节点，我们希望在多线程下能够交替返回每一个节点给调用方，这样可以做到负载均衡。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">但是上述代码无法做到交替返回，原因是 getAndIncreament() 和 compareAndSet() 方法虽然都是原子操作，但是他们放在一起作为一个复合操作就不是原子的了。</p><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">为什么会有重排序</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">编译器或运行时环境为了优化程序性能，通常会对指令进行重新排序，所以重排序分两种，分别是编译期重排序和运行期重排序。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">对于我们程序员来说，不要假设指令执行的顺序，因为我们无法预知不同线程之间的指令会以何种顺序执行。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">java 会为了提升程序的性能，将指令进行重排，这又是一种导致并发环境下可能出错的情况。</p><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">什么是有序性</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">在程序执行过程中，按照代码的顺序先后执行，这就是有序性，但是通过上面的介绍我们知道，不采取措施的话有序性是无法保证的。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">因为我们写的代码，在编译期就已经发生了变化，而在最终执行时也可能发生变化，如果我们进行干涉的话，执行的结果很可能会发生不可预知的变化。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">一个有序性的示例</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">一个最经典的有序性的问题就是，获取单例对象时，通过双重检查来保证对象只创建了一次，具体代码如下：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Singleton</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;Singleton&nbsp;instance;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;Singleton&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">getInstance</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(instance&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">synchronized</span>&nbsp;(Singleton.class)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(instance&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Singleton();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;instance;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">上述的代码乍看上去是没有问题的，如果不是指令重排序的话，也确实不会出现问题，但正是由于重排序的原因导致返回的单例对象可能出现问题。</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"并发问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585361578.jpeg\" alt=\"并发问题是怎样造成的\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">线程A来获取单例对象，这时发现instance==null，所以就进入了加锁创建单例对象的代码块。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">本来正常情况下，创建了一个对象然后返回就可以了，但是因为重排序的原因，创建对象的过程被重排序了：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"并发问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585361579.jpeg\" alt=\"并发问题是怎样造成的\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">正常应该是先初始化对象，然后再将分配好的内存指向该对象，但是重排序后的结果变成了，先将分配好的内存指向了对象，然后再初始化对象。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">问题就出在这里，当将分配好的内存指向该对象后，如果发生了线程切换，线程B来获取单例对象时，发现单例对象已经不为空了，所以直接就拿该对象去操作了，但是该对象并没有进行过初始化，所以线程B后续再执行时就会出现空指针的问题。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">为了解决重排序的问题，需要我们写代码时进行人为干预，具体怎么干预呢？那就是通过 volatile 关键字，可是上面我们刚说了 volatile 是解决可见性的问题的啊。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">没错 volatile 除了可以解决可见性问题，也可以解决有序性的问题，通过 volatile 修饰的变量，编译器和运行时环境不会对他进行指令重排。</p><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">并发问题是怎样造成的</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">通过上面的分析，我们知道了造成并发问题的原因了，这些都是操作系统或者编译期为了提升性能而做了一些努力，但是为了享受到这些性能上的优势，我们就得付出更多的代价来写出复杂的代码。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">换句话说，硬件上为了最求卓越的性能，而忽略了软件实现上的复杂度，相当于硬件工程师给软件工程师挖了一个坑。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">CPU上的高速缓存造成了多线程下共享变量的可见性问题，可以通过 volatile 或加锁的方式来解决。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">线程切换造成了多线程下原子性的问题，可以通过原子类或加锁的方式来解决。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">编译器或者运行环境为了优化程序性能造成了有序性的问题，可以通过 volatile 禁止指令重排。</p><p><br  /></p><p style=\"white-space: normal;\"><span style=\"color: rgb(255, 104, 39);font-size: 16px;\">推荐阅读</span></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484172&amp;idx=1&amp;sn=8f9eaec88e04588e76b0c4958162e6af&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">线程池是怎样工作的</span></a></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484193&amp;idx=1&amp;sn=0953118972d8fdff36fae804eb5fcc8b&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">什么是 Arthas</span></a><br  /></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484110&amp;idx=1&amp;sn=2a3dbfb804f282160e288d9178b2665e&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">怎样编写一个 Web 容器</span></a></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484154&amp;idx=1&amp;sn=c99d867ebe79e5b3fa784beff06d52b7&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">更好的使用 Nacos 配置中心</span></a></p><p style=\"white-space: normal;\"><br  /></p><p style=\"white-space: normal;text-align: center;\"><img class=\"\"       style=\"box-shadow: rgb(170, 170, 170) 0em 0em 1em 0px;width: 35%;border-radius: 0px;height: auto !important;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress2-1585361579.jpeg\" alt=\"并发问题是怎样造成的\" title=\"并发问题是怎样造成的\"  /></p><p style=\"white-space: normal;\"><br  /></p><p style=\"white-space: normal;text-align: right;\"><span style=\"color: rgb(53, 124, 168);font-size: 14px;\">如果文章对你有帮助，欢迎转发支持</span></p><p style=\"white-space: normal;text-align: right;\"><span style=\"font-size: 13px;color: rgb(255, 104, 39);\">如果觉得好看，请点击“好看”哦 ↓↓</span></p> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（逐码）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/hqNDySBWcRUKDTdTE-RiCw\" rel=\"noopener noreferrer\">并发问题是怎样造成的</a></p></blockquote></div>', '并发问题是怎样造成的', '', 'publish', 'open', 'open', '', '44540dcfcc', '', '', '2020-03-28 10:12:59', '2020-03-28 02:12:59', '', 0, 'https://www.javashitang.com/?p=104', 0, 'post', '', 0);
INSERT INTO `wp_posts` VALUES (105, 1, '2020-03-28 10:12:56', '2020-03-28 02:12:56', '', 'beepress4-1585361576', '', 'inherit', 'open', 'closed', '', 'beepress4-1585361576', '', '', '2020-03-28 10:12:56', '2020-03-28 02:12:56', '', 104, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361576.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (106, 1, '2020-03-28 10:12:56', '2020-03-28 02:12:56', '', 'beepress7-1585361576', '', 'inherit', 'open', 'closed', '', 'beepress7-1585361576', '', '', '2020-03-28 10:12:56', '2020-03-28 02:12:56', '', 104, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585361576.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (107, 1, '2020-03-28 10:12:57', '2020-03-28 02:12:57', '', 'beepress0-1585361577', '', 'inherit', 'open', 'closed', '', 'beepress0-1585361577', '', '', '2020-03-28 10:12:57', '2020-03-28 02:12:57', '', 104, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361577.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (108, 1, '2020-03-28 10:12:57', '2020-03-28 02:12:57', '', 'beepress6-1585361577', '', 'inherit', 'open', 'closed', '', 'beepress6-1585361577', '', '', '2020-03-28 10:12:57', '2020-03-28 02:12:57', '', 104, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585361577.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (109, 1, '2020-03-28 10:12:58', '2020-03-28 02:12:58', '', 'beepress6-1585361578', '', 'inherit', 'open', 'closed', '', 'beepress6-1585361578', '', '', '2020-03-28 10:12:58', '2020-03-28 02:12:58', '', 104, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585361578.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (110, 1, '2020-03-28 10:12:59', '2020-03-28 02:12:59', '', 'beepress5-1585361579', '', 'inherit', 'open', 'closed', '', 'beepress5-1585361579', '', '', '2020-03-28 10:12:59', '2020-03-28 02:12:59', '', 104, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585361579.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (111, 1, '2020-03-28 10:12:59', '2020-03-28 02:12:59', '', 'beepress2-1585361579', '', 'inherit', 'open', 'closed', '', 'beepress2-1585361579', '', '', '2020-03-28 10:12:59', '2020-03-28 02:12:59', '', 104, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress2-1585361579.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (112, 1, '2020-03-28 10:12:59', '2020-03-28 02:12:59', '<div class=\"bpp-post-content\">                                                                                                                            <p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\" >我们的程序要运行，离不开CPU、内存、IO设备，但是他们三者之间的执行速度是有差异的。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">CPU 的执行速度最快，内存的速度次之，IO设备的速度最慢。</p><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">为什么会有内存缓存</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">CPU 执行一条指令非常快，但是他从内存中读取某个数据时，就需要等待很长的时间，为了弥补速度上的巨大差异，让 CPU 不被内存拖垮，所以在 CPU 上增加了缓存。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">当 CPU 请求内存中的数据时，会先查看缓存中是否有该数据，如果存在则直接返回该数据；如果不存在，则要先把内存中的数据载入缓存，然后再返回给 CPU。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">所以我们的程序在执行时，往往就需要将数据从内存中读取出来载入到缓存中，然后进行处理，处理完成之后再将数据回写到内存中去。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">除此以外，现代的计算机都是多CPU、多核的，程序也不再只运行在单一线程中，而是有多个线程在运行。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">每个线程都会维护一份自己的内存副本，也就是 CPU 缓存，所以线程之间一定会存在数据一致性的问题。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">一般来说，导致并发问题的根源不外乎以下这几个原因：</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">可见性：一个线程对共享变量的修改，另一个线程是否可见？</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">原子性：一个或多个操作在 CPU 执行的过程中是否会被中断？</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">有序性：程序编译后的指令是否会按照代码原本的顺序执行？</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">遗憾的是，以上三个问题的答案都是不确定的，正因为这些不确定所以才会存在并发下的各种问题。</p><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">什么是可见性</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">如果我们的程序是在单个 CPU 上执行的，那么对于一个变量的原子性操作，无论如何都是不会出现问题的，不管是由一个线程还是多个线程来操作该变量，对结果都不会造成影响，因为内存的副本只有一个。</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"并发问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585361576.jpeg\" alt=\"并发问题是怎样造成的\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">在单个 CPU 上操作虽然不会有问题，但是要强调一点，就是这个操作必须是原子性的。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">比如线程A 设置变量 V 的值为10，那线程B获取到该变量的值就是10，不会出现问题。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">但是我们的程序是不可能只在单个 CPU 上运行的，而是要在多个 CPU 上运行的，在多个 CPU 上执行时，就会出现问题。</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"并发问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361577.jpeg\" alt=\"并发问题是怎样造成的\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">如线程A 在CPU1 中对变量 V 设置了一个新的值，但是线程B是在 CPU2 中，而 CPU1 对缓存进行了修改，并不会通知到 CPU2，所以这时线程B 拿到的变量 V 的值还是原来的老的值，也就是脏数据。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">所以这就是导致并发问题的第一个原因，在一个线程中对共享变量的更改，对其他的线程是不可见的。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">一个不可见性的示例</span></h3><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;counter;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">boolean</span>&nbsp;stop;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Reader</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Runnable</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;newestCounter;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">run</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">while</span>&nbsp;(!stop)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(newestCounter&nbsp;!=&nbsp;counter)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newestCounter&nbsp;=&nbsp;counter;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"Reader&nbsp;has&nbsp;read&nbsp;a&nbsp;new&nbsp;value=\"</span>&nbsp;+&nbsp;newestCounter);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"Reader&nbsp;stopped&nbsp;at:\"</span>&nbsp;+&nbsp;System.currentTimeMillis());<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Writer</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Runnable</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">run</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">for</span>&nbsp;(<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;i&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>;&nbsp;i&nbsp;&lt;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">5</span>;&nbsp;i++)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;counter&nbsp;=&nbsp;i;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"writer&nbsp;has&nbsp;write&nbsp;a&nbsp;new&nbsp;value&nbsp;to&nbsp;counter=\"</span>&nbsp;+&nbsp;counter);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;等待&nbsp;Reader&nbsp;去读取&nbsp;counter&nbsp;的变化</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">try</span>&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread.sleep(<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">1000</span>);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">catch</span>&nbsp;(InterruptedException&nbsp;e)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stop&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">true</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"Writer&nbsp;set&nbsp;stop&nbsp;at:\"</span>&nbsp;+&nbsp;System.currentTimeMillis());<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">有两个线程，一个 Reader 线程，一个 Writer 线程，并且有两个共享变量：counter 和 stop 标志位。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">启动完两个线程之后，打印出如下结果：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\">writer&nbsp;has&nbsp;write&nbsp;a&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;value&nbsp;to&nbsp;counter=<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">1</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />Reader&nbsp;has&nbsp;read&nbsp;a&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;value=<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">1</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />writer&nbsp;has&nbsp;write&nbsp;a&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;value&nbsp;to&nbsp;counter=<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">2</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />writer&nbsp;has&nbsp;write&nbsp;a&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;value&nbsp;to&nbsp;counter=<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">3</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />writer&nbsp;has&nbsp;write&nbsp;a&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;value&nbsp;to&nbsp;counter=<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">4</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />writer&nbsp;has&nbsp;write&nbsp;a&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;value&nbsp;to&nbsp;counter=<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">5</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />Writer&nbsp;set&nbsp;stop&nbsp;at:<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">1553871839283</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">Writer 线程每隔一秒更新一次 counter 的值， Reader 线程只读取到第一次 counter 的变化后的值，后面的值变更，都没有读取到，因为此时 Reader 线程已经将 counter 的值缓存在本地的内存副本中了， Writer 线程再怎么修改 counter 的值， Reader 线程也不会知道的，所以说 Writer 线程对于 counter 的修改，对 Reader 线程是不可见的。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">同样的， Reader 线程启动后，读取到 stop 变量的值为 false，在后续 Writer 线程将 stop 的值更新为 true 之后， Reader 线程也不会感知到，所以该程序会一直运行下去，因为 Reader 线程中的 stop 状态永远是 false。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">如果我们将 Writer 线程中的休眠1s的代码注释掉，那么 Reader 线程可能会读取到 stop 为 true。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">为了解决这个问题，Java 给我们提供了一个 volatile 关键字，用来保证可见性。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">当一个变量被 volatile 修饰后，表示着线程本地内存无效，当一个线程修改共享变量后他会立即被更新到主内存中，当其他线程读取共享变量时，它会直接从主内存中读取。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">将上述的代码中 counter 改为如下所示：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">volatile</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;counter;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">即可返回正确的结果，Writer 线程每次对 counter 所做的修改，Reader 线程都能感知到，也就是说 Writer 对变量 counter 做的修改，对 Reader 线程是可见的。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">除了 volatile 可以保证可见性之外，synchronized 关键字和 Lock 都能保证可见性，但是和 volatile 比起来，加锁的方式都太重了，涉及到线程的阻塞与唤醒。</p><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">为什么会有线程切换</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">我们的程序都是由非常多的线程来协作执行的，而具体的执行都是给 CPU 下达指令，让 CPU 去执行的。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">那么每个线程该怎么使唤 CPU 让他为自己干活呢？CPU 又是怎样接受和处理这么多线程下发给自己的指令的呢？</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">由于 CPU 的执行非常快，而线程下发给他的任务有可能很快就执行完了，也可能由于其他的原因导致要执行很久。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">如果一个任务执行的时间很久，是否需要一直占着 CPU 资源呢？</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">那 CPU 肯定不会同意的，CPU 为了更高效的处理各种任务，会为每个线程分配一段差不多长的时间用来执行他们的任务，当时间用完了之后，就去执行其他线程的任务了，这个时间就称为 “时间片” ，执行不同的任务就是线程之间的切换了。</p><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">什么是原子性</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">虽然 CPU 通过时间片和线程切换，提高了程序运行的效率，但是说到线程切换，就可能导致另一种问题。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">那么线程切换会在什么时候发生呢，在 CPU 指令执行完成之后的任何时间点都可能发生线程切换。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">所以对于非原子操作就可能，操作执行了一半，发生了线程切换，另外的操作没来得及执行，要等到下一个线程切换时，轮到自己占有 CPU 时，才能完成剩下的操作。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">但是这样明显是有问题的，你执行了一半的操作，CPU 到别的地方转了一圈回来之后，你原本的操作结果很可能就不对了，为什么会不对呢，因为你在等待 CPU 的这段时间内，很可能有别的线程也执行了和你相同的事。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">我们知道数据库事务中也有原子性的概念，他主要说的是事务中的多个操作，要么全部执行，要么全部不执行。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">但是 Java 中的原子性，并不能保证要么全部执行，要么全部不执行，反而是很可能多个操作只执行了一部分。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">说了这么多的 “操作”，Java 中的一条语句难道不就是一条 “操作” 吗？</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">Java 中的一条语句还真不一定是一条 “操作”，这里说的 “操作” 是对 CPU 而言的，指的是一条指令。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">而我们 Java 中的一条语句可能由一条指令组成，也可能由多条指令组成，操作系统只能保证一条指令的原子性，也就是要么该条指令执行，要么该条指令不执行，但是并不能保证多条指令的原子性。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">所以说虽然线程切换解决了性能问题，但是却带来了原子性的问题。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">Java 中的自增运算是一个典型的非原子性的操作，为什么这么说呢？</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">自增运算看似是一条语句，但是实际上需要三条 CPU 指令构成，分别是：取值，值加1，回写值。</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"并发问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585361577.jpeg\" alt=\"并发问题是怎样造成的\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">假设我们有一个变量 V，初始值是0，当两个线程都对变量 V 执行自增操作，正常情况下，我们期望的结果是最终变量 V 的值是2，但是很可能由于县城切换导致，最终被更新到内存中的变量的值是1。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">线程 A 从内存中获取到变量 V 的值为0，然后还没来得及执行后续的指令，就发生了线程切换，线程 B 这时从内存中获取到变量 V 的值也为 0，然后执行了后续的指令，将值加1并把值回写到了内存中，这时内存中的变量 V 的值为1。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">然后又发生了线程切换，线程 A 重新获得了 CPU 资源，继续执行未完成的指令，最终的也将变量 V 的值更新为1，然后写入到了内存中。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">整个过程由于发生了线程切换，导致非原子性的操作的结果出现了问题，事实上只要线程 A 在执行玩第一步或者第二步指令之后发生了线程切换，都会导致问题的发生。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">而当线程 A 在执行完了第三步指令之后，再发生线程切换的话，则不会出现问题，原因是第三步指令执行完之后，内存中的变量值已经更新为最新值了，即便发生了线程切换，其他线程也会从内存中获取到最新的值。当然啦，假如第三步指令都执行完了，那整个过程就相当于是一个原子性的过程了，那就不存在由于线程切换而导致的问题了。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">一个非原子性的示例</span></h3><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;increment&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">10000</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;unsafeCounter&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">unsafeIncrease</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;idx&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">while</span>&nbsp;(idx++&nbsp;&lt;&nbsp;increment)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsafeCounter++;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;多个线程执行不安全的非原子性操作</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />Runnable&nbsp;runnable&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Runnable()&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">run</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsafeIncrease();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />};<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />Thread&nbsp;t1&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Thread(runnable);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />Thread&nbsp;t2&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Thread(runnable);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />t1.start();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />t2.start();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />t1.join();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />t2.join();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />System.out.println(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"unsafeCounter=\"</span>&nbsp;+&nbsp;unsafeCounter);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">执行上述代码之后，你会发现，unsafeCounter 的值是一个1000~2000之间的数字。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">一个原子性的示例</span></h3><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;increment&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">10000</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;AtomicInteger&nbsp;safeCounter&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;AtomicInteger(<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">safeIncrease</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;idx&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">while</span>&nbsp;(idx++&nbsp;&lt;&nbsp;increment)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;safeCounter.incrementAndGet();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;多个线程执行安全的原子性操作</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />Runnable&nbsp;runnable&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Runnable()&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;color: rgb(91, 218, 237);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">@Override</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">run</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;safeIncrease();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />};<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />Thread&nbsp;t1&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Thread(runnable);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />Thread&nbsp;t2&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Thread(runnable);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />t1.start();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />t2.start();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />t1.join();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />t2.join();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />System.out.println(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"safeCounter=\"</span>&nbsp;+&nbsp;safeCounter);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">执行上述代码之后，你会发现，safeCounter 的值确实是2000。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">为什么使用 AtomicInteger 就能保证原子性呢，这些 Atomic* 开头的类都是为了解决原子性的问题而存在的，为什么他们就能保证原子性呢，原因是他们底层是通过 CAS 实现的。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">通过 CAS 来设置某个变量的值时，会先检查该变量内存中的值是否与当前期望的值一致，如果发现不一致则会重新获取内存中的最新值，直到内存中的值与当前期望的值一致时，才将最新的值更新到内存中去，所以整个过程是原子性的。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">复合原子操作是不是原子性的</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">现在我们知道了一个操作必须是原子性的才能保证在并发的情况下不出问题，具体可以使用原子类 Atomic* 来代替原始的变量。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">但是 Atomic* 能否保证永远不出问题呢？</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">答案是不会，只要使用的不正确，Atomic* 也会出现问题，例如下面的代码：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>[]&nbsp;nodes&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>[]{<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">2</span>};<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;AtomicInteger&nbsp;nodeIndex&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;AtomicInteger(<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /><span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">unsafeAtomic</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;i&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">while</span>&nbsp;(i++&nbsp;&lt;&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">100</span>)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;获取当前节点的索引，并将索引加1</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">int</span>&nbsp;value&nbsp;=&nbsp;nodes[nodeIndex.getAndIncrement()];<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;color: rgb(128, 128, 128);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">//&nbsp;如果索引值等于节点的长度了，则设置为0</span><br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodeIndex.compareAndSet(nodes.length,&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;color: rgb(174, 135, 250);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"Thread=\"</span>&nbsp;+&nbsp;Thread.currentThread().getName()&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit;color: rgb(238, 220, 112);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">\"&nbsp;current&nbsp;node&nbsp;value=\"</span>&nbsp;+&nbsp;value);<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">上述代码是模拟轮询获取可用节点的功能，假设有两个节点，我们希望在多线程下能够交替返回每一个节点给调用方，这样可以做到负载均衡。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">但是上述代码无法做到交替返回，原因是 getAndIncreament() 和 compareAndSet() 方法虽然都是原子操作，但是他们放在一起作为一个复合操作就不是原子的了。</p><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">为什么会有重排序</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">编译器或运行时环境为了优化程序性能，通常会对指令进行重新排序，所以重排序分两种，分别是编译期重排序和运行期重排序。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">对于我们程序员来说，不要假设指令执行的顺序，因为我们无法预知不同线程之间的指令会以何种顺序执行。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">java 会为了提升程序的性能，将指令进行重排，这又是一种导致并发环境下可能出错的情况。</p><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">什么是有序性</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">在程序执行过程中，按照代码的顺序先后执行，这就是有序性，但是通过上面的介绍我们知道，不采取措施的话有序性是无法保证的。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">因为我们写的代码，在编译期就已经发生了变化，而在最终执行时也可能发生变化，如果我们进行干涉的话，执行的结果很可能会发生不可预知的变化。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">一个有序性的示例</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">一个最经典的有序性的问题就是，获取单例对象时，通过双重检查来保证对象只创建了一次，具体代码如下：</p><pre style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;text-align: start;background-color: rgb(255, 255, 255);\"><code class=\"java language-java hljs\" style=\"margin-right: 2px;margin-left: 2px;padding: 0.5em;color: rgb(169, 183, 198);line-height: 18px;border-radius: 0px;background: rgb(40, 43, 46);font-family: Consolas, Inconsolata, Courier, monospace;display: block;overflow-x: auto;letter-spacing: 0px;overflow-wrap: normal !important;word-break: normal !important;overflow-y: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">Singleton</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;Singleton&nbsp;instance;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">static</span>&nbsp;Singleton&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;color: rgb(165, 218, 45);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">getInstance</span><span class=\"hljs-params\" style=\"font-size: inherit;color: rgb(255, 152, 35);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">()</span>&nbsp;</span>{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(instance&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">synchronized</span>&nbsp;(Singleton.class)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">if</span>&nbsp;(instance&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">null</span>)&nbsp;{<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">new</span>&nbsp;Singleton();<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;color: rgb(248, 35, 117);line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;instance;<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />&nbsp;&nbsp;&nbsp;&nbsp;}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  />}<br style=\"font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;\"  /></code></pre><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">上述的代码乍看上去是没有问题的，如果不是指令重排序的话，也确实不会出现问题，但正是由于重排序的原因导致返回的单例对象可能出现问题。</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"并发问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585361578.jpeg\" alt=\"并发问题是怎样造成的\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">线程A来获取单例对象，这时发现instance==null，所以就进入了加锁创建单例对象的代码块。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">本来正常情况下，创建了一个对象然后返回就可以了，但是因为重排序的原因，创建对象的过程被重排序了：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"并发问题是怎样造成的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585361579.jpeg\" alt=\"并发问题是怎样造成的\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">正常应该是先初始化对象，然后再将分配好的内存指向该对象，但是重排序后的结果变成了，先将分配好的内存指向了对象，然后再初始化对象。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">问题就出在这里，当将分配好的内存指向该对象后，如果发生了线程切换，线程B来获取单例对象时，发现单例对象已经不为空了，所以直接就拿该对象去操作了，但是该对象并没有进行过初始化，所以线程B后续再执行时就会出现空指针的问题。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">为了解决重排序的问题，需要我们写代码时进行人为干预，具体怎么干预呢？那就是通过 volatile 关键字，可是上面我们刚说了 volatile 是解决可见性的问题的啊。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">没错 volatile 除了可以解决可见性问题，也可以解决有序性的问题，通过 volatile 修饰的变量，编译器和运行时环境不会对他进行指令重排。</p><h2 style=\"margin-top: 1.5em;margin-bottom: 1.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">并发问题是怎样造成的</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">通过上面的分析，我们知道了造成并发问题的原因了，这些都是操作系统或者编译期为了提升性能而做了一些努力，但是为了享受到这些性能上的优势，我们就得付出更多的代价来写出复杂的代码。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">换句话说，硬件上为了最求卓越的性能，而忽略了软件实现上的复杂度，相当于硬件工程师给软件工程师挖了一个坑。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">CPU上的高速缓存造成了多线程下共享变量的可见性问题，可以通过 volatile 或加锁的方式来解决。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">线程切换造成了多线程下原子性的问题，可以通过原子类或加锁的方式来解决。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">编译器或者运行环境为了优化程序性能造成了有序性的问题，可以通过 volatile 禁止指令重排。</p><p><br  /></p><p style=\"white-space: normal;\"><span style=\"color: rgb(255, 104, 39);font-size: 16px;\">推荐阅读</span></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484172&amp;idx=1&amp;sn=8f9eaec88e04588e76b0c4958162e6af&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">线程池是怎样工作的</span></a></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484193&amp;idx=1&amp;sn=0953118972d8fdff36fae804eb5fcc8b&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">什么是 Arthas</span></a><br  /></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484110&amp;idx=1&amp;sn=2a3dbfb804f282160e288d9178b2665e&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">怎样编写一个 Web 容器</span></a></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484154&amp;idx=1&amp;sn=c99d867ebe79e5b3fa784beff06d52b7&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">更好的使用 Nacos 配置中心</span></a></p><p style=\"white-space: normal;\"><br  /></p><p style=\"white-space: normal;text-align: center;\"><img class=\"\"       style=\"box-shadow: rgb(170, 170, 170) 0em 0em 1em 0px;width: 35%;border-radius: 0px;height: auto !important;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress2-1585361579.jpeg\" alt=\"并发问题是怎样造成的\" title=\"并发问题是怎样造成的\"  /></p><p style=\"white-space: normal;\"><br  /></p><p style=\"white-space: normal;text-align: right;\"><span style=\"color: rgb(53, 124, 168);font-size: 14px;\">如果文章对你有帮助，欢迎转发支持</span></p><p style=\"white-space: normal;text-align: right;\"><span style=\"font-size: 13px;color: rgb(255, 104, 39);\">如果觉得好看，请点击“好看”哦 ↓↓</span></p> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（逐码）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/hqNDySBWcRUKDTdTE-RiCw\" rel=\"noopener noreferrer\">并发问题是怎样造成的</a></p></blockquote></div>', '并发问题是怎样造成的', '', 'inherit', 'closed', 'closed', '', '104-revision-v1', '', '', '2020-03-28 10:12:59', '2020-03-28 02:12:59', '', 104, 'https://www.javashitang.com/?p=112', 0, 'revision', '', 0);
INSERT INTO `wp_posts` VALUES (113, 1, '2019-03-28 00:00:50', '2020-03-28 02:13:24', '<div class=\"bpp-post-content\">                                                                                                                            <p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\" >我们在工作中或多或少都使用过线程池，但是为什么要使用线程池呢？从他的名字中我们就应该知道，线程池使用了一种池化技术，和很多其他池化技术一样，都是为了更高效的利用资源，例如链接池，内存池等等。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">数据库链接是一种很昂贵的资源，创建和销毁都需要付出高昂的代价，为了避免频繁的创建数据库链接，所以产生了链接池技术。优先在池子中创建一批数据库链接，有需要访问数据库时，直接到池子中去获取一个可用的链接，使用完了之后再归还到链接池中去。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">同样的，线程也是一种宝贵的资源，并且也是一种有限的资源，创建和销毁线程也同样需要付出不菲的代价。我们所有的代码都是由一个一个的线程支撑起来的，如今的芯片架构也决定了我们必须编写多线程执行的程序，以获取最高的程序性能。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">那么怎样高效的管理多线程之间的分工与协作就成了一个关键问题，Doug Lea 大神为我们设计并实现了一款线程池工具，通过该工具就可以实现多线程的能力，并实现任务的高效执行与调度。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">为了正确合理的使用线程池工具，我们有必要对线程池的原理进行了解。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">本篇文章主要从三个方面来对线程池进行分析：线程池状态、重要属性、工作流程。</p><h2 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">线程池状态</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">首先线程池是有状态的，这些状态标识这线程池内部的一些运行情况，线程池的开启到关闭的过程就是线程池状态的一个流转的过程。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">线程池共有五种状态：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"线程池是怎样工作的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361605.jpeg\" alt=\"线程池是怎样工作的\"  /></figure><table style=\"\"><thead style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;\"><tr style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\"><th style=\"box-sizing: border-box;padding: 0.5em 1em;text-align: left;border-top-width: 1px;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;background-color: rgb(240, 240, 240);\" width=\"120\"><span style=\"font-size: 14px;\">状态</span></th><th style=\"box-sizing: border-box;padding: 0.5em 1em;text-align: left;border-top-width: 1px;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;background-color: rgb(240, 240, 240);\" width=\"418\"><span style=\"font-size: 14px;\">含义</span></th></tr></thead><tbody style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 0px;border-style: initial;border-color: initial;\"><tr style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\"><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\" width=\"121\"><span style=\"font-size: 14px;\">RUNNING</span></td><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\" width=\"418\"><span style=\"font-size: 14px;\">运行状态，该状态下线程池可以接受新的任务，也可以处理阻塞队列中的任务<br style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;\"  />执行 shutdown 方法可进入 SHUTDOWN 状态<br style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;\"  />执行 shutdownNow 方法可进入 STOP 状态</span></td></tr><tr style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\"><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\" width=\"121\"><span style=\"font-size: 14px;\">SHUTDOWN</span></td><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\" width=\"418\"><span style=\"font-size: 14px;\">待关闭状态，不再接受新的任务，继续处理阻塞队列中的任务<br style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;\"  />当阻塞队列中的任务为空，并且工作线程数为0时，进入 TIDYING 状态</span></td></tr><tr style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\"><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\" width=\"121\"><span style=\"font-size: 14px;\">STOP</span></td><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\" width=\"418\"><span style=\"font-size: 14px;\">停止状态，不接收新任务，也不处理阻塞队列中的任务，并且会尝试结束执行中的任务<br style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;\"  />当工作线程数为0时，进入 TIDYING 状态</span></td></tr><tr style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\"><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\" width=\"121\"><span style=\"font-size: 14px;\">TIDYING</span></td><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\" width=\"418\"><span style=\"font-size: 14px;\">整理状态，此时任务都已经执行完毕，并且也没有工作线程<br style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;\"  />执行 terminated 方法后进入 TERMINATED 状态</span></td></tr><tr style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\"><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\" width=\"121\"><span style=\"font-size: 14px;\">TERMINATED</span></td><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\" width=\"418\"><span style=\"font-size: 14px;\">终止状态，此时线程池完全终止了，并完成了所有资源的释放</span></td></tr></tbody></table><h2 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">重要属性</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">一个线程池的核心参数有很多，每个参数都有着特殊的作用，各个参数聚合在一起后将完成整个线程池的完整工作。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">1、线程状态和工作线程数量</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">首先线程池是有状态的，不同状态下线程池的行为是不一样的，5种状态已经在上面说过了。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">另外线程池肯定是需要线程去执行具体的任务的，所以在线程池中就封装了一个内部类 Worker 作为工作线程，每个 Worker 中都维持着一个 Thread。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">线程池的重点之一就是控制线程资源合理高效的使用，所以必须控制工作线程的个数，所以需要保存当前线程池中工作线程的个数。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">看到这里，你是否觉得需要用两个变量来保存线程池的状态和线程池中工作线程的个数呢？但是在 ThreadPoolExecutor 中只用了一个 AtomicInteger 型的变量就保存了这两个属性的值，那就是 ctl。</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"线程池是怎样工作的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361605.jpeg\" alt=\"线程池是怎样工作的\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">ctl 的高3位用来表示线程池的状态(runState)，低29位用来表示工作线程的个数(workerCnt)，为什么要用3位来表示线程池的状态呢，原因是线程池一共有5种状态，而2位只能表示出4种情况，所以至少需要3位才能表示得了5种状态。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">2、核心线程数和最大线程数</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">现在有了标志工作线程的个数的变量了，那到底该有多少个线程才合适呢？线程多了浪费线程资源，少了又不能发挥线程池的性能。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">为了解决这个问题，线程池设计了两个变量来协作，分别是：</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: 14px;color: rgb(62, 62, 62);\">核心线程数：corePoolSize 用来表示线程池中的核心线程的数量，也可以称为可闲置的线程数量</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">最大线程数：maximumPoolSize 用来表示线程池中最多能够创建的线程数量</span></p></li></ul><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">现在我们有一个疑问，既然已经有了标识工作线程的个数的变量了，为什么还要有核心线程数、最大线程数呢？</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">其实你这样想就能够理解了，创建线程是有代价的，不能每次要执行一个任务时就创建一个线程，但是也不能在任务非常多的时候，只有少量的线程在执行，这样任务是来不及处理的，而是应该创建合适的足够多的线程来及时的处理任务。随着任务数量的变化，当任务数明显很小时，原本创建的多余的线程就没有必要再存活着了，因为这时使用少量的线程就能够处理的过来了，所以说真正工作的线程的数量，是随着任务的变化而变化的。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">那核心线程数和最大线程数与工作线程个数的关系是什么呢？</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"线程池是怎样工作的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361606.jpeg\" alt=\"线程池是怎样工作的\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">工作线程的个数可能从0到最大线程数之间变化，当执行一段时间之后可能维持在 corePoolSize，但也不是绝对的，取决于核心线程是否允许被超时回收。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">3、创建线程的工厂</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">既然是线程池，那自然少不了线程，线程该如何来创建呢？这个任务就交给了线程工厂 ThreadFactory 来完成。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">4、缓存任务的阻塞队列</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">上面我们说了核心线程数和最大线程数，并且也介绍了工作线程的个数是在0和最大线程数之间变化的。但是不可能一下子就创建了所有线程，把线程池装满，而是有一个过程，这个过程是这样的：</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">当线程池接收到一个任务时，如果工作线程数没有达到corePoolSize，那么就会新建一个线程，并绑定该任务，直到工作线程的数量达到 corePoolSize 前都不会重用之前的线程。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">当工作线程数达到 corePoolSize 了，这时又接收到新任务时，会将任务存放在一个阻塞队列中等待核心线程去执行。为什么不直接创建更多的线程来执行新任务呢，原因是核心线程中很可能已经有线程执行完自己的任务了，或者有其他线程马上就能处理完当前的任务，并且接下来就能投入到新的任务中去，所以阻塞队列是一种缓冲的机制，给核心线程一个机会让他们充分发挥自己的能力。另外一个值得考虑的原因是，创建线程毕竟是比较昂贵的，不可能一有任务要执行就去创建一个新的线程。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">所以我们需要为线程池配备一个阻塞队列，用来临时缓存任务，这些任务将等待工作线程来执行。</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"线程池是怎样工作的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361606.jpeg\" alt=\"线程池是怎样工作的\"  /></figure><h3 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">5、非核心线程存活时间</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">上面我们说了当工作线程数达到 corePoolSize 时，线程池会将新接收到的任务存放在阻塞队列中，而阻塞队列又两种情况：一种是有界的队列，一种是无界的队列。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(255, 104, 39);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">如果是无界队列，那么当核心线程都在忙的时候，所有新提交的任务都会被存放在该无界队列中，这时最大线程数将变得没有意义，因为阻塞队列不会存在被装满的情况。</strong></span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">如果是有界队列，那么当阻塞队列中装满了等待执行的任务，这时再有新任务提交时，线程池就需要创建新的“临时”线程来处理，相当于增派人手来处理任务。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">但是创建的“临时”线程是有存活时间的，不可能让他们一直都存活着，当阻塞队列中的任务被执行完毕，并且又没有那么多新任务被提交时，“临时”线程就需要被回收销毁，在被回收销毁之前等待的这段时间，就是非核心线程的存活时间，也就是 keepAliveTime 属性。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">那么什么是“非核心线程”呢？是不是先创建的线程就是核心线程，后创建的就是非核心线程呢？</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">其实核心线程跟创建的先后没有关系，而是跟工作线程的个数有关，如果当前工作线程的个数大于核心线程数，那么所有的线程都可能是“非核心线程”，都有被回收的可能。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">一个线程执行完了一个任务后，会去阻塞队列里面取新的任务，在取到任务之前它就是一个闲置的线程。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(255, 104, 39);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">取任务的方法有两种，一种是通过 take() 方法一直阻塞直到取出任务，另一种是通过 poll(keepAliveTime，timeUnit) 方法在一定时间内取出任务或者超时，如果超时这个线程就会被回收，请注意核心线程一般不会被回收。</strong></span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">那么怎么保证核心线程不会被回收呢？还是跟工作线程的个数有关，每一个线程在取任务的时候，线程池会比较当前的工作线程个数与核心线程数：</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">如果工作线程数小于当前的核心线程数，则使用第一种方法取任务，也就是没有超时回收，这时所有的工作线程都是“核心线程”，他们不会被回收；</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">如果大于核心线程数，则使用第二种方法取任务，一旦超时就回收，所以并没有绝对的核心线程，只要这个线程没有在存活时间内取到任务去执行就会被回收。</span></p></li></ul><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">所以每个线程想要保住自己“核心线程”的身份，必须充分努力，尽可能快的获取到任务去执行，这样才能逃避被回收的命运。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">核心线程一般不会被回收，但是也不是绝对的，如果我们设置了允许核心线程超时被回收的话，那么就没有核心线程这种说法了，所有的线程都会通过 poll(keepAliveTime, timeUnit) 来获取任务，一旦超时获取不到任务，就会被回收，一般很少会这样来使用，除非该线程池需要处理的任务非常少，并且频率也不高，不需要将核心线程一直维持着。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">6、拒绝策略</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">虽然我们有了阻塞队列来对任务进行缓存，这从一定程度上为线程池的执行提供了缓冲期，但是如果是有界的阻塞队列，那就存在队列满的情况，也存在工作线程的数据已经达到最大线程数的时候。如果这时候再有新的任务提交时，显然线程池已经心有余而力不足了，因为既没有空余的队列空间来存放该任务，也无法创建新的线程来执行该任务了，所以这时我们就需要有一种拒绝策略，即 handler。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">拒绝策略是一个 RejectedExecutionHandler 类型的变量，用户可以自行指定拒绝的策略，如果不指定的话，线程池将使用默认的拒绝策略：抛出异常。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">在线程池中还为我们提供了很多其他可以选择的拒绝策略：</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">直接丢弃该任务</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">使用调用者线程执行该任务</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">丢弃任务队列中的最老的一个任务，然后提交该任务</span></p></li></ul><h2 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">工作流程</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">了解了线程池中所有的重要属性之后，现在我们需要来了解下线程池的工作流程了。</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"线程池是怎样工作的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361606.jpeg\" alt=\"线程池是怎样工作的\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">上图是一张线程池工作的精简图，实际的过程比这个要复杂的多，不过这些应该能够完全覆盖到线程池的整个工作流程了。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">整个过程可以拆分成以下几个部分：</p><h3 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">1、提交任务</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">当向线程池提交一个新的任务时，线程池有三种处理情况，分别是：创建一个工作线程来执行该任务、将任务加入阻塞队列、拒绝该任务。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">提交任务的过程也可以拆分成以下几个部分：</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">当工作线程数小于核心线程数时，直接创建新的核心工作线程</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">当工作线程数不小于核心线程数时，就需要尝试将任务添加到阻塞队列中去</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">如果能够加入成功，说明队列还没有满，那么需要做以下的二次验证来保证添加进去的任务能够成功被执行</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">验证当前线程池的运行状态，如果是非RUNNING状态，则需要将任务从阻塞队列中移除，然后拒绝该任务</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">验证当前线程池中的工作线程的个数，如果为0，则需要主动添加一个空工作线程来执行刚刚添加到阻塞队列中的任务</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">如果加入失败，则说明队列已经满了，那么这时就需要创建新的“临时”工作线程来执行任务</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">如果创建成功，则直接执行该任务</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">如果创建失败，则说明工作线程数已经等于最大线程数了，则只能拒绝该任务了</span></p></li></ul><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">整个过程可以用下面这张图来表示：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"线程池是怎样工作的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361607.jpeg\" alt=\"线程池是怎样工作的\"  /></figure><h3 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">2、创建工作线程</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">创建工作线程需要做一系列的判断，需要确保当前线程池可以创建新的线程之后，才能创建。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">首先，当线程池的状态是 SHUTDOWN 或者 STOP 时，则不能创建新的线程。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">另外，当线程工厂创建线程失败时，也不能创建新的线程。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">还有就是当前工作线程的数量与核心线程数、最大线程数进行比较，如果前者大于后者的话，也不允许创建。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">除此之外，会尝试通过 CAS 来自增工作线程的个数，如果自增成功了，则会创建新的工作线程，即 Worker 对象。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">然后加锁进行二次验证是否能够创建工作线程，最后如果创建成功，则会启动该工作线程。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">3、启动工作线程</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">当工作线程创建成功后，也就是 Worker 对象已经创建好了，这时就需要启动该工作线程，让线程开始干活了，Worker 对象中关联着一个 Thread，所以要启动工作线程的话，只要通过 worker.thread.start() 来启动该线程即可。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">启动完了之后，就会执行 Worker 对象的 run 方法，因为 Worker 实现了 Runnable 接口，所以本质上 Worker 也是一个线程。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">通过线程 start 开启之后就会调用到 Runnable 的 run 方法，在 worker 对象的 run 方法中，调用了 runWorker(this) 方法，也就是把当前对象传递给了 runWorker 方法，让他来执行。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">4、获取任务并执行</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">在 runWorker 方法被调用之后，就是执行具体的任务了，首先需要拿到一个可以执行的任务，而 Worker 对象中默认绑定了一个任务，如果该任务不为空的话，那么就是直接执行。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">执行完了之后，就会去阻塞队列中获取任务来执行，而获取任务的过程，需要考虑当前工作线程的个数。</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">如果工作线程数大于核心线程数，那么就需要通过 poll 来获取，因为这时需要对闲置的线程进行回收；</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">如果工作线程数小于等于核心线程数，那么就可以通过 take 来获取了，因此这时所有的线程都是核心线程，不需要进行回收，前提是没有设置 allowCoreThreadTimeOut</span></p></li></ul><p><br  /></p><p><br  /></p><p style=\"white-space: normal;\"><span style=\"color: rgb(255, 104, 39);font-size: 16px;\">推荐阅读</span></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484140&amp;idx=1&amp;sn=88a4c388bfb97b30d00e173296732604&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">Nacos 配置实时更新原理分析</span></a></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484154&amp;idx=1&amp;sn=c99d867ebe79e5b3fa784beff06d52b7&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">更好的使用 Nacos 配置中心</span></a><br  /></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484167&amp;idx=1&amp;sn=a0b50779d871428ea09f956da0c07d82&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">Nacos 注册中心原理分析</span></a></p><p style=\"white-space: normal;\"><br  /></p><p style=\"white-space: normal;\"><br  /></p><p style=\"white-space: normal;text-align: center;\"><img class=\"\"       style=\"box-shadow: rgb(170, 170, 170) 0em 0em 1em 0px;width: 35%;border-radius: 12px;height: auto !important;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361608.jpeg\" alt=\"线程池是怎样工作的\" title=\"线程池是怎样工作的\"  /></p><p style=\"white-space: normal;\"><br  /></p><p style=\"white-space: normal;text-align: right;\"><span style=\"color: rgb(53, 124, 168);font-size: 15px;\">如果文章对你有帮助，欢迎转发支持</span></p><p style=\"white-space: normal;text-align: right;\"><span style=\"font-size: 13px;color: rgb(255, 104, 39);\">如果觉得好看，请点击“好看”哦 ↓↓</span></p><p><br  /></p> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（逐码）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/VTBj0KS_vPR_YY2imJYYFw\" rel=\"noopener noreferrer\">线程池是怎样工作的</a></p></blockquote></div>', '线程池是怎样工作的', '', 'publish', 'open', 'open', '', 'ef04ac9af7', '', '', '2020-03-28 10:13:28', '2020-03-28 02:13:28', '', 0, 'https://www.javashitang.com/?p=113', 0, 'post', '', 0);
INSERT INTO `wp_posts` VALUES (114, 1, '2020-03-28 10:13:25', '2020-03-28 02:13:25', '', 'beepress3-1585361605', '', 'inherit', 'open', 'closed', '', 'beepress3-1585361605', '', '', '2020-03-28 10:13:25', '2020-03-28 02:13:25', '', 113, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361605.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (115, 1, '2020-03-28 10:13:25', '2020-03-28 02:13:25', '', 'beepress9-1585361605', '', 'inherit', 'open', 'closed', '', 'beepress9-1585361605', '', '', '2020-03-28 10:13:25', '2020-03-28 02:13:25', '', 113, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361605.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (116, 1, '2020-03-28 10:13:25', '2020-03-28 02:13:25', '', 'beepress4-1585361605', '', 'inherit', 'open', 'closed', '', 'beepress4-1585361605', '', '', '2020-03-28 10:13:25', '2020-03-28 02:13:25', '', 113, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361605.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (117, 1, '2020-03-28 10:13:26', '2020-03-28 02:13:26', '', 'beepress0-1585361606', '', 'inherit', 'open', 'closed', '', 'beepress0-1585361606', '', '', '2020-03-28 10:13:26', '2020-03-28 02:13:26', '', 113, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361606.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (118, 1, '2020-03-28 10:13:26', '2020-03-28 02:13:26', '', 'beepress8-1585361606', '', 'inherit', 'open', 'closed', '', 'beepress8-1585361606', '', '', '2020-03-28 10:13:26', '2020-03-28 02:13:26', '', 113, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361606.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (119, 1, '2020-03-28 10:13:26', '2020-03-28 02:13:26', '', 'beepress3-1585361606', '', 'inherit', 'open', 'closed', '', 'beepress3-1585361606', '', '', '2020-03-28 10:13:26', '2020-03-28 02:13:26', '', 113, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361606.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (120, 1, '2020-03-28 10:13:27', '2020-03-28 02:13:27', '', 'beepress0-1585361607', '', 'inherit', 'open', 'closed', '', 'beepress0-1585361607', '', '', '2020-03-28 10:13:27', '2020-03-28 02:13:27', '', 113, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361607.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (121, 1, '2020-03-28 10:13:28', '2020-03-28 02:13:28', '', 'beepress0-1585361608', '', 'inherit', 'open', 'closed', '', 'beepress0-1585361608', '', '', '2020-03-28 10:13:28', '2020-03-28 02:13:28', '', 113, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361608.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (122, 1, '2020-03-28 10:13:28', '2020-03-28 02:13:28', '<div class=\"bpp-post-content\">                                                                                                                            <p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\" >我们在工作中或多或少都使用过线程池，但是为什么要使用线程池呢？从他的名字中我们就应该知道，线程池使用了一种池化技术，和很多其他池化技术一样，都是为了更高效的利用资源，例如链接池，内存池等等。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">数据库链接是一种很昂贵的资源，创建和销毁都需要付出高昂的代价，为了避免频繁的创建数据库链接，所以产生了链接池技术。优先在池子中创建一批数据库链接，有需要访问数据库时，直接到池子中去获取一个可用的链接，使用完了之后再归还到链接池中去。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">同样的，线程也是一种宝贵的资源，并且也是一种有限的资源，创建和销毁线程也同样需要付出不菲的代价。我们所有的代码都是由一个一个的线程支撑起来的，如今的芯片架构也决定了我们必须编写多线程执行的程序，以获取最高的程序性能。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">那么怎样高效的管理多线程之间的分工与协作就成了一个关键问题，Doug Lea 大神为我们设计并实现了一款线程池工具，通过该工具就可以实现多线程的能力，并实现任务的高效执行与调度。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">为了正确合理的使用线程池工具，我们有必要对线程池的原理进行了解。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">本篇文章主要从三个方面来对线程池进行分析：线程池状态、重要属性、工作流程。</p><h2 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">线程池状态</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">首先线程池是有状态的，这些状态标识这线程池内部的一些运行情况，线程池的开启到关闭的过程就是线程池状态的一个流转的过程。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">线程池共有五种状态：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"线程池是怎样工作的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361605.jpeg\" alt=\"线程池是怎样工作的\"  /></figure><table style=\"\"><thead style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;\"><tr style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\"><th style=\"box-sizing: border-box;padding: 0.5em 1em;text-align: left;border-top-width: 1px;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;background-color: rgb(240, 240, 240);\" width=\"120\"><span style=\"font-size: 14px;\">状态</span></th><th style=\"box-sizing: border-box;padding: 0.5em 1em;text-align: left;border-top-width: 1px;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;background-color: rgb(240, 240, 240);\" width=\"418\"><span style=\"font-size: 14px;\">含义</span></th></tr></thead><tbody style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 0px;border-style: initial;border-color: initial;\"><tr style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\"><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\" width=\"121\"><span style=\"font-size: 14px;\">RUNNING</span></td><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\" width=\"418\"><span style=\"font-size: 14px;\">运行状态，该状态下线程池可以接受新的任务，也可以处理阻塞队列中的任务<br style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;\"  />执行 shutdown 方法可进入 SHUTDOWN 状态<br style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;\"  />执行 shutdownNow 方法可进入 STOP 状态</span></td></tr><tr style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\"><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\" width=\"121\"><span style=\"font-size: 14px;\">SHUTDOWN</span></td><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\" width=\"418\"><span style=\"font-size: 14px;\">待关闭状态，不再接受新的任务，继续处理阻塞队列中的任务<br style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;\"  />当阻塞队列中的任务为空，并且工作线程数为0时，进入 TIDYING 状态</span></td></tr><tr style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\"><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\" width=\"121\"><span style=\"font-size: 14px;\">STOP</span></td><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\" width=\"418\"><span style=\"font-size: 14px;\">停止状态，不接收新任务，也不处理阻塞队列中的任务，并且会尝试结束执行中的任务<br style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;\"  />当工作线程数为0时，进入 TIDYING 状态</span></td></tr><tr style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\"><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\" width=\"121\"><span style=\"font-size: 14px;\">TIDYING</span></td><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\" width=\"418\"><span style=\"font-size: 14px;\">整理状态，此时任务都已经执行完毕，并且也没有工作线程<br style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;\"  />执行 terminated 方法后进入 TERMINATED 状态</span></td></tr><tr style=\"box-sizing: border-box;font-size: inherit;color: inherit;line-height: inherit;border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);\"><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\" width=\"121\"><span style=\"font-size: 14px;\">TERMINATED</span></td><td style=\"box-sizing: border-box;padding: 0.5em 1em;border-color: rgb(204, 204, 204);font-size: 1em;color: inherit;line-height: inherit;\" width=\"418\"><span style=\"font-size: 14px;\">终止状态，此时线程池完全终止了，并完成了所有资源的释放</span></td></tr></tbody></table><h2 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">重要属性</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">一个线程池的核心参数有很多，每个参数都有着特殊的作用，各个参数聚合在一起后将完成整个线程池的完整工作。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">1、线程状态和工作线程数量</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">首先线程池是有状态的，不同状态下线程池的行为是不一样的，5种状态已经在上面说过了。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">另外线程池肯定是需要线程去执行具体的任务的，所以在线程池中就封装了一个内部类 Worker 作为工作线程，每个 Worker 中都维持着一个 Thread。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">线程池的重点之一就是控制线程资源合理高效的使用，所以必须控制工作线程的个数，所以需要保存当前线程池中工作线程的个数。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">看到这里，你是否觉得需要用两个变量来保存线程池的状态和线程池中工作线程的个数呢？但是在 ThreadPoolExecutor 中只用了一个 AtomicInteger 型的变量就保存了这两个属性的值，那就是 ctl。</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"线程池是怎样工作的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361605.jpeg\" alt=\"线程池是怎样工作的\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">ctl 的高3位用来表示线程池的状态(runState)，低29位用来表示工作线程的个数(workerCnt)，为什么要用3位来表示线程池的状态呢，原因是线程池一共有5种状态，而2位只能表示出4种情况，所以至少需要3位才能表示得了5种状态。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">2、核心线程数和最大线程数</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">现在有了标志工作线程的个数的变量了，那到底该有多少个线程才合适呢？线程多了浪费线程资源，少了又不能发挥线程池的性能。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">为了解决这个问题，线程池设计了两个变量来协作，分别是：</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: 14px;color: rgb(62, 62, 62);\">核心线程数：corePoolSize 用来表示线程池中的核心线程的数量，也可以称为可闲置的线程数量</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">最大线程数：maximumPoolSize 用来表示线程池中最多能够创建的线程数量</span></p></li></ul><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">现在我们有一个疑问，既然已经有了标识工作线程的个数的变量了，为什么还要有核心线程数、最大线程数呢？</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">其实你这样想就能够理解了，创建线程是有代价的，不能每次要执行一个任务时就创建一个线程，但是也不能在任务非常多的时候，只有少量的线程在执行，这样任务是来不及处理的，而是应该创建合适的足够多的线程来及时的处理任务。随着任务数量的变化，当任务数明显很小时，原本创建的多余的线程就没有必要再存活着了，因为这时使用少量的线程就能够处理的过来了，所以说真正工作的线程的数量，是随着任务的变化而变化的。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">那核心线程数和最大线程数与工作线程个数的关系是什么呢？</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"线程池是怎样工作的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361606.jpeg\" alt=\"线程池是怎样工作的\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">工作线程的个数可能从0到最大线程数之间变化，当执行一段时间之后可能维持在 corePoolSize，但也不是绝对的，取决于核心线程是否允许被超时回收。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">3、创建线程的工厂</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">既然是线程池，那自然少不了线程，线程该如何来创建呢？这个任务就交给了线程工厂 ThreadFactory 来完成。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">4、缓存任务的阻塞队列</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">上面我们说了核心线程数和最大线程数，并且也介绍了工作线程的个数是在0和最大线程数之间变化的。但是不可能一下子就创建了所有线程，把线程池装满，而是有一个过程，这个过程是这样的：</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">当线程池接收到一个任务时，如果工作线程数没有达到corePoolSize，那么就会新建一个线程，并绑定该任务，直到工作线程的数量达到 corePoolSize 前都不会重用之前的线程。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">当工作线程数达到 corePoolSize 了，这时又接收到新任务时，会将任务存放在一个阻塞队列中等待核心线程去执行。为什么不直接创建更多的线程来执行新任务呢，原因是核心线程中很可能已经有线程执行完自己的任务了，或者有其他线程马上就能处理完当前的任务，并且接下来就能投入到新的任务中去，所以阻塞队列是一种缓冲的机制，给核心线程一个机会让他们充分发挥自己的能力。另外一个值得考虑的原因是，创建线程毕竟是比较昂贵的，不可能一有任务要执行就去创建一个新的线程。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">所以我们需要为线程池配备一个阻塞队列，用来临时缓存任务，这些任务将等待工作线程来执行。</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"线程池是怎样工作的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361606.jpeg\" alt=\"线程池是怎样工作的\"  /></figure><h3 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">5、非核心线程存活时间</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">上面我们说了当工作线程数达到 corePoolSize 时，线程池会将新接收到的任务存放在阻塞队列中，而阻塞队列又两种情况：一种是有界的队列，一种是无界的队列。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(255, 104, 39);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">如果是无界队列，那么当核心线程都在忙的时候，所有新提交的任务都会被存放在该无界队列中，这时最大线程数将变得没有意义，因为阻塞队列不会存在被装满的情况。</strong></span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">如果是有界队列，那么当阻塞队列中装满了等待执行的任务，这时再有新任务提交时，线程池就需要创建新的“临时”线程来处理，相当于增派人手来处理任务。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">但是创建的“临时”线程是有存活时间的，不可能让他们一直都存活着，当阻塞队列中的任务被执行完毕，并且又没有那么多新任务被提交时，“临时”线程就需要被回收销毁，在被回收销毁之前等待的这段时间，就是非核心线程的存活时间，也就是 keepAliveTime 属性。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">那么什么是“非核心线程”呢？是不是先创建的线程就是核心线程，后创建的就是非核心线程呢？</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">其实核心线程跟创建的先后没有关系，而是跟工作线程的个数有关，如果当前工作线程的个数大于核心线程数，那么所有的线程都可能是“非核心线程”，都有被回收的可能。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">一个线程执行完了一个任务后，会去阻塞队列里面取新的任务，在取到任务之前它就是一个闲置的线程。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"color: rgb(255, 104, 39);\"><strong style=\"color: inherit;font-size: inherit;line-height: inherit;\">取任务的方法有两种，一种是通过 take() 方法一直阻塞直到取出任务，另一种是通过 poll(keepAliveTime，timeUnit) 方法在一定时间内取出任务或者超时，如果超时这个线程就会被回收，请注意核心线程一般不会被回收。</strong></span></p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">那么怎么保证核心线程不会被回收呢？还是跟工作线程的个数有关，每一个线程在取任务的时候，线程池会比较当前的工作线程个数与核心线程数：</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">如果工作线程数小于当前的核心线程数，则使用第一种方法取任务，也就是没有超时回收，这时所有的工作线程都是“核心线程”，他们不会被回收；</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">如果大于核心线程数，则使用第二种方法取任务，一旦超时就回收，所以并没有绝对的核心线程，只要这个线程没有在存活时间内取到任务去执行就会被回收。</span></p></li></ul><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">所以每个线程想要保住自己“核心线程”的身份，必须充分努力，尽可能快的获取到任务去执行，这样才能逃避被回收的命运。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">核心线程一般不会被回收，但是也不是绝对的，如果我们设置了允许核心线程超时被回收的话，那么就没有核心线程这种说法了，所有的线程都会通过 poll(keepAliveTime, timeUnit) 来获取任务，一旦超时获取不到任务，就会被回收，一般很少会这样来使用，除非该线程池需要处理的任务非常少，并且频率也不高，不需要将核心线程一直维持着。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">6、拒绝策略</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">虽然我们有了阻塞队列来对任务进行缓存，这从一定程度上为线程池的执行提供了缓冲期，但是如果是有界的阻塞队列，那就存在队列满的情况，也存在工作线程的数据已经达到最大线程数的时候。如果这时候再有新的任务提交时，显然线程池已经心有余而力不足了，因为既没有空余的队列空间来存放该任务，也无法创建新的线程来执行该任务了，所以这时我们就需要有一种拒绝策略，即 handler。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">拒绝策略是一个 RejectedExecutionHandler 类型的变量，用户可以自行指定拒绝的策略，如果不指定的话，线程池将使用默认的拒绝策略：抛出异常。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">在线程池中还为我们提供了很多其他可以选择的拒绝策略：</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">直接丢弃该任务</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">使用调用者线程执行该任务</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">丢弃任务队列中的最老的一个任务，然后提交该任务</span></p></li></ul><h2 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">工作流程</span></h2><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">了解了线程池中所有的重要属性之后，现在我们需要来了解下线程池的工作流程了。</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"线程池是怎样工作的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361606.jpeg\" alt=\"线程池是怎样工作的\"  /></figure><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">上图是一张线程池工作的精简图，实际的过程比这个要复杂的多，不过这些应该能够完全覆盖到线程池的整个工作流程了。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">整个过程可以拆分成以下几个部分：</p><h3 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">1、提交任务</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">当向线程池提交一个新的任务时，线程池有三种处理情况，分别是：创建一个工作线程来执行该任务、将任务加入阻塞队列、拒绝该任务。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">提交任务的过程也可以拆分成以下几个部分：</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">当工作线程数小于核心线程数时，直接创建新的核心工作线程</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">当工作线程数不小于核心线程数时，就需要尝试将任务添加到阻塞队列中去</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">如果能够加入成功，说明队列还没有满，那么需要做以下的二次验证来保证添加进去的任务能够成功被执行</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">验证当前线程池的运行状态，如果是非RUNNING状态，则需要将任务从阻塞队列中移除，然后拒绝该任务</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">验证当前线程池中的工作线程的个数，如果为0，则需要主动添加一个空工作线程来执行刚刚添加到阻塞队列中的任务</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">如果加入失败，则说明队列已经满了，那么这时就需要创建新的“临时”工作线程来执行任务</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">如果创建成功，则直接执行该任务</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">如果创建失败，则说明工作线程数已经等于最大线程数了，则只能拒绝该任务了</span></p></li></ul><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">整个过程可以用下面这张图来表示：</p><figure style=\"font-size: 14px;color: rgb(62, 62, 62);line-height: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\"><img class=\"\"     style=\"margin-right: auto;margin-bottom: 10px;margin-left: auto;border-width: initial;border-style: none;border-color: initial;border-radius: 0px;max-width: 98%;font-size: inherit;color: inherit;line-height: inherit;display: block;\" title=\"线程池是怎样工作的\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361607.jpeg\" alt=\"线程池是怎样工作的\"  /></figure><h3 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">2、创建工作线程</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">创建工作线程需要做一系列的判断，需要确保当前线程池可以创建新的线程之后，才能创建。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">首先，当线程池的状态是 SHUTDOWN 或者 STOP 时，则不能创建新的线程。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">另外，当线程工厂创建线程失败时，也不能创建新的线程。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">还有就是当前工作线程的数量与核心线程数、最大线程数进行比较，如果前者大于后者的话，也不允许创建。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">除此之外，会尝试通过 CAS 来自增工作线程的个数，如果自增成功了，则会创建新的工作线程，即 Worker 对象。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">然后加锁进行二次验证是否能够创建工作线程，最后如果创建成功，则会启动该工作线程。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">3、启动工作线程</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">当工作线程创建成功后，也就是 Worker 对象已经创建好了，这时就需要启动该工作线程，让线程开始干活了，Worker 对象中关联着一个 Thread，所以要启动工作线程的话，只要通过 worker.thread.start() 来启动该线程即可。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">启动完了之后，就会执行 Worker 对象的 run 方法，因为 Worker 实现了 Runnable 接口，所以本质上 Worker 也是一个线程。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">通过线程 start 开启之后就会调用到 Runnable 的 run 方法，在 worker 对象的 run 方法中，调用了 runWorker(this) 方法，也就是把当前对象传递给了 runWorker 方法，让他来执行。</p><h3 style=\"margin-top: 1.5em;margin-bottom: 0.5em;font-weight: bold;font-size: 15px;color: rgb(49, 121, 166);line-height: inherit;text-align: center;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;white-space: normal;background-color: rgb(255, 255, 255);\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">4、获取任务并执行</span></h3><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">在 runWorker 方法被调用之后，就是执行具体的任务了，首先需要拿到一个可以执行的任务，而 Worker 对象中默认绑定了一个任务，如果该任务不为空的话，那么就是直接执行。</p><p style=\"margin: 10px 6.75px;font-size: 14px;color: rgb(62, 62, 62);line-height: 1.75em;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: start;white-space: normal;background-color: rgb(255, 255, 255);\">执行完了之后，就会去阻塞队列中获取任务来执行，而获取任务的过程，需要考虑当前工作线程的个数。</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">如果工作线程数大于核心线程数，那么就需要通过 poll 来获取，因为这时需要对闲置的线程进行回收；</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 14px;\">如果工作线程数小于等于核心线程数，那么就可以通过 take 来获取了，因此这时所有的线程都是核心线程，不需要进行回收，前提是没有设置 allowCoreThreadTimeOut</span></p></li></ul><p><br  /></p><p><br  /></p><p style=\"white-space: normal;\"><span style=\"color: rgb(255, 104, 39);font-size: 16px;\">推荐阅读</span></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484140&amp;idx=1&amp;sn=88a4c388bfb97b30d00e173296732604&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">Nacos 配置实时更新原理分析</span></a></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484154&amp;idx=1&amp;sn=c99d867ebe79e5b3fa784beff06d52b7&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">更好的使用 Nacos 配置中心</span></a><br  /></p><p style=\"white-space: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484167&amp;idx=1&amp;sn=a0b50779d871428ea09f956da0c07d82&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 14px;color: rgb(53, 124, 168);\">Nacos 注册中心原理分析</span></a></p><p style=\"white-space: normal;\"><br  /></p><p style=\"white-space: normal;\"><br  /></p><p style=\"white-space: normal;text-align: center;\"><img class=\"\"       style=\"box-shadow: rgb(170, 170, 170) 0em 0em 1em 0px;width: 35%;border-radius: 12px;height: auto !important;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361608.jpeg\" alt=\"线程池是怎样工作的\" title=\"线程池是怎样工作的\"  /></p><p style=\"white-space: normal;\"><br  /></p><p style=\"white-space: normal;text-align: right;\"><span style=\"color: rgb(53, 124, 168);font-size: 15px;\">如果文章对你有帮助，欢迎转发支持</span></p><p style=\"white-space: normal;text-align: right;\"><span style=\"font-size: 13px;color: rgb(255, 104, 39);\">如果觉得好看，请点击“好看”哦 ↓↓</span></p><p><br  /></p> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（逐码）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/VTBj0KS_vPR_YY2imJYYFw\" rel=\"noopener noreferrer\">线程池是怎样工作的</a></p></blockquote></div>', '线程池是怎样工作的', '', 'inherit', 'closed', 'closed', '', '113-revision-v1', '', '', '2020-03-28 10:13:28', '2020-03-28 02:13:28', '', 113, 'https://www.javashitang.com/?p=122', 0, 'revision', '', 0);
INSERT INTO `wp_posts` VALUES (123, 1, '2019-02-16 09:39:25', '2020-03-28 02:13:49', '<div class=\"bpp-post-content\">                                                                                                                            <p style=\"box-sizing: border-box;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">我在 Redant(https://github.com/all4you/redant) 中通过继承 ChannelHandler 实现了拦截器的功能，并且 pipeline 就是一种责任链模式的应用。但是我后面对原本的拦截器进行了重新设计，为什么这样做呢，因为原本的方式是在 ChannelHandler 的基础上操作的，而我们知道 Netty 的数据处理都是基于 ByteBuf 的，这就涉及到引用计数释放的问题，前面的 ChannelHandler 在处理时可以不关心引用计数的问题，而交给最后一个 ChannelHandler 去释放。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">但是拦截器的一大特性就是当某个条件不满足时需要中断后面的操作直接返回，所以这就造成了在 pipeline 中某个节点需要释放引用计数，另外一个方面就是原先的设计使用了很多自定义的 ChannelHandler，有的只做了一些简单的工作，所以完全可以对他们进行合并，使代码变得更加精简紧凑。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">合并多个 ChannelHandler 是比较简单的，重新设计拦截器相对就复杂一些了。</p><h2 style=\"box-sizing: border-box;margin-top: 1.5rem;margin-bottom: 1rem;color: rgb(21, 153, 87);line-height: 1.35;font-size: 24px;text-align: start;white-space: normal;font-family: Menlo, Monaco, &quot;Source Code Pro&quot;, Consolas, Inconsolata, &quot;Ubuntu Mono&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Courier New&quot;, &quot;Droid Sans Mono&quot;, &quot;Hiragino Sans GB&quot;, 微软雅黑, monospace !important;\">重新设计拦截器</h2><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">首先我把原本的前置拦截器和后置拦截器统一成一个拦截器，然后抽象出两个方法，分别表示：前置处理，后置处理，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361629.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">默认前置处理的方法返回 true，用户可以根据他们的业务进行覆盖。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">这里是定义了一个抽象类，也可以用接口，java 8 开始接口中可以有默认方法实现。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">拦截器定义好之后，现在就可以在 ChannelHandler 中加入拦截器的方法调用了，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361630.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">当前置方法返回 false 时，直接返回，中断后面的业务逻辑处理，最终会到 finally 中将结果写入 response 中返回给前端。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">现在只要实现 InterceptorHandler 中的两个方法就可以了，其实这也很简单，只要获取到所有的 Interceptor 的实现类，然后依次调用这些实现类的前置方法和后置方法就好了，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361630-1.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><h2 style=\"box-sizing: border-box;margin-top: 1.5rem;margin-bottom: 1rem;color: rgb(21, 153, 87);line-height: 1.35;font-size: 24px;text-align: start;white-space: normal;font-family: Menlo, Monaco, &quot;Source Code Pro&quot;, Consolas, Inconsolata, &quot;Ubuntu Mono&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Courier New&quot;, &quot;Droid Sans Mono&quot;, &quot;Hiragino Sans GB&quot;, 微软雅黑, monospace !important;\">获取拦截器</h2><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">现在的重点就是怎样获取到所有的拦截器，首先可以想到的是通过扫描的方法，找到所有 Interceptor 的实现类，然后将这些实现类加入到一个 List 中即可。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">那怎么保证拦截器的执行顺序呢，很简单，只要在加入 List 之前对他们进行排序就可以了。再定义一个 @Order 注解来表示排序的顺序，然后用一个 Wrapper 包装类将 Interceptor 和 Order 包装起来，排序到包装类的 List 中，最后再从包装类的 List 中依次取出所有的 Interceptor 就完成了 Interceptor 的排序了。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">知道了大致的原理之后，实现起来就很简单了，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361631.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">但是我们不能每次都通过调用 scanInterceptors() 方法来获取所有的拦截器，如果这样每次都扫描一次的话性能会有影响，所以我们只需要第一次调用一下该方法，然后把结果保存在一个私有的变量中，获取的时候直接读取该变量的值即可，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361632.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><h2 style=\"box-sizing: border-box;margin-top: 1.5rem;margin-bottom: 1rem;color: rgb(21, 153, 87);line-height: 1.35;font-size: 24px;text-align: start;white-space: normal;font-family: Menlo, Monaco, &quot;Source Code Pro&quot;, Consolas, Inconsolata, &quot;Ubuntu Mono&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Courier New&quot;, &quot;Droid Sans Mono&quot;, &quot;Hiragino Sans GB&quot;, 微软雅黑, monospace !important;\">自定义拦截器实现类</h2><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">下面让我们来自定义两个拦截器实现类，来验证下具体的效果。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">第一个拦截器，在前置方法中对请求参数进行判断，如果请求参数中有 block=true 的参数，则进行拦截，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361632.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">第二个拦截器，在后置方法中打印出每次请求的耗时，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361633.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">通过 @Order 注解来指定执行的顺序，先执行 BlockInterceptor 再执行 PerformanceInterceptor。</p><h2 style=\"box-sizing: border-box;margin-top: 1.5rem;margin-bottom: 1rem;color: rgb(21, 153, 87);line-height: 1.35;font-size: 24px;text-align: start;white-space: normal;font-family: Menlo, Monaco, &quot;Source Code Pro&quot;, Consolas, Inconsolata, &quot;Ubuntu Mono&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Courier New&quot;, &quot;Droid Sans Mono&quot;, &quot;Hiragino Sans GB&quot;, 微软雅黑, monospace !important;\">查看效果</h2><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">现在我们请求 /user/info 这个接口，查看下效果。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">首先我们只提交正常的参数，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361633.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">打印的结果如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361634.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">从打印的结果中可以看到依次执行了:</p><ul style=\"list-style-type: square;\" class=\"list-paddingleft-2\"><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);line-height: 22px;font-size: 14px !important;\"><span style=\"box-sizing: border-box;line-height: 22px;\">BlockInterceptor 的 preHandle 方法</span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);line-height: 22px;font-size: 14px !important;\"><span style=\"box-sizing: border-box;line-height: 22px;\">PerformanceInterceptor 的 preHandle方法</span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);line-height: 22px;font-size: 14px !important;\"><span style=\"box-sizing: border-box;line-height: 22px;\">BlockInterceptor 的 postHandle 方法</span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);line-height: 22px;font-size: 14px !important;\"><span style=\"box-sizing: border-box;line-height: 22px;\">PerformanceInterceptor 的 postHandle方法</span></span></p></li></ul><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">这说明拦截器是按照 @Order 注解进行了排序，然后依次执行的。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">然后我们再提交一个 block=true 的参数，再次请求该接口，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361634.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">可以看到该请求已经被拦截器的前置方法给拦截了，再看下打印的日志，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585361635.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">只打印了 BlockInterceptor 的 preHandler 方法中的部分日志，后面的方法都没有执行，因为被拦截了直接返回了。</p><h2 style=\"box-sizing: border-box;margin-top: 1.5rem;margin-bottom: 1rem;color: rgb(21, 153, 87);line-height: 1.35;font-size: 24px;text-align: start;white-space: normal;font-family: Menlo, Monaco, &quot;Source Code Pro&quot;, Consolas, Inconsolata, &quot;Ubuntu Mono&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Courier New&quot;, &quot;Droid Sans Mono&quot;, &quot;Hiragino Sans GB&quot;, 微软雅黑, monospace !important;\">存在的问题</h2><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">到这里已经对拦截器完成了改造，并且也验证了效果，看上去效果还可以。但是有没有什么问题呢？</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">还真有一个问题：所有的 Interceptor 实现类只要被扫描到了，就会被加入到 List 中去，如果不想应用某一个拦截器这时就做不到了，因为无法对 list 中的值进行动态的更改。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">如果我们可以动态的获取一个保存了 Interceptor 的 list ，如果该 list 中没有获取到值，再通过扫描的方式去拿到所有的 Interceptor 这样就完美了。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">动态获取 Interceptor 的 list 的方法，可以由用户自定义实现，根据某些规则来确定要不要将某个 Interceptor 加入到 list 中去，这样就把 Interceptor 的实现和使用进行了解耦了。用户可以实现任意多的 Interceptor，但是只根据规则去使用其中的某些 Interceptor。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">理清楚了原理之后，就很好实现了，首先定义一个接口，用来构造 Interceptor 的 List，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361635.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">有了 InterceptorBuilder 之后，在获取 Interceptor 的时候，就可以先根据 InterceptorBuilder 来获取了，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361636.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">以下是一个示例的 InterceptorBuilder，具体的可以用户自行扩展设计，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361636.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">这样用户只要实现一个 InterceptorBuilder 接口，即可按照自己的意图去组装所有的拦截器。</p><h2 style=\"box-sizing: border-box;margin-top: 1.5rem;margin-bottom: 1rem;color: rgb(21, 153, 87);line-height: 1.35;font-size: 24px;text-align: start;white-space: normal;font-family: Menlo, Monaco, &quot;Source Code Pro&quot;, Consolas, Inconsolata, &quot;Ubuntu Mono&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Courier New&quot;, &quot;Droid Sans Mono&quot;, &quot;Hiragino Sans GB&quot;, 微软雅黑, monospace !important;\">链式责任链</h2><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">在 Redant 中实现的拦截器所使用的责任链，其实是通过一个 List 来保存了所有的 Interceptor，那我们通常所说的责任链除了使用 List 来实现外，还可以通过真正的链表结构来实现，Netty 和 Sentinel 中都有这样的实现，下面我来实现一个简单的链式结构的责任链。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">责任链的应用已经有很多了，这里不再赘述，假设我们需要对前端提交的请求做以下操作：鉴权，登录，日志记录，通过责任链来做这些处理是非常合适的。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">首先定义一个处理接口，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361637.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">通过 List 方式的实现很简单，只需要把每个 Processor 的实现类添加到一个 List 中即可，处理的时候遍历该 List 依次处理，这里不再做具体的描述，感兴趣的可以自行实现。</p><h3 style=\"box-sizing: border-box;margin-top: 1.5rem;margin-bottom: 1rem;color: rgb(21, 153, 87);line-height: 1.35;font-size: 20px;text-align: start;white-space: normal;font-family: Menlo, Monaco, &quot;Source Code Pro&quot;, Consolas, Inconsolata, &quot;Ubuntu Mono&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Courier New&quot;, &quot;Droid Sans Mono&quot;, &quot;Hiragino Sans GB&quot;, 微软雅黑, monospace !important;\">定义节点</h3><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">如果是通过链表的形式来实现的话，首先我们需要有一个类表示链表中的某个节点，并且该节点需要有一个同类型的私有变量表示该节点的下个节点，这样就可以实现一个链表了，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585361637.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><h3 style=\"box-sizing: border-box;margin-top: 1.5rem;margin-bottom: 1rem;color: rgb(21, 153, 87);line-height: 1.35;font-size: 20px;text-align: start;white-space: normal;font-family: Menlo, Monaco, &quot;Source Code Pro&quot;, Consolas, Inconsolata, &quot;Ubuntu Mono&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Courier New&quot;, &quot;Droid Sans Mono&quot;, &quot;Hiragino Sans GB&quot;, 微软雅黑, monospace !important;\">定义容器</h3><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">接着我们需要定义一个容器，在容器中有头，尾两个节点，头结点作为一个空节点，真正的节点将添加到头结点的 next 节点上去，尾节点作为一个指针，用来指向当前添加的节点，下一次添加新节点时，将从尾节点处添加。有了具体的处理逻辑之后，实现起来就很简单了，这个容器的实现如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585361638.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><h3 style=\"box-sizing: border-box;margin-top: 1.5rem;margin-bottom: 1rem;color: rgb(21, 153, 87);line-height: 1.35;font-size: 20px;text-align: start;white-space: normal;font-family: Menlo, Monaco, &quot;Source Code Pro&quot;, Consolas, Inconsolata, &quot;Ubuntu Mono&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Courier New&quot;, &quot;Droid Sans Mono&quot;, &quot;Hiragino Sans GB&quot;, 微软雅黑, monospace !important;\">定义实现类</h3><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">下面我们可以实现具体的 Processor 来处理业务逻辑了，只要继承 AbstractLinkedProcessor 即可，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361639.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">其他两个实现类： LoginProcessor ，LogProcessor 类似，这里就不贴出来了。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">然后就可以根据规则来组装所需要的 Processor 了，假设我们的规则是需要对请求依次进行：鉴权，登录，日志记录，那组装的代码如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361639.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">执行该代码，结果如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585361639.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><h3 style=\"box-sizing: border-box;margin-top: 1.5rem;margin-bottom: 1rem;color: rgb(21, 153, 87);line-height: 1.35;font-size: 20px;text-align: start;white-space: normal;font-family: Menlo, Monaco, &quot;Source Code Pro&quot;, Consolas, Inconsolata, &quot;Ubuntu Mono&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Courier New&quot;, &quot;Droid Sans Mono&quot;, &quot;Hiragino Sans GB&quot;, 微软雅黑, monospace !important;\">存在的问题</h3><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">看的仔细的同学可能发现了，在 AuthProcessor 的业务逻辑实现中，除了执行了具体的逻辑代码之外，还调用了一行 super.process(content) 代码，这行代码的作用是调用链表中的下一个节点的 process 方法。但是如果有一天我们在写自己的 Processor 实现类时，忘记调用这行代码的话，会是怎样的结果呢？</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">结果就是当前节点后面的节点不会被调用，整个链表就像断掉一样，那怎样来避免这种问题的发生呢？其实我们在 AbstractProcessor 中已经实现了 process 方法，该方法就是调用下个节点的 process 方法的。那我们在这个方法触发调用下个节点之前，再抽象出一个用以具体的业务逻辑处理的方法 doProcess ，先执行 doProcess 方法，执行完之后再触发下个节点的 process ，这样就不会出现链表断掉的情况了，具体的实现如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585361640.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">相应的 LinkedProcessorChain 和具体的实现类也要做响应的调整，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361640.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361641.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">重新执行刚刚的测试类，发现结果和之前的一样，至此一个简单的链式责任链完成了。</p><p style=\"white-space: normal;text-align: center;\"><br  /></p><p style=\"white-space: normal;text-align: center;\"><span style=\"color: rgb(61, 167, 66);\">关注「逅弈逐码」</span></p><p style=\"white-space: normal;text-align: center;\"><span style=\"color: rgb(61, 167, 66);\">查看更多原创好文</span></p><p style=\"white-space: normal;text-align: center;\"><img class=\"\"       src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361641.jpeg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"white-space: normal;text-align: center;\"><br  /></p><p style=\"margin-top: 15px;margin-bottom: 15px;box-sizing: border-box;white-space: pre-line;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;line-height: normal;\"><span style=\"font-size: 14px;\"><strong>更多推荐内容</strong></span></p><p style=\"margin-top: 10px;margin-bottom: 15px;box-sizing: border-box;white-space: pre-line;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;line-height: normal;\"><span style=\"font-size: 10px;\">↓↓↓</span></p><p style=\"margin-top: 15px;margin-bottom: 15px;box-sizing: border-box;font-size: 16px;white-space: pre-line;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;line-height: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484105&amp;idx=1&amp;sn=0f912707decbc94831f887900ae98fc0&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 12px;\">《Sentinel 原理：控制台是如何获取到实时数据的》</span></a></p><p style=\"margin-top: 15px;margin-bottom: 15px;box-sizing: border-box;font-size: 16px;white-space: pre-line;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;line-height: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484101&amp;idx=1&amp;sn=07cff3892c884dd9075e73dd2ae87dd5&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 12px;\">《Sentinel 实战：搭建集群限流环境》</span></a><br  /></p><p style=\"margin-top: 15px;margin-bottom: 15px;box-sizing: border-box;font-size: 16px;white-space: pre-line;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;line-height: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484110&amp;idx=1&amp;sn=2a3dbfb804f282160e288d9178b2665e&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 12px;\">《Netty 实战：如何编写一个麻小俱全的 Web 容器》</span></a></p><p style=\"margin-top: 15px;margin-bottom: 15px;box-sizing: border-box;font-size: 16px;white-space: pre-line;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;line-height: normal;\"><span style=\"font-size: 12px;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484035&amp;idx=1&amp;sn=bbffff2bc37d0030f0a267d33b4437e5&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">《让人欢喜让人忧的正则表达式》</a></span><br  /></p><p style=\"margin-top: 15px;margin-bottom: 15px;box-sizing: border-box;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;\"><br  /></p><p><br  /></p> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（逐码）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/gXCog_DxNjpMnYX9IpF6TQ\" rel=\"noopener noreferrer\">用责任链模式设计拦截器</a></p></blockquote></div>', '用责任链模式设计拦截器', '', 'publish', 'open', 'open', '', '234f0a372f', '', '', '2020-03-28 10:14:02', '2020-03-28 02:14:02', '', 0, 'https://www.javashitang.com/?p=123', 0, 'post', '', 0);
INSERT INTO `wp_posts` VALUES (124, 1, '2020-03-28 10:13:49', '2020-03-28 02:13:49', '', 'beepress4-1585361629', '', 'inherit', 'open', 'closed', '', 'beepress4-1585361629', '', '', '2020-03-28 10:13:49', '2020-03-28 02:13:49', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361629.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (125, 1, '2020-03-28 10:13:49', '2020-03-28 02:13:49', '', 'beepress8-1585361629', '', 'inherit', 'open', 'closed', '', 'beepress8-1585361629', '', '', '2020-03-28 10:13:49', '2020-03-28 02:13:49', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361629.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (126, 1, '2020-03-28 10:13:50', '2020-03-28 02:13:50', '', 'beepress10-1585361630', '', 'inherit', 'open', 'closed', '', 'beepress10-1585361630', '', '', '2020-03-28 10:13:50', '2020-03-28 02:13:50', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361630.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (127, 1, '2020-03-28 10:13:50', '2020-03-28 02:13:50', '', 'beepress10-1585361630-1', '', 'inherit', 'open', 'closed', '', 'beepress10-1585361630-1', '', '', '2020-03-28 10:13:50', '2020-03-28 02:13:50', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361630-1.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (128, 1, '2020-03-28 10:13:51', '2020-03-28 02:13:51', '', 'beepress8-1585361631', '', 'inherit', 'open', 'closed', '', 'beepress8-1585361631', '', '', '2020-03-28 10:13:51', '2020-03-28 02:13:51', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361631.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (129, 1, '2020-03-28 10:13:52', '2020-03-28 02:13:52', '', 'beepress1-1585361632', '', 'inherit', 'open', 'closed', '', 'beepress1-1585361632', '', '', '2020-03-28 10:13:52', '2020-03-28 02:13:52', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361632.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (130, 1, '2020-03-28 10:13:52', '2020-03-28 02:13:52', '', 'beepress8-1585361632', '', 'inherit', 'open', 'closed', '', 'beepress8-1585361632', '', '', '2020-03-28 10:13:52', '2020-03-28 02:13:52', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361632.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (131, 1, '2020-03-28 10:13:53', '2020-03-28 02:13:53', '', 'beepress3-1585361633', '', 'inherit', 'open', 'closed', '', 'beepress3-1585361633', '', '', '2020-03-28 10:13:53', '2020-03-28 02:13:53', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361633.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (132, 1, '2020-03-28 10:13:53', '2020-03-28 02:13:53', '', 'beepress1-1585361633', '', 'inherit', 'open', 'closed', '', 'beepress1-1585361633', '', '', '2020-03-28 10:13:53', '2020-03-28 02:13:53', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361633.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (133, 1, '2020-03-28 10:13:54', '2020-03-28 02:13:54', '', 'beepress10-1585361634', '', 'inherit', 'open', 'closed', '', 'beepress10-1585361634', '', '', '2020-03-28 10:13:54', '2020-03-28 02:13:54', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361634.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (134, 1, '2020-03-28 10:13:54', '2020-03-28 02:13:54', '', 'beepress4-1585361634', '', 'inherit', 'open', 'closed', '', 'beepress4-1585361634', '', '', '2020-03-28 10:13:54', '2020-03-28 02:13:54', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361634.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (135, 1, '2020-03-28 10:13:55', '2020-03-28 02:13:55', '', 'beepress7-1585361635', '', 'inherit', 'open', 'closed', '', 'beepress7-1585361635', '', '', '2020-03-28 10:13:55', '2020-03-28 02:13:55', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585361635.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (136, 1, '2020-03-28 10:13:55', '2020-03-28 02:13:55', '', 'beepress3-1585361635', '', 'inherit', 'open', 'closed', '', 'beepress3-1585361635', '', '', '2020-03-28 10:13:55', '2020-03-28 02:13:55', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361635.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (137, 1, '2020-03-28 10:13:56', '2020-03-28 02:13:56', '', 'beepress8-1585361636', '', 'inherit', 'open', 'closed', '', 'beepress8-1585361636', '', '', '2020-03-28 10:13:56', '2020-03-28 02:13:56', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361636.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (138, 1, '2020-03-28 10:13:56', '2020-03-28 02:13:56', '', 'beepress0-1585361636', '', 'inherit', 'open', 'closed', '', 'beepress0-1585361636', '', '', '2020-03-28 10:13:56', '2020-03-28 02:13:56', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361636.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (139, 1, '2020-03-28 10:13:57', '2020-03-28 02:13:57', '', 'beepress3-1585361637', '', 'inherit', 'open', 'closed', '', 'beepress3-1585361637', '', '', '2020-03-28 10:13:57', '2020-03-28 02:13:57', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361637.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (140, 1, '2020-03-28 10:13:57', '2020-03-28 02:13:57', '', 'beepress5-1585361637', '', 'inherit', 'open', 'closed', '', 'beepress5-1585361637', '', '', '2020-03-28 10:13:57', '2020-03-28 02:13:57', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585361637.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (141, 1, '2020-03-28 10:13:58', '2020-03-28 02:13:58', '', 'beepress6-1585361638', '', 'inherit', 'open', 'closed', '', 'beepress6-1585361638', '', '', '2020-03-28 10:13:58', '2020-03-28 02:13:58', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585361638.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (142, 1, '2020-03-28 10:13:59', '2020-03-28 02:13:59', '', 'beepress0-1585361639', '', 'inherit', 'open', 'closed', '', 'beepress0-1585361639', '', '', '2020-03-28 10:13:59', '2020-03-28 02:13:59', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361639.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (143, 1, '2020-03-28 10:13:59', '2020-03-28 02:13:59', '', 'beepress4-1585361639', '', 'inherit', 'open', 'closed', '', 'beepress4-1585361639', '', '', '2020-03-28 10:13:59', '2020-03-28 02:13:59', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361639.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (144, 1, '2020-03-28 10:13:59', '2020-03-28 02:13:59', '', 'beepress7-1585361639', '', 'inherit', 'open', 'closed', '', 'beepress7-1585361639', '', '', '2020-03-28 10:13:59', '2020-03-28 02:13:59', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585361639.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (145, 1, '2020-03-28 10:14:00', '2020-03-28 02:14:00', '', 'beepress7-1585361640', '', 'inherit', 'open', 'closed', '', 'beepress7-1585361640', '', '', '2020-03-28 10:14:00', '2020-03-28 02:14:00', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585361640.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (146, 1, '2020-03-28 10:14:00', '2020-03-28 02:14:00', '', 'beepress10-1585361640', '', 'inherit', 'open', 'closed', '', 'beepress10-1585361640', '', '', '2020-03-28 10:14:00', '2020-03-28 02:14:00', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361640.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (147, 1, '2020-03-28 10:14:01', '2020-03-28 02:14:01', '', 'beepress1-1585361641', '', 'inherit', 'open', 'closed', '', 'beepress1-1585361641', '', '', '2020-03-28 10:14:01', '2020-03-28 02:14:01', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361641.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (148, 1, '2020-03-28 10:14:01', '2020-03-28 02:14:01', '', 'beepress10-1585361641', '', 'inherit', 'open', 'closed', '', 'beepress10-1585361641', '', '', '2020-03-28 10:14:01', '2020-03-28 02:14:01', '', 123, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361641.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (149, 1, '2020-03-28 10:14:02', '2020-03-28 02:14:02', '<div class=\"bpp-post-content\">                                                                                                                            <p style=\"box-sizing: border-box;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">我在 Redant(https://github.com/all4you/redant) 中通过继承 ChannelHandler 实现了拦截器的功能，并且 pipeline 就是一种责任链模式的应用。但是我后面对原本的拦截器进行了重新设计，为什么这样做呢，因为原本的方式是在 ChannelHandler 的基础上操作的，而我们知道 Netty 的数据处理都是基于 ByteBuf 的，这就涉及到引用计数释放的问题，前面的 ChannelHandler 在处理时可以不关心引用计数的问题，而交给最后一个 ChannelHandler 去释放。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">但是拦截器的一大特性就是当某个条件不满足时需要中断后面的操作直接返回，所以这就造成了在 pipeline 中某个节点需要释放引用计数，另外一个方面就是原先的设计使用了很多自定义的 ChannelHandler，有的只做了一些简单的工作，所以完全可以对他们进行合并，使代码变得更加精简紧凑。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">合并多个 ChannelHandler 是比较简单的，重新设计拦截器相对就复杂一些了。</p><h2 style=\"box-sizing: border-box;margin-top: 1.5rem;margin-bottom: 1rem;color: rgb(21, 153, 87);line-height: 1.35;font-size: 24px;text-align: start;white-space: normal;font-family: Menlo, Monaco, &quot;Source Code Pro&quot;, Consolas, Inconsolata, &quot;Ubuntu Mono&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Courier New&quot;, &quot;Droid Sans Mono&quot;, &quot;Hiragino Sans GB&quot;, 微软雅黑, monospace !important;\">重新设计拦截器</h2><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">首先我把原本的前置拦截器和后置拦截器统一成一个拦截器，然后抽象出两个方法，分别表示：前置处理，后置处理，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361629.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">默认前置处理的方法返回 true，用户可以根据他们的业务进行覆盖。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">这里是定义了一个抽象类，也可以用接口，java 8 开始接口中可以有默认方法实现。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">拦截器定义好之后，现在就可以在 ChannelHandler 中加入拦截器的方法调用了，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361630.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">当前置方法返回 false 时，直接返回，中断后面的业务逻辑处理，最终会到 finally 中将结果写入 response 中返回给前端。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">现在只要实现 InterceptorHandler 中的两个方法就可以了，其实这也很简单，只要获取到所有的 Interceptor 的实现类，然后依次调用这些实现类的前置方法和后置方法就好了，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361630-1.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><h2 style=\"box-sizing: border-box;margin-top: 1.5rem;margin-bottom: 1rem;color: rgb(21, 153, 87);line-height: 1.35;font-size: 24px;text-align: start;white-space: normal;font-family: Menlo, Monaco, &quot;Source Code Pro&quot;, Consolas, Inconsolata, &quot;Ubuntu Mono&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Courier New&quot;, &quot;Droid Sans Mono&quot;, &quot;Hiragino Sans GB&quot;, 微软雅黑, monospace !important;\">获取拦截器</h2><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">现在的重点就是怎样获取到所有的拦截器，首先可以想到的是通过扫描的方法，找到所有 Interceptor 的实现类，然后将这些实现类加入到一个 List 中即可。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">那怎么保证拦截器的执行顺序呢，很简单，只要在加入 List 之前对他们进行排序就可以了。再定义一个 @Order 注解来表示排序的顺序，然后用一个 Wrapper 包装类将 Interceptor 和 Order 包装起来，排序到包装类的 List 中，最后再从包装类的 List 中依次取出所有的 Interceptor 就完成了 Interceptor 的排序了。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">知道了大致的原理之后，实现起来就很简单了，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361631.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">但是我们不能每次都通过调用 scanInterceptors() 方法来获取所有的拦截器，如果这样每次都扫描一次的话性能会有影响，所以我们只需要第一次调用一下该方法，然后把结果保存在一个私有的变量中，获取的时候直接读取该变量的值即可，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361632.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><h2 style=\"box-sizing: border-box;margin-top: 1.5rem;margin-bottom: 1rem;color: rgb(21, 153, 87);line-height: 1.35;font-size: 24px;text-align: start;white-space: normal;font-family: Menlo, Monaco, &quot;Source Code Pro&quot;, Consolas, Inconsolata, &quot;Ubuntu Mono&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Courier New&quot;, &quot;Droid Sans Mono&quot;, &quot;Hiragino Sans GB&quot;, 微软雅黑, monospace !important;\">自定义拦截器实现类</h2><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">下面让我们来自定义两个拦截器实现类，来验证下具体的效果。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">第一个拦截器，在前置方法中对请求参数进行判断，如果请求参数中有 block=true 的参数，则进行拦截，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361632.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">第二个拦截器，在后置方法中打印出每次请求的耗时，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361633.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">通过 @Order 注解来指定执行的顺序，先执行 BlockInterceptor 再执行 PerformanceInterceptor。</p><h2 style=\"box-sizing: border-box;margin-top: 1.5rem;margin-bottom: 1rem;color: rgb(21, 153, 87);line-height: 1.35;font-size: 24px;text-align: start;white-space: normal;font-family: Menlo, Monaco, &quot;Source Code Pro&quot;, Consolas, Inconsolata, &quot;Ubuntu Mono&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Courier New&quot;, &quot;Droid Sans Mono&quot;, &quot;Hiragino Sans GB&quot;, 微软雅黑, monospace !important;\">查看效果</h2><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">现在我们请求 /user/info 这个接口，查看下效果。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">首先我们只提交正常的参数，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361633.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">打印的结果如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361634.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">从打印的结果中可以看到依次执行了:</p><ul style=\"list-style-type: square;\" class=\"list-paddingleft-2\"><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);line-height: 22px;font-size: 14px !important;\"><span style=\"box-sizing: border-box;line-height: 22px;\">BlockInterceptor 的 preHandle 方法</span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);line-height: 22px;font-size: 14px !important;\"><span style=\"box-sizing: border-box;line-height: 22px;\">PerformanceInterceptor 的 preHandle方法</span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);line-height: 22px;font-size: 14px !important;\"><span style=\"box-sizing: border-box;line-height: 22px;\">BlockInterceptor 的 postHandle 方法</span></span></p></li><li><p><span style=\"box-sizing: border-box;color: rgb(74, 74, 74);line-height: 22px;font-size: 14px !important;\"><span style=\"box-sizing: border-box;line-height: 22px;\">PerformanceInterceptor 的 postHandle方法</span></span></p></li></ul><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">这说明拦截器是按照 @Order 注解进行了排序，然后依次执行的。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">然后我们再提交一个 block=true 的参数，再次请求该接口，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361634.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">可以看到该请求已经被拦截器的前置方法给拦截了，再看下打印的日志，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585361635.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">只打印了 BlockInterceptor 的 preHandler 方法中的部分日志，后面的方法都没有执行，因为被拦截了直接返回了。</p><h2 style=\"box-sizing: border-box;margin-top: 1.5rem;margin-bottom: 1rem;color: rgb(21, 153, 87);line-height: 1.35;font-size: 24px;text-align: start;white-space: normal;font-family: Menlo, Monaco, &quot;Source Code Pro&quot;, Consolas, Inconsolata, &quot;Ubuntu Mono&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Courier New&quot;, &quot;Droid Sans Mono&quot;, &quot;Hiragino Sans GB&quot;, 微软雅黑, monospace !important;\">存在的问题</h2><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">到这里已经对拦截器完成了改造，并且也验证了效果，看上去效果还可以。但是有没有什么问题呢？</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">还真有一个问题：所有的 Interceptor 实现类只要被扫描到了，就会被加入到 List 中去，如果不想应用某一个拦截器这时就做不到了，因为无法对 list 中的值进行动态的更改。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">如果我们可以动态的获取一个保存了 Interceptor 的 list ，如果该 list 中没有获取到值，再通过扫描的方式去拿到所有的 Interceptor 这样就完美了。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">动态获取 Interceptor 的 list 的方法，可以由用户自定义实现，根据某些规则来确定要不要将某个 Interceptor 加入到 list 中去，这样就把 Interceptor 的实现和使用进行了解耦了。用户可以实现任意多的 Interceptor，但是只根据规则去使用其中的某些 Interceptor。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">理清楚了原理之后，就很好实现了，首先定义一个接口，用来构造 Interceptor 的 List，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361635.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">有了 InterceptorBuilder 之后，在获取 Interceptor 的时候，就可以先根据 InterceptorBuilder 来获取了，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361636.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">以下是一个示例的 InterceptorBuilder，具体的可以用户自行扩展设计，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361636.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">这样用户只要实现一个 InterceptorBuilder 接口，即可按照自己的意图去组装所有的拦截器。</p><h2 style=\"box-sizing: border-box;margin-top: 1.5rem;margin-bottom: 1rem;color: rgb(21, 153, 87);line-height: 1.35;font-size: 24px;text-align: start;white-space: normal;font-family: Menlo, Monaco, &quot;Source Code Pro&quot;, Consolas, Inconsolata, &quot;Ubuntu Mono&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Courier New&quot;, &quot;Droid Sans Mono&quot;, &quot;Hiragino Sans GB&quot;, 微软雅黑, monospace !important;\">链式责任链</h2><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">在 Redant 中实现的拦截器所使用的责任链，其实是通过一个 List 来保存了所有的 Interceptor，那我们通常所说的责任链除了使用 List 来实现外，还可以通过真正的链表结构来实现，Netty 和 Sentinel 中都有这样的实现，下面我来实现一个简单的链式结构的责任链。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">责任链的应用已经有很多了，这里不再赘述，假设我们需要对前端提交的请求做以下操作：鉴权，登录，日志记录，通过责任链来做这些处理是非常合适的。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">首先定义一个处理接口，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361637.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">通过 List 方式的实现很简单，只需要把每个 Processor 的实现类添加到一个 List 中即可，处理的时候遍历该 List 依次处理，这里不再做具体的描述，感兴趣的可以自行实现。</p><h3 style=\"box-sizing: border-box;margin-top: 1.5rem;margin-bottom: 1rem;color: rgb(21, 153, 87);line-height: 1.35;font-size: 20px;text-align: start;white-space: normal;font-family: Menlo, Monaco, &quot;Source Code Pro&quot;, Consolas, Inconsolata, &quot;Ubuntu Mono&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Courier New&quot;, &quot;Droid Sans Mono&quot;, &quot;Hiragino Sans GB&quot;, 微软雅黑, monospace !important;\">定义节点</h3><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">如果是通过链表的形式来实现的话，首先我们需要有一个类表示链表中的某个节点，并且该节点需要有一个同类型的私有变量表示该节点的下个节点，这样就可以实现一个链表了，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585361637.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><h3 style=\"box-sizing: border-box;margin-top: 1.5rem;margin-bottom: 1rem;color: rgb(21, 153, 87);line-height: 1.35;font-size: 20px;text-align: start;white-space: normal;font-family: Menlo, Monaco, &quot;Source Code Pro&quot;, Consolas, Inconsolata, &quot;Ubuntu Mono&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Courier New&quot;, &quot;Droid Sans Mono&quot;, &quot;Hiragino Sans GB&quot;, 微软雅黑, monospace !important;\">定义容器</h3><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">接着我们需要定义一个容器，在容器中有头，尾两个节点，头结点作为一个空节点，真正的节点将添加到头结点的 next 节点上去，尾节点作为一个指针，用来指向当前添加的节点，下一次添加新节点时，将从尾节点处添加。有了具体的处理逻辑之后，实现起来就很简单了，这个容器的实现如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585361638.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><h3 style=\"box-sizing: border-box;margin-top: 1.5rem;margin-bottom: 1rem;color: rgb(21, 153, 87);line-height: 1.35;font-size: 20px;text-align: start;white-space: normal;font-family: Menlo, Monaco, &quot;Source Code Pro&quot;, Consolas, Inconsolata, &quot;Ubuntu Mono&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Courier New&quot;, &quot;Droid Sans Mono&quot;, &quot;Hiragino Sans GB&quot;, 微软雅黑, monospace !important;\">定义实现类</h3><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">下面我们可以实现具体的 Processor 来处理业务逻辑了，只要继承 AbstractLinkedProcessor 即可，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361639.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">其他两个实现类： LoginProcessor ，LogProcessor 类似，这里就不贴出来了。</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">然后就可以根据规则来组装所需要的 Processor 了，假设我们的规则是需要对请求依次进行：鉴权，登录，日志记录，那组装的代码如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361639.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">执行该代码，结果如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585361639.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><h3 style=\"box-sizing: border-box;margin-top: 1.5rem;margin-bottom: 1rem;color: rgb(21, 153, 87);line-height: 1.35;font-size: 20px;text-align: start;white-space: normal;font-family: Menlo, Monaco, &quot;Source Code Pro&quot;, Consolas, Inconsolata, &quot;Ubuntu Mono&quot;, &quot;DejaVu Sans Mono&quot;, &quot;Courier New&quot;, &quot;Droid Sans Mono&quot;, &quot;Hiragino Sans GB&quot;, 微软雅黑, monospace !important;\">存在的问题</h3><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">看的仔细的同学可能发现了，在 AuthProcessor 的业务逻辑实现中，除了执行了具体的逻辑代码之外，还调用了一行 super.process(content) 代码，这行代码的作用是调用链表中的下一个节点的 process 方法。但是如果有一天我们在写自己的 Processor 实现类时，忘记调用这行代码的话，会是怎样的结果呢？</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">结果就是当前节点后面的节点不会被调用，整个链表就像断掉一样，那怎样来避免这种问题的发生呢？其实我们在 AbstractProcessor 中已经实现了 process 方法，该方法就是调用下个节点的 process 方法的。那我们在这个方法触发调用下个节点之前，再抽象出一个用以具体的业务逻辑处理的方法 doProcess ，先执行 doProcess 方法，执行完之后再触发下个节点的 process ，这样就不会出现链表断掉的情况了，具体的实现如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585361640.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">相应的 LinkedProcessorChain 和具体的实现类也要做响应的调整，如下图所示：</p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361640.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\"><img class=\"\"     style=\"box-sizing: border-box;border-width: 2px;border-style: solid;border-color: rgb(238, 238, 238);border-radius: 6px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361641.jpg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"box-sizing: border-box;margin-top: 15px;margin-bottom: 15px;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: start;\">重新执行刚刚的测试类，发现结果和之前的一样，至此一个简单的链式责任链完成了。</p><p style=\"white-space: normal;text-align: center;\"><br  /></p><p style=\"white-space: normal;text-align: center;\"><span style=\"color: rgb(61, 167, 66);\">关注「逅弈逐码」</span></p><p style=\"white-space: normal;text-align: center;\"><span style=\"color: rgb(61, 167, 66);\">查看更多原创好文</span></p><p style=\"white-space: normal;text-align: center;\"><img class=\"\"       src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361641.jpeg\" alt=\"用责任链模式设计拦截器\" title=\"用责任链模式设计拦截器\"  /></p><p style=\"white-space: normal;text-align: center;\"><br  /></p><p style=\"margin-top: 15px;margin-bottom: 15px;box-sizing: border-box;white-space: pre-line;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;line-height: normal;\"><span style=\"font-size: 14px;\"><strong>更多推荐内容</strong></span></p><p style=\"margin-top: 10px;margin-bottom: 15px;box-sizing: border-box;white-space: pre-line;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;line-height: normal;\"><span style=\"font-size: 10px;\">↓↓↓</span></p><p style=\"margin-top: 15px;margin-bottom: 15px;box-sizing: border-box;font-size: 16px;white-space: pre-line;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;line-height: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484105&amp;idx=1&amp;sn=0f912707decbc94831f887900ae98fc0&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 12px;\">《Sentinel 原理：控制台是如何获取到实时数据的》</span></a></p><p style=\"margin-top: 15px;margin-bottom: 15px;box-sizing: border-box;font-size: 16px;white-space: pre-line;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;line-height: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484101&amp;idx=1&amp;sn=07cff3892c884dd9075e73dd2ae87dd5&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 12px;\">《Sentinel 实战：搭建集群限流环境》</span></a><br  /></p><p style=\"margin-top: 15px;margin-bottom: 15px;box-sizing: border-box;font-size: 16px;white-space: pre-line;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;line-height: normal;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484110&amp;idx=1&amp;sn=2a3dbfb804f282160e288d9178b2665e&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\"><span style=\"font-size: 12px;\">《Netty 实战：如何编写一个麻小俱全的 Web 容器》</span></a></p><p style=\"margin-top: 15px;margin-bottom: 15px;box-sizing: border-box;font-size: 16px;white-space: pre-line;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;line-height: normal;\"><span style=\"font-size: 12px;\"><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3MTQ2MDgyOQ==&amp;mid=2247484035&amp;idx=1&amp;sn=bbffff2bc37d0030f0a267d33b4437e5&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">《让人欢喜让人忧的正则表达式》</a></span><br  /></p><p style=\"margin-top: 15px;margin-bottom: 15px;box-sizing: border-box;font-size: 16px;white-space: pre-line;line-height: 30px;color: rgb(74, 74, 74);font-family: Avenir, -apple-system-font, 微软雅黑, sans-serif;text-align: center;\"><br  /></p><p><br  /></p> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（逐码）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/gXCog_DxNjpMnYX9IpF6TQ\" rel=\"noopener noreferrer\">用责任链模式设计拦截器</a></p></blockquote></div>', '用责任链模式设计拦截器', '', 'inherit', 'closed', 'closed', '', '123-revision-v1', '', '', '2020-03-28 10:14:02', '2020-03-28 02:14:02', '', 123, 'https://www.javashitang.com/?p=149', 0, 'revision', '', 0);
INSERT INTO `wp_posts` VALUES (150, 1, '2019-11-09 11:17:58', '2020-03-28 02:15:01', '<div class=\"bpp-post-content\">                                                                                                                            <section style=\"font-size: 16px;color: black;padding: 10px;line-height: 1.6;letter-spacing: 0px;word-break: break-word;overflow-wrap: break-word;text-align: left;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;\"><h2 style=\"margin-top: 40px;margin-bottom: 20px;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"display: inline-block;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">引言</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid #efebe9;border-right: 20px solid transparent;\"> </span></h2><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">今天下午，烟哥和同事在厕所里排队等坑的时候(人多坑少)。想象一下一个场景，我正在一边排队，一边拿着手机撩妹。前面一个同事，拿着手机短信转过头来和我聊天。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">于是，我们就开始讨论下面这种短链接的实现原理(没错，上厕所也不忘学习！)。</p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress2-1585361702.png\" alt=\"东半球最接地气的短链接系统设计\" title=\"东半球最接地气的短链接系统设计\"  /></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">点击其中短链接后，我们会跳到如下地址<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">http://h5.dangdang.com/mix_20191015_or4x</code>本文，我们来讨论一下其实现原理！</p><h2 style=\"margin-top: 40px;margin-bottom: 20px;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"display: inline-block;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">正文</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid #efebe9;border-right: 20px solid transparent;\"> </span></h2><h3 style=\"margin-top: 40px;margin-bottom: 20px;font-weight: bold;font-size: 20px;\">需求缘起</h3><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">这里说一下，为什么需要短链接？这个简单，比如大家发微博有字数限制</p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361702.png\" alt=\"东半球最接地气的短链接系统设计\" title=\"东半球最接地气的短链接系统设计\"  /></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">如果 URL 地址过长，显然可以写的关键字就越少!</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">再比如发短信如果短信内容过长，那么一条短信就要拆成两条发，浪费钱!</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">因此采用短链接，不仅节约资源，还十分美观!</p><h3 style=\"margin-top: 40px;margin-bottom: 20px;font-weight: bold;font-size: 20px;\">请求流程</h3><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">首先，我们先看看当当的短链接<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">http://dwz.win/nXR</code></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">它是由两个部分组成</p><ol class=\"list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\"><code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">http://dwz.win</code>:短链接系统的域名地址</p></li><li><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\"><code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">nXR</code>:请求参数</p></li></ol><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">请求<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">http://dwz.win/nXR</code>地址后，返回状态如下所示</p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361702.png\" alt=\"东半球最接地气的短链接系统设计\" title=\"东半球最接地气的短链接系统设计\"  /></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">于是，我们可以推断出，敲下<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">http://dwz.win/nXR</code>地址后，发生了什么呢？</p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\"           style=\"width: 453px;height: 339px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361703.jpeg\" alt=\"东半球最接地气的短链接系统设计\" title=\"东半球最接地气的短链接系统设计\"  /></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">这里渣渣烟就要多嘴一句了。上图所示短链接系统，返回的状态可以为 301 或者 302，只是当当网用的是 301。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">这里我要说一下，大家应该明白<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">30X</code>状态，在 HTTP 协议中，代表的是重定向的状态。那么301和302区别在哪呢，继续往下看。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\"><span style=\"color: rgb(255, 76, 0);\"><em>301 代表什么？</em></span></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">301 代表的是永久重定向。什么意思呢? 对于 GET 请求, 301 跳转会默认被浏览器 cache。也就是说，用户第一次访问某个短链接后，如果服务器返回 301 状态码，则这个用户在后续多次访问同一短链接地址，浏览器会直接请求跳转地址，而不会再去短链接系统上取！</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">这么做优点很明显，降低了服务器压力，但是无法统计到短链接地址的点击次数。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\"><span style=\"color: rgb(255, 76, 0);\"><em>302 代表什么？</em></span></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">302 代表的是临时定向。什么意思呢? 对于 GET 请求, 302 跳转默认不会被浏览器缓存，除非在 HTTP 响应中通过 Cache-Control 或 Expires 暗示浏览器缓存。因此，用户每次访问同一短链接地址，浏览器都会去短链接系统上取。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">这么做的优点是，能够统计到短地址被点击的次数了。但是服务器的压力变大了。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">下面说最关键的一段，怎么将<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">http://h5.dangdang.com/mix_20191015_or4x</code>压缩为<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">nXR</code>字符</p><h3 style=\"margin-top: 40px;margin-bottom: 20px;font-weight: bold;font-size: 20px;\">算法原理</h3><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">首先呢，我们需要一张表来存储，长短链接间的映射关系。表结构如下</p><table><thead><tr style=\"border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;\"><th style=\"border-top-width: 1px;border-color: rgb(204, 204, 204);text-align: left;background-color: rgb(240, 240, 240);\">列名</th><th style=\"border-top-width: 1px;border-color: rgb(204, 204, 204);text-align: left;background-color: rgb(240, 240, 240);\">说明</th></tr></thead><tbody style=\"border-width: 0px;border-style: initial;border-color: initial;\"><tr style=\"border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;\"><td style=\"border-color: rgb(204, 204, 204);\">id</td><td style=\"border-color: rgb(204, 204, 204);\">BIGINT,自增主键</td></tr><tr style=\"border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);\"><td style=\"border-color: rgb(204, 204, 204);\">url</td><td style=\"border-color: rgb(204, 204, 204);\">长地址，也就是需要跳转的原地址</td></tr></tbody></table><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">好的，假设我们此时表里的数据如下</p><table><thead><tr style=\"border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;\"><th style=\"border-top-width: 1px;border-color: rgb(204, 204, 204);text-align: left;background-color: rgb(240, 240, 240);word-break: break-all;\">id</th><th style=\"border-top-width: 1px;border-color: rgb(204, 204, 204);text-align: left;background-color: rgb(240, 240, 240);word-break: break-all;\">url</th></tr></thead><tbody style=\"border-width: 0px;border-style: initial;border-color: initial;\"><tr style=\"border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;\"><td style=\"border-color: rgb(204, 204, 204);\">1</td><td style=\"border-color: rgb(204, 204, 204);\">http://h5.dangdang.com/mix_20191015_or4x</td></tr><tr style=\"border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);\"><td style=\"border-color: rgb(204, 204, 204);\">2</td><td style=\"border-color: rgb(204, 204, 204);\">http://h5.dangdang.com/mix_20191102_ad3x</td></tr></tbody></table><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">我们此时拿自增 id 作为短链接的 key。假设域名<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">http://dwz.win</code>是短链接系统，也就是说请求:&nbsp;</p><ul class=\"list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">(1)<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">http://dwz.win/1</code>会跳转<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">http://h5.dangdang.com/mix_20191015_or4x</code>;</p></li><li><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">(2)<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">http://dwz.win/2</code>会跳转<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">http://h5.dangdang.com/mix_20191102_ad3x</code>;</p></li></ul><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">这么做，也不是不行，有两个缺点你要评估能不能接受！</p><ul style=\"\" class=\"list-paddingleft-2\"><li><section style=\"margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(1, 1, 1);\">(1)如果数据比较大，比如几百亿，你的 url 地址依然过长</section></li><li><section style=\"margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(1, 1, 1);\">(2)你的数据具有规律性，别人用一个简单的脚本就可以遍历出你的跳转地址！</section></li></ul><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">为了解决上面的两个缺点，我们增加一个列，用来存储 key 值。此时表结构如下</p><table><thead><tr style=\"border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;\"><th style=\"border-top-width: 1px;border-color: rgb(204, 204, 204);text-align: left;background-color: rgb(240, 240, 240);\">列名</th><th style=\"border-top-width: 1px;border-color: rgb(204, 204, 204);text-align: left;background-color: rgb(240, 240, 240);\">说明</th></tr></thead><tbody style=\"border-width: 0px;border-style: initial;border-color: initial;\"><tr style=\"border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;\"><td style=\"border-color: rgb(204, 204, 204);\">id</td><td style=\"border-color: rgb(204, 204, 204);\">BIGINT,自增主键</td></tr><tr style=\"border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);\"><td style=\"border-color: rgb(204, 204, 204);\">key</td><td style=\"border-color: rgb(204, 204, 204);\">短串，需要加唯一索引</td></tr><tr style=\"border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;\"><td style=\"border-color: rgb(204, 204, 204);\">url</td><td style=\"border-color: rgb(204, 204, 204);\">长地址，也就是需要跳转的原地址</td></tr></tbody></table><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">我们为了缩短 id 的长度呢，一般可以这么做。由于我们的短链接是由 a-z、A-Z 和 0-9 共 62 个字符可以选择。因此，我们可以将十进制的数字 id，转换为一个 62 进制的数，例如 201314 就可以转换为 Qn0。算法如下</p><section class=\"code-snippet__fix code-snippet__js\"><ul class=\"code-snippet__line-index code-snippet__js\"><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul><pre class=\"code-snippet__js\" ><code style=\"border-radius: 0px;white-space: pre;font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;display: -webkit-box !important;\"><span class=\"code-snippet_outer\" style=\"line-height: 26px;\">private static final String BASE = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";</span></code><code style=\"border-radius: 0px;white-space: pre;font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;display: -webkit-box !important;\"><span class=\"code-snippet_outer\"><br  /></span></code><code style=\"border-radius: 0px;white-space: pre;font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;display: -webkit-box !important;\"><span class=\"code-snippet_outer\" style=\"line-height: 26px;\">public static String toBase62(long num) {</span></code><code style=\"border-radius: 0px;white-space: pre;font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;display: -webkit-box !important;\"><span class=\"code-snippet_outer\" style=\"line-height: 26px;\">    StringBuilder sb = new StringBuilder();</span></code><code style=\"border-radius: 0px;white-space: pre;font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;display: -webkit-box !important;\"><span class=\"code-snippet_outer\" style=\"line-height: 26px;\">    do {</span></code><code style=\"border-radius: 0px;white-space: pre;font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;display: -webkit-box !important;\"><span class=\"code-snippet_outer\" style=\"line-height: 26px;\">        int i = (int) (num % 62);</span></code><code style=\"border-radius: 0px;white-space: pre;font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;display: -webkit-box !important;\"><span class=\"code-snippet_outer\" style=\"line-height: 26px;\">        sb.append(BASE.charAt(i));</span></code><code style=\"border-radius: 0px;white-space: pre;font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;display: -webkit-box !important;\"><span class=\"code-snippet_outer\" style=\"line-height: 26px;\">        num /= 62;</span></code><code style=\"border-radius: 0px;white-space: pre;font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;display: -webkit-box !important;\"><span class=\"code-snippet_outer\" style=\"line-height: 26px;\">    } while (num &gt; 0);</span></code><code style=\"border-radius: 0px;white-space: pre;font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;display: -webkit-box !important;\"><span class=\"code-snippet_outer\"><br  /></span></code><code style=\"border-radius: 0px;white-space: pre;font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;display: -webkit-box !important;\"><span class=\"code-snippet_outer\" style=\"line-height: 26px;\">    return sb.reverse().toString();</span></code><code style=\"border-radius: 0px;white-space: pre;font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;display: -webkit-box !important;\"><span class=\"code-snippet_outer\" style=\"line-height: 26px;\">}</span></code></pre></section><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">另外，我们需要引入一个全局发号器，一直返回全局自增的 ID。相当于，我们的短链接系统先去请求这个全局自增 ID，然后将全局自增 ID 转换为 62 进制的数，作为 key。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">接下来，解决第二个问题！数据具有规律性的问题。毕竟你转换为 62 进制后，只是解决了数据过长的问题，数据规律性问题还是没解决。因此，我们需要引入一个随机算法。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">那么此时，你的考虑点在于，你是否要根据 key 值，反推出全局 id 值！来抉择不同的随机算法！</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\"><span style=\"color: rgb(172, 57, 255);\">(1)不希望反推出全局 ID&nbsp;</span></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">OK，那就用一个洗牌算法，打乱算出的值。比如十进制的 201314 就可以转换为 Qn0。然后再使用洗牌算法，可以返回 n0Q、Q0n....其中之一。但是会有一定几率冲突，多洗几次就行。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\"><span style=\"color: rgb(172, 57, 255);\">(2)希望反推出全局 ID&nbsp;</span></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">OK，那就在得到 Qn0 这个数字后，将其转换为二进制数。然后在固定位，第五位，第十位...(等等)插入一个随机值即可。至于如何反推也很简单，你拿到短链接 key 后，将固定位的数字去除，再转换为十进制即可。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">讲到这里，就基本将 key 如何生成的逻辑讲清楚了。那么用户在点击短链接的时候，例如地址<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">http://dwz.win/nXR</code>，短链接系统解析出 key 为 nXR，根据唯一索引去表中将 nXR 对应的 url 返回即可。</p><h3 style=\"margin-top: 40px;margin-bottom: 20px;font-weight: bold;font-size: 20px;\">细节优化</h3><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\"><span style=\"color: rgb(172, 57, 255);\">(1)分库分表&nbsp;</span></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">如果这个系统是放在公网，给大家使用的。建议上来就分库分表，数据量过 1000 万是很容易的。这里涉及到一个问题，拿全局发号器给的自增 id 做分片健，还是拿转换后的 key 做分片键。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">显然，用转换后的 key 做分片键会更容易一些。如果用 ID 做为分片键，存在两个问题！</p><ol class=\"list-paddingleft-2\" style=\"list-style-type: lower-roman;\"><li><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">用户请求的 key，需要做一个逆运算推算回 ID，然后根据 ID，再去对应表里去找，增加响应时间。</p></li><li><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">根据选择的随机算法不同，key 不一定能够推算回 ID 值。这种情况下，只能每张表去查，更慢。</p></li></ol><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">所以用 key 做分片键，再适合不过了。拿到用户请求的 KEY 后，直接定位到对应的表里将 url 取出即可。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\"><span style=\"color: rgb(172, 57, 255);\">(2)读写分离&nbsp;</span></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">这种系统显然，读远大于写。建议可以考虑做读写分离。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\"><span style=\"color: rgb(172, 57, 255);\">(3)引入缓存</span>&nbsp;</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">假设，我们在一个时间，给手机推送短信链接的短信后。显然，后面的一段时间内，对该短链接的请求量会大大提升。没有必要每次都去数据库查询，因此可以引入 redis 缓存。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\"><span style=\"color: rgb(172, 57, 255);\">(4)全局发号器</span></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">用其他算法行不行 ？可以。这里只是要一个全局唯一 ID 而已。自己要估算好，使用其他算法所带来的性能影响。以及采用其他算法，会不会造成生成的生成的 ID 过于规律。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\"><span style=\"color: rgb(172, 57, 255);\">(5)防攻击&nbsp;</span></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">做好被恶意攻击的准备，防止自增 ID 的值，被全部耗光。</p><h2 style=\"margin-top: 40px;margin-bottom: 20px;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"display: inline-block;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">总结</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid #efebe9;border-right: 20px solid transparent;\"> </span></h2><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">好久没写这种设计型的文章了。毕竟是我和同事在厕所蹲坑排队之余，在那闲聊出来的。最后，由于烟哥过于专注和同事聊技术，导致后来我回复那个妹纸的时候已经没有了下文，注孤生！</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">希望大家有所收获！</p></section><p><br  /></p> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（孤独烟）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/80uVWV1Lh_iOOdykzMhyeQ\" rel=\"noopener noreferrer\">东半球最接地气的短链接系统设计</a></p></blockquote></div>', '东半球最接地气的短链接系统设计', '', 'publish', 'open', 'open', '', '48503d392a', '', '', '2020-03-28 10:15:03', '2020-03-28 02:15:03', '', 0, 'https://www.javashitang.com/?p=150', 0, 'post', '', 0);
INSERT INTO `wp_posts` VALUES (151, 1, '2020-03-28 10:15:01', '2020-03-28 02:15:01', '', 'beepress6-1585361701', '', 'inherit', 'open', 'closed', '', 'beepress6-1585361701', '', '', '2020-03-28 10:15:01', '2020-03-28 02:15:01', '', 150, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress6-1585361701.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (152, 1, '2020-03-28 10:15:02', '2020-03-28 02:15:02', '', 'beepress2-1585361702', '', 'inherit', 'open', 'closed', '', 'beepress2-1585361702', '', '', '2020-03-28 10:15:02', '2020-03-28 02:15:02', '', 150, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress2-1585361702.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (153, 1, '2020-03-28 10:15:02', '2020-03-28 02:15:02', '', 'beepress9-1585361702', '', 'inherit', 'open', 'closed', '', 'beepress9-1585361702', '', '', '2020-03-28 10:15:02', '2020-03-28 02:15:02', '', 150, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361702.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (154, 1, '2020-03-28 10:15:02', '2020-03-28 02:15:02', '', 'beepress10-1585361702', '', 'inherit', 'open', 'closed', '', 'beepress10-1585361702', '', '', '2020-03-28 10:15:02', '2020-03-28 02:15:02', '', 150, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361702.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (155, 1, '2020-03-28 10:15:03', '2020-03-28 02:15:03', '', 'beepress9-1585361703', '', 'inherit', 'open', 'closed', '', 'beepress9-1585361703', '', '', '2020-03-28 10:15:03', '2020-03-28 02:15:03', '', 150, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361703.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (156, 1, '2020-03-28 10:15:03', '2020-03-28 02:15:03', '<div class=\"bpp-post-content\">                                                                                                                            <section style=\"font-size: 16px;color: black;padding: 10px;line-height: 1.6;letter-spacing: 0px;word-break: break-word;overflow-wrap: break-word;text-align: left;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;\"><h2 style=\"margin-top: 40px;margin-bottom: 20px;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"display: inline-block;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">引言</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid #efebe9;border-right: 20px solid transparent;\"> </span></h2><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">今天下午，烟哥和同事在厕所里排队等坑的时候(人多坑少)。想象一下一个场景，我正在一边排队，一边拿着手机撩妹。前面一个同事，拿着手机短信转过头来和我聊天。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">于是，我们就开始讨论下面这种短链接的实现原理(没错，上厕所也不忘学习！)。</p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress2-1585361702.png\" alt=\"东半球最接地气的短链接系统设计\" title=\"东半球最接地气的短链接系统设计\"  /></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">点击其中短链接后，我们会跳到如下地址<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">http://h5.dangdang.com/mix_20191015_or4x</code>本文，我们来讨论一下其实现原理！</p><h2 style=\"margin-top: 40px;margin-bottom: 20px;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"display: inline-block;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">正文</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid #efebe9;border-right: 20px solid transparent;\"> </span></h2><h3 style=\"margin-top: 40px;margin-bottom: 20px;font-weight: bold;font-size: 20px;\">需求缘起</h3><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">这里说一下，为什么需要短链接？这个简单，比如大家发微博有字数限制</p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361702.png\" alt=\"东半球最接地气的短链接系统设计\" title=\"东半球最接地气的短链接系统设计\"  /></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">如果 URL 地址过长，显然可以写的关键字就越少!</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">再比如发短信如果短信内容过长，那么一条短信就要拆成两条发，浪费钱!</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">因此采用短链接，不仅节约资源，还十分美观!</p><h3 style=\"margin-top: 40px;margin-bottom: 20px;font-weight: bold;font-size: 20px;\">请求流程</h3><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">首先，我们先看看当当的短链接<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">http://dwz.win/nXR</code></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">它是由两个部分组成</p><ol class=\"list-paddingleft-2\" style=\"list-style-type: decimal;\"><li><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\"><code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">http://dwz.win</code>:短链接系统的域名地址</p></li><li><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\"><code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">nXR</code>:请求参数</p></li></ol><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">请求<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">http://dwz.win/nXR</code>地址后，返回状态如下所示</p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361702.png\" alt=\"东半球最接地气的短链接系统设计\" title=\"东半球最接地气的短链接系统设计\"  /></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">于是，我们可以推断出，敲下<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">http://dwz.win/nXR</code>地址后，发生了什么呢？</p><p style=\"text-align: center;\"><img class=\"rich_pages js_insertlocalimg\"           style=\"width: 453px;height: 339px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361703.jpeg\" alt=\"东半球最接地气的短链接系统设计\" title=\"东半球最接地气的短链接系统设计\"  /></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">这里渣渣烟就要多嘴一句了。上图所示短链接系统，返回的状态可以为 301 或者 302，只是当当网用的是 301。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">这里我要说一下，大家应该明白<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">30X</code>状态，在 HTTP 协议中，代表的是重定向的状态。那么301和302区别在哪呢，继续往下看。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\"><span style=\"color: rgb(255, 76, 0);\"><em>301 代表什么？</em></span></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">301 代表的是永久重定向。什么意思呢? 对于 GET 请求, 301 跳转会默认被浏览器 cache。也就是说，用户第一次访问某个短链接后，如果服务器返回 301 状态码，则这个用户在后续多次访问同一短链接地址，浏览器会直接请求跳转地址，而不会再去短链接系统上取！</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">这么做优点很明显，降低了服务器压力，但是无法统计到短链接地址的点击次数。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\"><span style=\"color: rgb(255, 76, 0);\"><em>302 代表什么？</em></span></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">302 代表的是临时定向。什么意思呢? 对于 GET 请求, 302 跳转默认不会被浏览器缓存，除非在 HTTP 响应中通过 Cache-Control 或 Expires 暗示浏览器缓存。因此，用户每次访问同一短链接地址，浏览器都会去短链接系统上取。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">这么做的优点是，能够统计到短地址被点击的次数了。但是服务器的压力变大了。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">下面说最关键的一段，怎么将<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">http://h5.dangdang.com/mix_20191015_or4x</code>压缩为<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">nXR</code>字符</p><h3 style=\"margin-top: 40px;margin-bottom: 20px;font-weight: bold;font-size: 20px;\">算法原理</h3><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">首先呢，我们需要一张表来存储，长短链接间的映射关系。表结构如下</p><table><thead><tr style=\"border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;\"><th style=\"border-top-width: 1px;border-color: rgb(204, 204, 204);text-align: left;background-color: rgb(240, 240, 240);\">列名</th><th style=\"border-top-width: 1px;border-color: rgb(204, 204, 204);text-align: left;background-color: rgb(240, 240, 240);\">说明</th></tr></thead><tbody style=\"border-width: 0px;border-style: initial;border-color: initial;\"><tr style=\"border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;\"><td style=\"border-color: rgb(204, 204, 204);\">id</td><td style=\"border-color: rgb(204, 204, 204);\">BIGINT,自增主键</td></tr><tr style=\"border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);\"><td style=\"border-color: rgb(204, 204, 204);\">url</td><td style=\"border-color: rgb(204, 204, 204);\">长地址，也就是需要跳转的原地址</td></tr></tbody></table><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">好的，假设我们此时表里的数据如下</p><table><thead><tr style=\"border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;\"><th style=\"border-top-width: 1px;border-color: rgb(204, 204, 204);text-align: left;background-color: rgb(240, 240, 240);word-break: break-all;\">id</th><th style=\"border-top-width: 1px;border-color: rgb(204, 204, 204);text-align: left;background-color: rgb(240, 240, 240);word-break: break-all;\">url</th></tr></thead><tbody style=\"border-width: 0px;border-style: initial;border-color: initial;\"><tr style=\"border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;\"><td style=\"border-color: rgb(204, 204, 204);\">1</td><td style=\"border-color: rgb(204, 204, 204);\">http://h5.dangdang.com/mix_20191015_or4x</td></tr><tr style=\"border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);\"><td style=\"border-color: rgb(204, 204, 204);\">2</td><td style=\"border-color: rgb(204, 204, 204);\">http://h5.dangdang.com/mix_20191102_ad3x</td></tr></tbody></table><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">我们此时拿自增 id 作为短链接的 key。假设域名<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">http://dwz.win</code>是短链接系统，也就是说请求:&nbsp;</p><ul class=\"list-paddingleft-2\" style=\"list-style-type: disc;\"><li><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">(1)<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">http://dwz.win/1</code>会跳转<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">http://h5.dangdang.com/mix_20191015_or4x</code>;</p></li><li><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">(2)<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">http://dwz.win/2</code>会跳转<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">http://h5.dangdang.com/mix_20191102_ad3x</code>;</p></li></ul><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">这么做，也不是不行，有两个缺点你要评估能不能接受！</p><ul style=\"\" class=\"list-paddingleft-2\"><li><section style=\"margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(1, 1, 1);\">(1)如果数据比较大，比如几百亿，你的 url 地址依然过长</section></li><li><section style=\"margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(1, 1, 1);\">(2)你的数据具有规律性，别人用一个简单的脚本就可以遍历出你的跳转地址！</section></li></ul><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">为了解决上面的两个缺点，我们增加一个列，用来存储 key 值。此时表结构如下</p><table><thead><tr style=\"border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;\"><th style=\"border-top-width: 1px;border-color: rgb(204, 204, 204);text-align: left;background-color: rgb(240, 240, 240);\">列名</th><th style=\"border-top-width: 1px;border-color: rgb(204, 204, 204);text-align: left;background-color: rgb(240, 240, 240);\">说明</th></tr></thead><tbody style=\"border-width: 0px;border-style: initial;border-color: initial;\"><tr style=\"border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;\"><td style=\"border-color: rgb(204, 204, 204);\">id</td><td style=\"border-color: rgb(204, 204, 204);\">BIGINT,自增主键</td></tr><tr style=\"border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);\"><td style=\"border-color: rgb(204, 204, 204);\">key</td><td style=\"border-color: rgb(204, 204, 204);\">短串，需要加唯一索引</td></tr><tr style=\"border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;\"><td style=\"border-color: rgb(204, 204, 204);\">url</td><td style=\"border-color: rgb(204, 204, 204);\">长地址，也就是需要跳转的原地址</td></tr></tbody></table><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">我们为了缩短 id 的长度呢，一般可以这么做。由于我们的短链接是由 a-z、A-Z 和 0-9 共 62 个字符可以选择。因此，我们可以将十进制的数字 id，转换为一个 62 进制的数，例如 201314 就可以转换为 Qn0。算法如下</p><section class=\"code-snippet__fix code-snippet__js\"><ul class=\"code-snippet__line-index code-snippet__js\"><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li><li></li></ul><pre class=\"code-snippet__js\" ><code style=\"border-radius: 0px;white-space: pre;font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;display: -webkit-box !important;\"><span class=\"code-snippet_outer\" style=\"line-height: 26px;\">private static final String BASE = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";</span></code><code style=\"border-radius: 0px;white-space: pre;font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;display: -webkit-box !important;\"><span class=\"code-snippet_outer\"><br  /></span></code><code style=\"border-radius: 0px;white-space: pre;font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;display: -webkit-box !important;\"><span class=\"code-snippet_outer\" style=\"line-height: 26px;\">public static String toBase62(long num) {</span></code><code style=\"border-radius: 0px;white-space: pre;font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;display: -webkit-box !important;\"><span class=\"code-snippet_outer\" style=\"line-height: 26px;\">    StringBuilder sb = new StringBuilder();</span></code><code style=\"border-radius: 0px;white-space: pre;font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;display: -webkit-box !important;\"><span class=\"code-snippet_outer\" style=\"line-height: 26px;\">    do {</span></code><code style=\"border-radius: 0px;white-space: pre;font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;display: -webkit-box !important;\"><span class=\"code-snippet_outer\" style=\"line-height: 26px;\">        int i = (int) (num % 62);</span></code><code style=\"border-radius: 0px;white-space: pre;font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;display: -webkit-box !important;\"><span class=\"code-snippet_outer\" style=\"line-height: 26px;\">        sb.append(BASE.charAt(i));</span></code><code style=\"border-radius: 0px;white-space: pre;font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;display: -webkit-box !important;\"><span class=\"code-snippet_outer\" style=\"line-height: 26px;\">        num /= 62;</span></code><code style=\"border-radius: 0px;white-space: pre;font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;display: -webkit-box !important;\"><span class=\"code-snippet_outer\" style=\"line-height: 26px;\">    } while (num &gt; 0);</span></code><code style=\"border-radius: 0px;white-space: pre;font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;display: -webkit-box !important;\"><span class=\"code-snippet_outer\"><br  /></span></code><code style=\"border-radius: 0px;white-space: pre;font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;display: -webkit-box !important;\"><span class=\"code-snippet_outer\" style=\"line-height: 26px;\">    return sb.reverse().toString();</span></code><code style=\"border-radius: 0px;white-space: pre;font-family: Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace;display: -webkit-box !important;\"><span class=\"code-snippet_outer\" style=\"line-height: 26px;\">}</span></code></pre></section><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">另外，我们需要引入一个全局发号器，一直返回全局自增的 ID。相当于，我们的短链接系统先去请求这个全局自增 ID，然后将全局自增 ID 转换为 62 进制的数，作为 key。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">接下来，解决第二个问题！数据具有规律性的问题。毕竟你转换为 62 进制后，只是解决了数据过长的问题，数据规律性问题还是没解决。因此，我们需要引入一个随机算法。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">那么此时，你的考虑点在于，你是否要根据 key 值，反推出全局 id 值！来抉择不同的随机算法！</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\"><span style=\"color: rgb(172, 57, 255);\">(1)不希望反推出全局 ID&nbsp;</span></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">OK，那就用一个洗牌算法，打乱算出的值。比如十进制的 201314 就可以转换为 Qn0。然后再使用洗牌算法，可以返回 n0Q、Q0n....其中之一。但是会有一定几率冲突，多洗几次就行。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\"><span style=\"color: rgb(172, 57, 255);\">(2)希望反推出全局 ID&nbsp;</span></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">OK，那就在得到 Qn0 这个数字后，将其转换为二进制数。然后在固定位，第五位，第十位...(等等)插入一个随机值即可。至于如何反推也很简单，你拿到短链接 key 后，将固定位的数字去除，再转换为十进制即可。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">讲到这里，就基本将 key 如何生成的逻辑讲清楚了。那么用户在点击短链接的时候，例如地址<code style=\"font-size: 14px;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(239, 112, 96);\">http://dwz.win/nXR</code>，短链接系统解析出 key 为 nXR，根据唯一索引去表中将 nXR 对应的 url 返回即可。</p><h3 style=\"margin-top: 40px;margin-bottom: 20px;font-weight: bold;font-size: 20px;\">细节优化</h3><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\"><span style=\"color: rgb(172, 57, 255);\">(1)分库分表&nbsp;</span></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">如果这个系统是放在公网，给大家使用的。建议上来就分库分表，数据量过 1000 万是很容易的。这里涉及到一个问题，拿全局发号器给的自增 id 做分片健，还是拿转换后的 key 做分片键。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">显然，用转换后的 key 做分片键会更容易一些。如果用 ID 做为分片键，存在两个问题！</p><ol class=\"list-paddingleft-2\" style=\"list-style-type: lower-roman;\"><li><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">用户请求的 key，需要做一个逆运算推算回 ID，然后根据 ID，再去对应表里去找，增加响应时间。</p></li><li><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">根据选择的随机算法不同，key 不一定能够推算回 ID 值。这种情况下，只能每张表去查，更慢。</p></li></ol><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">所以用 key 做分片键，再适合不过了。拿到用户请求的 KEY 后，直接定位到对应的表里将 url 取出即可。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\"><span style=\"color: rgb(172, 57, 255);\">(2)读写分离&nbsp;</span></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">这种系统显然，读远大于写。建议可以考虑做读写分离。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\"><span style=\"color: rgb(172, 57, 255);\">(3)引入缓存</span>&nbsp;</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">假设，我们在一个时间，给手机推送短信链接的短信后。显然，后面的一段时间内，对该短链接的请求量会大大提升。没有必要每次都去数据库查询，因此可以引入 redis 缓存。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\"><span style=\"color: rgb(172, 57, 255);\">(4)全局发号器</span></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">用其他算法行不行 ？可以。这里只是要一个全局唯一 ID 而已。自己要估算好，使用其他算法所带来的性能影响。以及采用其他算法，会不会造成生成的生成的 ID 过于规律。</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\"><span style=\"color: rgb(172, 57, 255);\">(5)防攻击&nbsp;</span></p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">做好被恶意攻击的准备，防止自增 ID 的值，被全部耗光。</p><h2 style=\"margin-top: 40px;margin-bottom: 20px;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"display: inline-block;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">总结</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid #efebe9;border-right: 20px solid transparent;\"> </span></h2><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">好久没写这种设计型的文章了。毕竟是我和同事在厕所蹲坑排队之余，在那闲聊出来的。最后，由于烟哥过于专注和同事聊技术，导致后来我回复那个妹纸的时候已经没有了下文，注孤生！</p><p style=\"padding-top: 8px;padding-bottom: 8px;line-height: 26px;\">希望大家有所收获！</p></section><p><br  /></p> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（孤独烟）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/80uVWV1Lh_iOOdykzMhyeQ\" rel=\"noopener noreferrer\">东半球最接地气的短链接系统设计</a></p></blockquote></div>', '东半球最接地气的短链接系统设计', '', 'inherit', 'closed', 'closed', '', '150-revision-v1', '', '', '2020-03-28 10:15:03', '2020-03-28 02:15:03', '', 150, 'https://www.javashitang.com/?p=156', 0, 'revision', '', 0);
INSERT INTO `wp_posts` VALUES (157, 1, '2019-10-17 14:12:05', '2020-03-28 02:16:35', '<div class=\"bpp-post-content\">                                                                                                                            <section class=\"output_wrapper\" style=\"font-size: 15px;color: rgb(62, 62, 62);line-height: 1.8;word-spacing: 2px;letter-spacing: 2px;font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\"><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">引言</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">大家好，我渣渣烟。我曾经写过一篇<a href=\"http://mp.weixin.qq.com/s?__biz=MzIwMDgzMjc3NA==&amp;mid=2247484617&amp;idx=1&amp;sn=afddfe5c3d66a9fcaba65516a0ab5d18&amp;chksm=96f666a0a181efb60f2109714cf34f4bc68e424ed364d15375284b23f81259e8181c60f7ad10&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">《面试官:讲讲mysql表设计要注意啥》</a>，当时写完后，似乎效果还行！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">于是呢，决定再来一个mysql的数据库专题，这篇我们就来谈谈关于索引方面的mysql面试题。还是老规矩，讲的是在Innodb存储引擎下的情形，毕竟我还真没用过Mysiam之类的存储引擎。<br  /><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">ps</code>:其实很早就想写了，一直偷懒!</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">其实这下面每个问题，我都可以讲一篇文章出来！而且这些问题，不是我凭空编的。如下图所示(<span style=\"color: rgb(255, 0, 0);\"><strong>注意看第三题</strong></span>)</p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361795.jpeg\" alt=\"面试官:谈谈你对mysql索引的认识？\" title=\"面试官:谈谈你对mysql索引的认识？\"  /></p>所以我回忆了一下，索引常见考点有哪些，总结成了这篇文章！<br  />主要题目有下面这些<ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(1)你一般怎么建索引的？</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(2)讲讲索引的分类？你知道哪些？</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(3)如何避免回表查询?什么是索引覆盖?</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(4)现在我有一个列，里头的数据都是唯一的，需要建一个索引，选唯一索引还是普通索引？</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(5)mysql索引是什么结构的？用红黑树可以么？</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(6)mysql某表建了多个单索引，查询多个条件时如何走索引的？</span></p></li></ul><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">正文</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">1、你一般怎么建索引的？</em><br  /><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">烟哥注:</code>曾记得有一个粉丝来找我的时候，出现如下搞笑一幕</p><blockquote style=\"line-height: inherit;padding: 15px 15px 15px 1rem;font-size: 0.9em;color: rgb(0, 0, 0);border-left-width: 5px;border-left-color: rgb(239, 112, 96);background: rgb(239, 235, 233);overflow: auto;overflow-wrap: normal;word-break: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;\"><span style=\"color: rgb(255, 104, 39);\"><strong>渣渣烟:\"你这个简历上写了拥有SQL优化经验，你怎么建索引的？</strong></span><span style=\"color: rgb(255, 104, 39);\"><strong>\"</strong></span><br  /><span style=\"color: rgb(255, 104, 39);\"><strong>只见该粉丝嘿嘿一笑..说道:\"就那样建啊…\"</strong></span><br  /><span style=\"color: rgb(255, 104, 39);\"><strong>渣渣烟:\"噢(第二声)，就哪样建啊…\"</strong></span><br  /><span style=\"color: rgb(255, 104, 39);\"><strong>粉丝:\"…就网上说的那些索引规则啊\"</strong></span><br  /><span style=\"color: rgb(255, 104, 39);\"><strong>渣渣烟:\"那你怎么知道那些SQL出问题，需要建索引呢？</strong></span><span style=\"color: rgb(255, 104, 39);\"><strong>\"</strong></span><br  /><span style=\"color: rgb(255, 104, 39);\"><strong>粉丝:\"我…..\"</strong></span><br  /></p></blockquote><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">嗯，这道题其实很基础。但是有没有做过，这题是可以看出来的。<br  />去my.cnf里配置三个配置</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code class=\"hljs makefile\" style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;padding: 0.5em;background: rgb(30, 30, 30);color: rgb(220, 220, 220);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\">打开慢查询日志<br  />slow_query_log=1<br  />慢查询日志存储路径<br  />slow_query_log_file=/var/log/mysql/log-slow-queries.log<br  />SQL执行时间大于3秒，则记录日志<br  />long_query_time=3<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">监控到慢SQL后，就马上开始建索引?<br  />NO,NO,NO….这种时候，应该先考虑你的SQL能不能进行SQL优化。<br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">例如，当只要一行数据时使用 limit 1</strong><br  />查询时如果已知会得到一条数据，这种情况下加上 limit 1 会增加性能。因为 mysql 数据库引擎会在找到一条结果停止搜索，而不是继续查询下一条是否符合标准直到所有记录查询完毕。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">然而大多数情况下，业务SQL十分复杂，没法优化。所以就要建立索引了。这个时候，参照如下规则建立索引</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(1)索引并非越多越好，大量的索引不仅占用磁盘空间，而且还会影响insert,delete,update等语句的性能</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(2)避免对经常更新的表做更多的索引，并且索引中的列尽可能少；对经常用于查询的字段创建索引，避免添加不必要的索引</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(3)数据量少的表尽量不要使用索引，由于数据较少，查询花费的时间可能比遍历索引的时间还要短，索引可能不会产生优化效果</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(4)在条件表达式中经常用到不同值较多的列上创建索引，在不同值很少的列上不要建立索引。比如性别字段只有“男”“女”俩个值，就无需建立索引。如果建立了索引不但不会提升效率，反而严重减低数据的更新速度</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(5)在频繁进行排序或者分组的列上建立索引，如果排序的列有多个，可以在这些列上建立联合索引。</span></p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">2、讲讲索引的分类？你知道哪些？</em><br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">从物理存储角度:</strong><br  /> &nbsp;聚簇索引和非聚簇索引<br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">从数据结构角度:</strong><br  /> &nbsp;B+树索引、hash索引、FULLTEXT索引、R-Tree索引<br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">从逻辑角度:</strong></p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">主键索引：主键索引是一种特殊的唯一索引，不允许有空值</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">普通索引或者单列索引</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">多列索引（复合索引）：复合索引指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。使用复合索引时遵循最左前缀集合</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">唯一索引或者非唯一索引</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">空间索引：空间索引是对空间数据类型的字段建立的索引，MYSQL中的空间数据类型有4种，分别是GEOMETRY、POINT、LINESTRING、POLYGON。</span></p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">3、如何避免回表查询?什么是索引覆盖?</em><br  />这个问题，如果要看详细版，请参阅文章<a href=\"http://mp.weixin.qq.com/s?__biz=MzIwMDgzMjc3NA==&amp;mid=2247484040&amp;idx=1&amp;sn=5918c27351f366a777484b440aeeaa22&amp;chksm=96f660e1a181e9f7e9dc6f6b0570352c20650c9de51ffbd236e0d71d4edaf99805334361ac72&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">《Innodb中索引的原理》</a></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这里简单说一下。<br  />当能通过读取索引就可以得到想要的数据，那就不需要回表读取行了。一个索引包含了（或覆盖了）满足查询结果的数据就叫做索引覆盖。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">例如此时有一张表<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">table1</code>,有一个联合索引(a,b)</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">执行如下SQL</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code class=\"hljs cs\" style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;padding: 0.5em;background: rgb(30, 30, 30);color: rgb(220, 220, 220);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(86, 156, 214);overflow-wrap: inherit !important;word-break: inherit !important;\">select</span>&nbsp;a,b&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(86, 156, 214);overflow-wrap: inherit !important;word-break: inherit !important;\">from</span>&nbsp;table1<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">在索引上就能找到结果，就不用回表去查询！<br  />而你执行的是</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code class=\"hljs cs\" style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;padding: 0.5em;background: rgb(30, 30, 30);color: rgb(220, 220, 220);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(86, 156, 214);overflow-wrap: inherit !important;word-break: inherit !important;\">select</span>&nbsp;a,b,c&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(86, 156, 214);overflow-wrap: inherit !important;word-break: inherit !important;\">from</span>&nbsp;table2<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">c列在索引上不存在，就需要回表查询。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">需要说明的是覆盖索引必须要存储索引列的值，而哈希索引、空间索引和全文索引不存储索引列的值，所以mysql只能用B+ tree索引做覆盖索引。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">4、现在我有一个列，里头的数据都是唯一的，需要建一个索引，选唯一索引还是普通索引？</em><br  />答唯一索引！<br  />首先，在孤尽出的《阿里巴巴JAVA开发规范》中有这么一段话</p><blockquote style=\"line-height: inherit;padding: 15px 15px 15px 1rem;font-size: 0.9em;color: rgb(0, 0, 0);border-left-width: 5px;border-left-color: rgb(239, 112, 96);background: rgb(239, 235, 233);overflow: auto;overflow-wrap: normal;word-break: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;\"><span style=\"color: rgb(255, 104, 39);\"><strong><span style=\"font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, Sathu, EucrosiaUPC, Arial, Helvetica, sans-serif;font-size: 14px;text-align: start;background-color: rgba(0, 173, 95, 0.06);\">【强制】业务上具有唯一特性的字段，即使是多个字段的组合，也必须建成唯一索引</span></strong></span></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;\"><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">说明：不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的；另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。</strong></p></blockquote><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">那好，下一问出现了！<br  /><span style=\"color: rgb(255, 104, 39);\"><em>为什么唯一索引的插入速度比不上普通索引？</em></span><span style=\"color: rgb(255, 104, 39);\"><em>为什么唯一索引的查找速度比普通索引快？</em></span><br  />这个问题就要从Insert Buffer开始讲起了，在进行非聚簇索引的插入时，先判断插入的索引页是否在内存中。如果在，则直接插入；如果不在，则先放入Insert Buffer 中，然后再以一定频率和情况进行Insert Buffer和原数据页合并(merge)操作。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这么做的优点:能将多个插入合并到一个操作中，就大大提高了非聚簇索引的插入性能。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">InnoDB 从 1.0.x 版本开始引入了 Change Buffer，可以算是对 Insert Buffer 的升级。从这个版本开始，InnoDB 存储引擎可以对 insert、delete、update 都进行缓存。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">唯一速度的<strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">插入</strong>比普通索引慢的原因就是:</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">唯一索引无法利用Change Buffer</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">普通索引可以利用Change Buffer</span></p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">于是乎下一问又来了！<br  /><em><span style=\"color: rgb(255, 104, 39);\">为什么唯一索引的更新不使用 Change Buffer？</span></em><br  />因为唯一索引为了保证唯一性，需要将数据页加载进内存才能判断是否违反唯一性约束。但是，既然数据页都加载到内存了，还不如直接更新内存中的数据页，没有必要再使用Change Buffer。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">最后回答一下，唯一索引的<strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">搜索速度</strong>比普通索引快的原因就是:</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">普通索引在找到满足条件的第一条记录后，还需要判断下一条记录，直到第一个不满足条件的记录出现。</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">唯一索引在找到满足条件的第一条记录后，直接返回，不用判断下一条记录了。</span></p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">5、mysql索引是什么结构的？用红黑树可以么?</em><br  />这个妥妥答最常见的B+ Tree。<br  />AVL树和红黑树基本都是存储在内存中才会使用的数据结构。在大规模数据数据存储的时候，显然不能将全部数据全部加载进内存，因此如果采用红黑树，就会造成频繁IO，效率低下。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">那为啥不用B Tree,而选择B+ tree呢？<br  />这就需要贴一下经典的两张图。B tree是长下面这样的<span style=\"color: rgb(153, 153, 153);font-size: 0.7em;text-align: center;\"></span></p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361795.jpg\" alt=\"面试官:谈谈你对mysql索引的认识？\" title=\"面试官:谈谈你对mysql索引的认识？\"  /></p><br  />注意一下B tree的两个明显特点<ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">树内存储数据</span></p></li><li><p>叶子节点上无链表</p><p><br  /></p><p><br  /></p></li></ul><p>而B+ tree长下面这样的<br  /></p><p style=\"text-align: center;\"><img class=\"rich_pages\"           style=\"width: 573px;height: 220px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361796.jpeg\" alt=\"面试官:谈谈你对mysql索引的认识？\" title=\"面试官:谈谈你对mysql索引的认识？\"  /></p><p>注意一下B+ tree的两个明显特点</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">数据只出现在叶子节点</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">所有叶子节点增加了一个链指针</span></p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"color: rgb(255, 104, 39);\">接下来就可以开始编了～～</span>比如数据库索引采用<span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">B</span><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">+&nbsp;</span><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">tree</span>的主要原因是B Tree在提高了磁盘IO性能的同时并没有解决元素遍历的效率低下的问题。正是为了解决这个问题，<span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">B</span><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">+&nbsp;</span><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">tree</span>应运而生。<span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">B</span><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">+&nbsp;</span><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">tree</span>只要遍历叶子节点就可以实现整棵树的遍历。而且在数据库中基于范围的查询是非常频繁的，如果使用B Tree，则需要做局部的中序遍历，可能要跨层访问，效率太慢。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"color: rgb(255, 104, 39);\">提示，我下一问就是:</span><br  />你刚才说了这么多B tree不行，那你知道为啥Mongodb用B Tree当索引，而不用B+ Tree么？<br  />(从关系数据库和非关系数据库的区别角度去答，不拓展了！仔细想想，在Mongodb里表示二者的关系，你会怎么处理!)</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">6、mysql某表建了多个单索引，查询多个条件时如何走索引的？</em><br  />其实，我看到这题的时候，内心一抖。这题让后端开发来答，真的很拼功底！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这里希望大家先看看我的另一篇文章<a href=\"http://mp.weixin.qq.com/s?__biz=MzIwMDgzMjc3NA==&amp;mid=2247484489&amp;idx=1&amp;sn=b4078d168dfe86d992a5eca26b1e4f4b&amp;chksm=96f66620a181ef362a285dcfb06dedcc07c4ef93edc6784c3466568e2eb4715ac471467dec42&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">《我是一条DQL》</a>。此题在考优化器的知识！此题是在考察优化器如何抉择索引的！优化器会评估出走哪个索引最优，然后执行。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">Mysql在优化器中有一个优化器称为Range 优化器，负责进行范围查询的优化！<br  />那么该优化器计算执行成本有两种方式index dive与index statistics。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">它们是MySQL优化器对开销代价的估算方法，前者统计速度慢但是能得到精准的值，后者统计速度快但是数据未必精准。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">坦白说写到这里，我内心痛哭流涕，要把index dive和index statistics写明白，真不是一件容易的事，这里只能稍微扯扯。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">对于index dive:<br  />计算成本的方式为</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code class=\"hljs ini\" style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;padding: 0.5em;background: rgb(30, 30, 30);color: rgb(220, 220, 220);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(156, 220, 254);overflow-wrap: inherit !important;word-break: inherit !important;\">COST</span>&nbsp;=&nbsp;CPU&nbsp;COST&nbsp;+&nbsp;IO&nbsp;COST<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">其中CPU COST指的是处理返回记录所花的开销。而IO COST指的是读取页面的开销。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">mysql会对每种索引的执行情况，进行上述成本计算，最后以成本小的方式进行执行。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">但是呢，在某些情况下mysql执行index dive的成本太大。因此优化器会选择以index statistics方式进行估算成本。<br  />具体如下：</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code class=\"hljs sql\" style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;padding: 0.5em;background: rgb(30, 30, 30);color: rgb(220, 220, 220);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(86, 156, 214);overflow-wrap: inherit !important;word-break: inherit !important;\">SHOW</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(86, 156, 214);overflow-wrap: inherit !important;word-break: inherit !important;\">INDEX</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(86, 156, 214);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;tbl_name&nbsp;[<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(86, 156, 214);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;db_name]&nbsp;<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">此时出来的结果中，有一列名为<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">Cardinality</code>，该值表示索引列中不重复值的个数。<br  />简单来说就是，索引列的唯一值的个数，如果是复合索引就是唯一组合的个数。<br  />这个数值将会作为mysql优化器对语句执行计划进行判定时依据。如果唯一性太小，那么优化器会认为，这个索引对语句没有太大帮助，而不使用索引。<br  /><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">Cardinality</code>值越大，就意味着，使用索引能排除越多的数据，执行也更为高效。</p></section><p><br  /></p> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（孤独烟）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/fUPESYvyno3SNKC7vxeDBA\" rel=\"noopener noreferrer\">面试官:谈谈你对mysql索引的认识？</a></p></blockquote></div>', '面试官:谈谈你对mysql索引的认识？', '', 'publish', 'open', 'open', '', 'df235a2226', '', '', '2020-03-28 10:16:36', '2020-03-28 02:16:36', '', 0, 'https://www.javashitang.com/?p=157', 0, 'post', '', 0);
INSERT INTO `wp_posts` VALUES (158, 1, '2020-03-28 10:16:35', '2020-03-28 02:16:35', '', 'beepress7-1585361795', '', 'inherit', 'open', 'closed', '', 'beepress7-1585361795', '', '', '2020-03-28 10:16:35', '2020-03-28 02:16:35', '', 157, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585361795.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (159, 1, '2020-03-28 10:16:35', '2020-03-28 02:16:35', '', 'beepress10-1585361795', '', 'inherit', 'open', 'closed', '', 'beepress10-1585361795', '', '', '2020-03-28 10:16:35', '2020-03-28 02:16:35', '', 157, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361795.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (160, 1, '2020-03-28 10:16:35', '2020-03-28 02:16:35', '', 'beepress9-1585361795', '', 'inherit', 'open', 'closed', '', 'beepress9-1585361795', '', '', '2020-03-28 10:16:35', '2020-03-28 02:16:35', '', 157, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361795.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (161, 1, '2020-03-28 10:16:36', '2020-03-28 02:16:36', '', 'beepress10-1585361796', '', 'inherit', 'open', 'closed', '', 'beepress10-1585361796', '', '', '2020-03-28 10:16:36', '2020-03-28 02:16:36', '', 157, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361796.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (162, 1, '2020-03-28 10:16:36', '2020-03-28 02:16:36', '<div class=\"bpp-post-content\">                                                                                                                            <section class=\"output_wrapper\" style=\"font-size: 15px;color: rgb(62, 62, 62);line-height: 1.8;word-spacing: 2px;letter-spacing: 2px;font-family: &#39;Helvetica Neue&#39;, Helvetica, &#39;Hiragino Sans GB&#39;, &#39;Microsoft YaHei&#39;, Arial, sans-serif;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\"><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">引言</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">大家好，我渣渣烟。我曾经写过一篇<a href=\"http://mp.weixin.qq.com/s?__biz=MzIwMDgzMjc3NA==&amp;mid=2247484617&amp;idx=1&amp;sn=afddfe5c3d66a9fcaba65516a0ab5d18&amp;chksm=96f666a0a181efb60f2109714cf34f4bc68e424ed364d15375284b23f81259e8181c60f7ad10&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">《面试官:讲讲mysql表设计要注意啥》</a>，当时写完后，似乎效果还行！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">于是呢，决定再来一个mysql的数据库专题，这篇我们就来谈谈关于索引方面的mysql面试题。还是老规矩，讲的是在Innodb存储引擎下的情形，毕竟我还真没用过Mysiam之类的存储引擎。<br  /><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">ps</code>:其实很早就想写了，一直偷懒!</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">其实这下面每个问题，我都可以讲一篇文章出来！而且这些问题，不是我凭空编的。如下图所示(<span style=\"color: rgb(255, 0, 0);\"><strong>注意看第三题</strong></span>)</p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361795.jpeg\" alt=\"面试官:谈谈你对mysql索引的认识？\" title=\"面试官:谈谈你对mysql索引的认识？\"  /></p>所以我回忆了一下，索引常见考点有哪些，总结成了这篇文章！<br  />主要题目有下面这些<ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(1)你一般怎么建索引的？</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(2)讲讲索引的分类？你知道哪些？</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(3)如何避免回表查询?什么是索引覆盖?</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(4)现在我有一个列，里头的数据都是唯一的，需要建一个索引，选唯一索引还是普通索引？</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(5)mysql索引是什么结构的？用红黑树可以么？</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(6)mysql某表建了多个单索引，查询多个条件时如何走索引的？</span></p></li></ul><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">正文</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">1、你一般怎么建索引的？</em><br  /><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">烟哥注:</code>曾记得有一个粉丝来找我的时候，出现如下搞笑一幕</p><blockquote style=\"line-height: inherit;padding: 15px 15px 15px 1rem;font-size: 0.9em;color: rgb(0, 0, 0);border-left-width: 5px;border-left-color: rgb(239, 112, 96);background: rgb(239, 235, 233);overflow: auto;overflow-wrap: normal;word-break: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;\"><span style=\"color: rgb(255, 104, 39);\"><strong>渣渣烟:\"你这个简历上写了拥有SQL优化经验，你怎么建索引的？</strong></span><span style=\"color: rgb(255, 104, 39);\"><strong>\"</strong></span><br  /><span style=\"color: rgb(255, 104, 39);\"><strong>只见该粉丝嘿嘿一笑..说道:\"就那样建啊…\"</strong></span><br  /><span style=\"color: rgb(255, 104, 39);\"><strong>渣渣烟:\"噢(第二声)，就哪样建啊…\"</strong></span><br  /><span style=\"color: rgb(255, 104, 39);\"><strong>粉丝:\"…就网上说的那些索引规则啊\"</strong></span><br  /><span style=\"color: rgb(255, 104, 39);\"><strong>渣渣烟:\"那你怎么知道那些SQL出问题，需要建索引呢？</strong></span><span style=\"color: rgb(255, 104, 39);\"><strong>\"</strong></span><br  /><span style=\"color: rgb(255, 104, 39);\"><strong>粉丝:\"我…..\"</strong></span><br  /></p></blockquote><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">嗯，这道题其实很基础。但是有没有做过，这题是可以看出来的。<br  />去my.cnf里配置三个配置</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code class=\"hljs makefile\" style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;padding: 0.5em;background: rgb(30, 30, 30);color: rgb(220, 220, 220);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\">打开慢查询日志<br  />slow_query_log=1<br  />慢查询日志存储路径<br  />slow_query_log_file=/var/log/mysql/log-slow-queries.log<br  />SQL执行时间大于3秒，则记录日志<br  />long_query_time=3<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">监控到慢SQL后，就马上开始建索引?<br  />NO,NO,NO….这种时候，应该先考虑你的SQL能不能进行SQL优化。<br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">例如，当只要一行数据时使用 limit 1</strong><br  />查询时如果已知会得到一条数据，这种情况下加上 limit 1 会增加性能。因为 mysql 数据库引擎会在找到一条结果停止搜索，而不是继续查询下一条是否符合标准直到所有记录查询完毕。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">然而大多数情况下，业务SQL十分复杂，没法优化。所以就要建立索引了。这个时候，参照如下规则建立索引</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(1)索引并非越多越好，大量的索引不仅占用磁盘空间，而且还会影响insert,delete,update等语句的性能</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(2)避免对经常更新的表做更多的索引，并且索引中的列尽可能少；对经常用于查询的字段创建索引，避免添加不必要的索引</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(3)数据量少的表尽量不要使用索引，由于数据较少，查询花费的时间可能比遍历索引的时间还要短，索引可能不会产生优化效果</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(4)在条件表达式中经常用到不同值较多的列上创建索引，在不同值很少的列上不要建立索引。比如性别字段只有“男”“女”俩个值，就无需建立索引。如果建立了索引不但不会提升效率，反而严重减低数据的更新速度</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(5)在频繁进行排序或者分组的列上建立索引，如果排序的列有多个，可以在这些列上建立联合索引。</span></p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">2、讲讲索引的分类？你知道哪些？</em><br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">从物理存储角度:</strong><br  /> &nbsp;聚簇索引和非聚簇索引<br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">从数据结构角度:</strong><br  /> &nbsp;B+树索引、hash索引、FULLTEXT索引、R-Tree索引<br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">从逻辑角度:</strong></p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">主键索引：主键索引是一种特殊的唯一索引，不允许有空值</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">普通索引或者单列索引</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">多列索引（复合索引）：复合索引指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。使用复合索引时遵循最左前缀集合</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">唯一索引或者非唯一索引</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">空间索引：空间索引是对空间数据类型的字段建立的索引，MYSQL中的空间数据类型有4种，分别是GEOMETRY、POINT、LINESTRING、POLYGON。</span></p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">3、如何避免回表查询?什么是索引覆盖?</em><br  />这个问题，如果要看详细版，请参阅文章<a href=\"http://mp.weixin.qq.com/s?__biz=MzIwMDgzMjc3NA==&amp;mid=2247484040&amp;idx=1&amp;sn=5918c27351f366a777484b440aeeaa22&amp;chksm=96f660e1a181e9f7e9dc6f6b0570352c20650c9de51ffbd236e0d71d4edaf99805334361ac72&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">《Innodb中索引的原理》</a></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这里简单说一下。<br  />当能通过读取索引就可以得到想要的数据，那就不需要回表读取行了。一个索引包含了（或覆盖了）满足查询结果的数据就叫做索引覆盖。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">例如此时有一张表<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">table1</code>,有一个联合索引(a,b)</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">执行如下SQL</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code class=\"hljs cs\" style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;padding: 0.5em;background: rgb(30, 30, 30);color: rgb(220, 220, 220);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(86, 156, 214);overflow-wrap: inherit !important;word-break: inherit !important;\">select</span>&nbsp;a,b&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(86, 156, 214);overflow-wrap: inherit !important;word-break: inherit !important;\">from</span>&nbsp;table1<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">在索引上就能找到结果，就不用回表去查询！<br  />而你执行的是</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code class=\"hljs cs\" style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;padding: 0.5em;background: rgb(30, 30, 30);color: rgb(220, 220, 220);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(86, 156, 214);overflow-wrap: inherit !important;word-break: inherit !important;\">select</span>&nbsp;a,b,c&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(86, 156, 214);overflow-wrap: inherit !important;word-break: inherit !important;\">from</span>&nbsp;table2<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">c列在索引上不存在，就需要回表查询。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">需要说明的是覆盖索引必须要存储索引列的值，而哈希索引、空间索引和全文索引不存储索引列的值，所以mysql只能用B+ tree索引做覆盖索引。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">4、现在我有一个列，里头的数据都是唯一的，需要建一个索引，选唯一索引还是普通索引？</em><br  />答唯一索引！<br  />首先，在孤尽出的《阿里巴巴JAVA开发规范》中有这么一段话</p><blockquote style=\"line-height: inherit;padding: 15px 15px 15px 1rem;font-size: 0.9em;color: rgb(0, 0, 0);border-left-width: 5px;border-left-color: rgb(239, 112, 96);background: rgb(239, 235, 233);overflow: auto;overflow-wrap: normal;word-break: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;\"><span style=\"color: rgb(255, 104, 39);\"><strong><span style=\"font-family: &quot;PingFang SC&quot;, &quot;Helvetica Neue&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, &quot;Noto Sans CJK SC&quot;, Sathu, EucrosiaUPC, Arial, Helvetica, sans-serif;font-size: 14px;text-align: start;background-color: rgba(0, 173, 95, 0.06);\">【强制】业务上具有唯一特性的字段，即使是多个字段的组合，也必须建成唯一索引</span></strong></span></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;\"><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">说明：不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的；另外，即使在应用层做了非常完善的校验控制，只要没有唯一索引，根据墨菲定律，必然有脏数据产生。</strong></p></blockquote><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">那好，下一问出现了！<br  /><span style=\"color: rgb(255, 104, 39);\"><em>为什么唯一索引的插入速度比不上普通索引？</em></span><span style=\"color: rgb(255, 104, 39);\"><em>为什么唯一索引的查找速度比普通索引快？</em></span><br  />这个问题就要从Insert Buffer开始讲起了，在进行非聚簇索引的插入时，先判断插入的索引页是否在内存中。如果在，则直接插入；如果不在，则先放入Insert Buffer 中，然后再以一定频率和情况进行Insert Buffer和原数据页合并(merge)操作。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这么做的优点:能将多个插入合并到一个操作中，就大大提高了非聚簇索引的插入性能。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">InnoDB 从 1.0.x 版本开始引入了 Change Buffer，可以算是对 Insert Buffer 的升级。从这个版本开始，InnoDB 存储引擎可以对 insert、delete、update 都进行缓存。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">唯一速度的<strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">插入</strong>比普通索引慢的原因就是:</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">唯一索引无法利用Change Buffer</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">普通索引可以利用Change Buffer</span></p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">于是乎下一问又来了！<br  /><em><span style=\"color: rgb(255, 104, 39);\">为什么唯一索引的更新不使用 Change Buffer？</span></em><br  />因为唯一索引为了保证唯一性，需要将数据页加载进内存才能判断是否违反唯一性约束。但是，既然数据页都加载到内存了，还不如直接更新内存中的数据页，没有必要再使用Change Buffer。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">最后回答一下，唯一索引的<strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">搜索速度</strong>比普通索引快的原因就是:</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">普通索引在找到满足条件的第一条记录后，还需要判断下一条记录，直到第一个不满足条件的记录出现。</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">唯一索引在找到满足条件的第一条记录后，直接返回，不用判断下一条记录了。</span></p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">5、mysql索引是什么结构的？用红黑树可以么?</em><br  />这个妥妥答最常见的B+ Tree。<br  />AVL树和红黑树基本都是存储在内存中才会使用的数据结构。在大规模数据数据存储的时候，显然不能将全部数据全部加载进内存，因此如果采用红黑树，就会造成频繁IO，效率低下。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">那为啥不用B Tree,而选择B+ tree呢？<br  />这就需要贴一下经典的两张图。B tree是长下面这样的<span style=\"color: rgb(153, 153, 153);font-size: 0.7em;text-align: center;\"></span></p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361795.jpg\" alt=\"面试官:谈谈你对mysql索引的认识？\" title=\"面试官:谈谈你对mysql索引的认识？\"  /></p><br  />注意一下B tree的两个明显特点<ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">树内存储数据</span></p></li><li><p>叶子节点上无链表</p><p><br  /></p><p><br  /></p></li></ul><p>而B+ tree长下面这样的<br  /></p><p style=\"text-align: center;\"><img class=\"rich_pages\"           style=\"width: 573px;height: 220px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361796.jpeg\" alt=\"面试官:谈谈你对mysql索引的认识？\" title=\"面试官:谈谈你对mysql索引的认识？\"  /></p><p>注意一下B+ tree的两个明显特点</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">数据只出现在叶子节点</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">所有叶子节点增加了一个链指针</span></p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"color: rgb(255, 104, 39);\">接下来就可以开始编了～～</span>比如数据库索引采用<span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">B</span><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">+&nbsp;</span><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">tree</span>的主要原因是B Tree在提高了磁盘IO性能的同时并没有解决元素遍历的效率低下的问题。正是为了解决这个问题，<span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">B</span><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">+&nbsp;</span><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">tree</span>应运而生。<span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">B</span><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">+&nbsp;</span><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">tree</span>只要遍历叶子节点就可以实现整棵树的遍历。而且在数据库中基于范围的查询是非常频繁的，如果使用B Tree，则需要做局部的中序遍历，可能要跨层访问，效率太慢。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"color: rgb(255, 104, 39);\">提示，我下一问就是:</span><br  />你刚才说了这么多B tree不行，那你知道为啥Mongodb用B Tree当索引，而不用B+ Tree么？<br  />(从关系数据库和非关系数据库的区别角度去答，不拓展了！仔细想想，在Mongodb里表示二者的关系，你会怎么处理!)</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">6、mysql某表建了多个单索引，查询多个条件时如何走索引的？</em><br  />其实，我看到这题的时候，内心一抖。这题让后端开发来答，真的很拼功底！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这里希望大家先看看我的另一篇文章<a href=\"http://mp.weixin.qq.com/s?__biz=MzIwMDgzMjc3NA==&amp;mid=2247484489&amp;idx=1&amp;sn=b4078d168dfe86d992a5eca26b1e4f4b&amp;chksm=96f66620a181ef362a285dcfb06dedcc07c4ef93edc6784c3466568e2eb4715ac471467dec42&amp;scene=21#wechat_redirect\" target=\"_blank\" rel=\"noopener noreferrer\">《我是一条DQL》</a>。此题在考优化器的知识！此题是在考察优化器如何抉择索引的！优化器会评估出走哪个索引最优，然后执行。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">Mysql在优化器中有一个优化器称为Range 优化器，负责进行范围查询的优化！<br  />那么该优化器计算执行成本有两种方式index dive与index statistics。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">它们是MySQL优化器对开销代价的估算方法，前者统计速度慢但是能得到精准的值，后者统计速度快但是数据未必精准。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">坦白说写到这里，我内心痛哭流涕，要把index dive和index statistics写明白，真不是一件容易的事，这里只能稍微扯扯。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">对于index dive:<br  />计算成本的方式为</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code class=\"hljs ini\" style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;padding: 0.5em;background: rgb(30, 30, 30);color: rgb(220, 220, 220);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span class=\"hljs-attr\" style=\"font-size: inherit;line-height: inherit;color: rgb(156, 220, 254);overflow-wrap: inherit !important;word-break: inherit !important;\">COST</span>&nbsp;=&nbsp;CPU&nbsp;COST&nbsp;+&nbsp;IO&nbsp;COST<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">其中CPU COST指的是处理返回记录所花的开销。而IO COST指的是读取页面的开销。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">mysql会对每种索引的执行情况，进行上述成本计算，最后以成本小的方式进行执行。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">但是呢，在某些情况下mysql执行index dive的成本太大。因此优化器会选择以index statistics方式进行估算成本。<br  />具体如下：</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code class=\"hljs sql\" style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;padding: 0.5em;background: rgb(30, 30, 30);color: rgb(220, 220, 220);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(86, 156, 214);overflow-wrap: inherit !important;word-break: inherit !important;\">SHOW</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(86, 156, 214);overflow-wrap: inherit !important;word-break: inherit !important;\">INDEX</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(86, 156, 214);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;tbl_name&nbsp;[<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(86, 156, 214);overflow-wrap: inherit !important;word-break: inherit !important;\">FROM</span>&nbsp;db_name]&nbsp;<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">此时出来的结果中，有一列名为<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">Cardinality</code>，该值表示索引列中不重复值的个数。<br  />简单来说就是，索引列的唯一值的个数，如果是复合索引就是唯一组合的个数。<br  />这个数值将会作为mysql优化器对语句执行计划进行判定时依据。如果唯一性太小，那么优化器会认为，这个索引对语句没有太大帮助，而不使用索引。<br  /><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">Cardinality</code>值越大，就意味着，使用索引能排除越多的数据，执行也更为高效。</p></section><p><br  /></p> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（孤独烟）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/fUPESYvyno3SNKC7vxeDBA\" rel=\"noopener noreferrer\">面试官:谈谈你对mysql索引的认识？</a></p></blockquote></div>', '面试官:谈谈你对mysql索引的认识？', '', 'inherit', 'closed', 'closed', '', '157-revision-v1', '', '', '2020-03-28 10:16:36', '2020-03-28 02:16:36', '', 157, 'https://www.javashitang.com/?p=162', 0, 'revision', '', 0);
INSERT INTO `wp_posts` VALUES (163, 1, '2019-09-24 15:03:29', '2020-03-28 02:17:13', '<div class=\"bpp-post-content\">                                                                                                                            <p><br  /></p><section class=\"output_wrapper\" style=\"font-size: 15px;color: rgb(62, 62, 62);line-height: 1.8;word-spacing: 2px;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\"><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">引言</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">大家好，我是渣渣烟。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">我又来水文章了。这篇文章我个人感觉含金量不是太大，大概5分钟左右就能看完！其实大家都知道，我不爱写这种操作型的文章，一顿截图写几个命令就搞定了，含金量不高。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">然而，近期有一段聊天记录如下</p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361833.jpeg\" alt=\"面试官:知道你的接口QPS是多少么?\" title=\"面试官:知道你的接口QPS是多少么?\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">看到这里，不要吃惊，不要惊讶！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">那个很猥琐的，没有打码的头像，正是渣渣烟本人(此处应有反驳的声音，那个头像哪里猥琐了，分明帅气逼人好么)！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">所以，牛皮都吹出去了。写个文章，自己给自己圆上！</p><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">正文</span></h2><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">QPS是什么</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">我们先回忆一下，QPS的概念如下所示:</p><blockquote style=\"line-height: inherit;padding: 15px 15px 15px 1rem;font-size: 0.9em;color: rgb(0, 0, 0);border-left-width: 5px;border-left-color: rgb(239, 112, 96);background: rgb(239, 235, 233);overflow: auto;overflow-wrap: normal;word-break: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;\"><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">QPS（Query Per Second）：每秒请求数，就是说服务器在一秒的时间内处理了多少个请求。</strong></p></blockquote><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">那我们怎么估出每秒钟能处理多少请求呢？<br  />OK，用日志来估计！那日志怎么记录呢，细分下来，有两种方式。<br  /><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">方式一:自己在接口里记录</em><br  />这种方式指的是在你的接口里，日志记录了能体现该接口特性的，并具有唯一性的字符串！<br  />例如，下面这一段代码</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code class=\"hljs kotlin\" style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;padding: 0.5em;background: rgb(30, 30, 30);color: rgb(220, 220, 220);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span class=\"hljs-meta\" style=\"font-size: inherit;line-height: inherit;color: rgb(155, 155, 155);overflow-wrap: inherit !important;word-break: inherit !important;\">@RestController</span>&nbsp;&nbsp;<br  /><span class=\"hljs-meta\" style=\"font-size: inherit;line-height: inherit;color: rgb(155, 155, 155);overflow-wrap: inherit !important;word-break: inherit !important;\">@RequestMapping(<span class=\"hljs-meta-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(214, 157, 133);overflow-wrap: inherit !important;word-break: inherit !important;\">\"/home\"</span>)</span>&nbsp;&nbsp;<br  /><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(86, 156, 214);overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(86, 156, 214);overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;line-height: inherit;color: rgb(220, 220, 220);overflow-wrap: inherit !important;word-break: inherit !important;\">IndexController</span>&nbsp;</span>{<br  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;line-height: inherit;color: rgb(87, 166, 74);font-style: italic;overflow-wrap: inherit !important;word-break: inherit !important;\">//省略</span><br  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;line-height: inherit;color: rgb(155, 155, 155);overflow-wrap: inherit !important;word-break: inherit !important;\">@RequestMapping(<span class=\"hljs-meta-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(214, 157, 133);overflow-wrap: inherit !important;word-break: inherit !important;\">\"/index\"</span>)</span>&nbsp;&nbsp;<br  />&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;index()&nbsp;{&nbsp;&nbsp;<br  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.info(<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(214, 157, 133);overflow-wrap: inherit !important;word-break: inherit !important;\">\"渣渣烟\"</span>);<br  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(86, 156, 214);overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(214, 157, 133);overflow-wrap: inherit !important;word-break: inherit !important;\">\"index\"</span>;&nbsp;&nbsp;<br  />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br  />}&nbsp;&nbsp;<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">假设现在我要统计index这个接口的QPS！<br  />OK，什么叫能体现该接口特性的字符串呢！就像上面的\"渣渣烟\"这个字符串，只在index这个接口里出现过，没在其他其他接口里出现过！因此，只要统计出\"渣渣烟\"这个字符串在日志里的出现次数，就能知道该接口的请求次数！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">什么叫具有唯一性的字符串呢！所谓唯一性，指的是\"渣渣烟\"这个字符串，在这个接口的一次调用流程中，只出现一次！如果出现两次，就会导致到时候统计出来的次数会多一倍，所以尽量选择具有唯一性的字段！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">方式二:利用tomcat的access log</em><br  />如果你的日志里没有我上面提到的字段。OK，那就用tomcat自带的access log功能吧！<br  />因为我平时内置的tomcat比较多，指定下面两个属性即可</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code class=\"hljs css\" style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;padding: 0.5em;background: rgb(30, 30, 30);color: rgb(220, 220, 220);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span class=\"hljs-selector-tag\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">server</span><span class=\"hljs-selector-class\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">.tomcat</span><span class=\"hljs-selector-class\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">.accesslog</span><span class=\"hljs-selector-class\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">.directory</span><br  />设定<span class=\"hljs-selector-tag\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">log</span>的目录，默认:&nbsp;<span class=\"hljs-selector-tag\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">logs</span><br  /><span class=\"hljs-selector-tag\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">server</span><span class=\"hljs-selector-class\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">.tomcat</span><span class=\"hljs-selector-class\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">.accesslog</span><span class=\"hljs-selector-class\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">.enabled</span><br  />是否开启<span class=\"hljs-selector-tag\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">access</span>&nbsp;<span class=\"hljs-selector-tag\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">log</span>，默认:&nbsp;<span class=\"hljs-selector-tag\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">false</span><br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">此时，你访问一次/home/index地址，会有下面这样日志</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code class=\"hljs bash\" style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;padding: 0.5em;background: rgb(30, 30, 30);color: rgb(220, 220, 220);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\">127.0.0.1&nbsp;-&nbsp;-&nbsp;[19/Aug/2019:23:55:27&nbsp;+0800]&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(214, 157, 133);overflow-wrap: inherit !important;word-break: inherit !important;\">\"POST&nbsp;/home/index&nbsp;HTTP/1.1\"</span>&nbsp;200&nbsp;138<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">那么，你就可以根据日志中，该记录的出现次数，统计index接口的QPS。</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">实战</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">假设，你这会日志已经拿到手了，名字为xxx.log。<br  />假设日志内容如下</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code class=\"hljs cpp\" style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;padding: 0.5em;background: rgb(30, 30, 30);color: rgb(220, 220, 220);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit;line-height: inherit;color: rgb(87, 166, 74);font-style: italic;overflow-wrap: inherit !important;word-break: inherit !important;\">//省略，都长差不多，贴其中一条就行</span><br  /><span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>:<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>:<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>:<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>:<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>:<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>:<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>:<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;-&nbsp;-&nbsp;[<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">27</span>/Dec/<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">2018</span>:<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">20</span>:<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">41</span>:<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">57</span>&nbsp;+<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">0800</span>]&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(214, 157, 133);overflow-wrap: inherit !important;word-break: inherit !important;\">\"GET&nbsp;/mvc2/upload.do&nbsp;HTTP/1.1\"</span>&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">404</span>&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">949</span>&nbsp;http-bio<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">-8080</span>-exec<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">-5</span>&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">43</span><br  /><span class=\"hljs-comment\" style=\"font-size: inherit;line-height: inherit;color: rgb(87, 166, 74);font-style: italic;overflow-wrap: inherit !important;word-break: inherit !important;\">//省略</span><br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这个时候，你执行一串命令长下面这样的，进行统计就行！<br  /><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">cat xx.log |grep \'GET /mvc2\'|cut -d \' \' -f4|uniq -c|sort -n -r</code><br  />出来等结果就是</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code class=\"hljs\" style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;padding: 0.5em;background: rgb(30, 30, 30);color: rgb(220, 220, 220);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\">2&nbsp;[27/Dec/2018:20:40:44<br  />1&nbsp;[27/Dec/2018:20:47:58<br  />1&nbsp;[27/Dec/2018:20:47:42<br  />1&nbsp;[27/Dec/2018:20:41:57<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">然后你就知道，原来在20:40:44 分。。这个接口的QPS最高，达到了惊人的2QPS！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">现在，来讲一下命令什么意思！<br  /><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">cat xxx.log</code>:读文件内容<br  /><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">grep \'GET /mvc2\'</code>:将文件内容按照<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">GET /mvc2</code>进行过滤<br  /><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">cut -d \' \' -f4</code>:过滤出来的内容按照空格进行分割，取第四列内容<br  /><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">uniq -c</code>:每列旁边显示该行重复出现的次数<br  /><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">sort -n -r</code>:依照数值的大小排序</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">那么，如果是其他日志格式，无外乎cut语句的处理不同而已，道理类似！此法可以估算出单机的某接口的QPS是多少！</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">估算</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">我们现在估计出了单机的QPS。接下来，估算集群的QPS。<br  />这就要根据负载均衡的策略来估计！<br  />比如，你部署了32台机器，负载均衡的策略恰巧为轮询，那集群的QPS就是单机的QPS乘32就好了。<br  />所以，根据具体的策略，来估计整个集群的QPS多大！<br  />然后接下来就是:<br  /></p><p style=\"text-align: center;\"><img class=\"rich_pages\"    style=\"\"   src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361834.png\" alt=\"面试官:知道你的接口QPS是多少么?\" title=\"面试官:知道你的接口QPS是多少么?\"  /></p><br  />多嘴一句，一般2000QPS够了！<h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">总结</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">渣渣烟写到此处，竟无语凝噎。希望大家有所收获！</p></section> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（孤独烟）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/iovC-XK_HxCZ__bztbLCcA\" rel=\"noopener noreferrer\">面试官:知道你的接口QPS是多少么?</a></p></blockquote></div>', '面试官:知道你的接口QPS是多少么?', '', 'publish', 'open', 'open', '', '29061c63dd', '', '', '2020-03-28 10:17:14', '2020-03-28 02:17:14', '', 0, 'https://www.javashitang.com/?p=163', 0, 'post', '', 0);
INSERT INTO `wp_posts` VALUES (164, 1, '2020-03-28 10:17:13', '2020-03-28 02:17:13', '', 'beepress4-1585361833', '', 'inherit', 'open', 'closed', '', 'beepress4-1585361833', '', '', '2020-03-28 10:17:13', '2020-03-28 02:17:13', '', 163, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361833.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (165, 1, '2020-03-28 10:17:13', '2020-03-28 02:17:13', '', 'beepress1-1585361833', '', 'inherit', 'open', 'closed', '', 'beepress1-1585361833', '', '', '2020-03-28 10:17:13', '2020-03-28 02:17:13', '', 163, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361833.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (166, 1, '2020-03-28 10:17:14', '2020-03-28 02:17:14', '', 'beepress1-1585361834', '', 'inherit', 'open', 'closed', '', 'beepress1-1585361834', '', '', '2020-03-28 10:17:14', '2020-03-28 02:17:14', '', 163, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361834.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (167, 1, '2020-03-28 10:17:14', '2020-03-28 02:17:14', '<div class=\"bpp-post-content\">                                                                                                                            <p><br  /></p><section class=\"output_wrapper\" style=\"font-size: 15px;color: rgb(62, 62, 62);line-height: 1.8;word-spacing: 2px;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\"><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">引言</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">大家好，我是渣渣烟。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">我又来水文章了。这篇文章我个人感觉含金量不是太大，大概5分钟左右就能看完！其实大家都知道，我不爱写这种操作型的文章，一顿截图写几个命令就搞定了，含金量不高。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">然而，近期有一段聊天记录如下</p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361833.jpeg\" alt=\"面试官:知道你的接口QPS是多少么?\" title=\"面试官:知道你的接口QPS是多少么?\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">看到这里，不要吃惊，不要惊讶！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">那个很猥琐的，没有打码的头像，正是渣渣烟本人(此处应有反驳的声音，那个头像哪里猥琐了，分明帅气逼人好么)！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">所以，牛皮都吹出去了。写个文章，自己给自己圆上！</p><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">正文</span></h2><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">QPS是什么</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">我们先回忆一下，QPS的概念如下所示:</p><blockquote style=\"line-height: inherit;padding: 15px 15px 15px 1rem;font-size: 0.9em;color: rgb(0, 0, 0);border-left-width: 5px;border-left-color: rgb(239, 112, 96);background: rgb(239, 235, 233);overflow: auto;overflow-wrap: normal;word-break: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;\"><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">QPS（Query Per Second）：每秒请求数，就是说服务器在一秒的时间内处理了多少个请求。</strong></p></blockquote><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">那我们怎么估出每秒钟能处理多少请求呢？<br  />OK，用日志来估计！那日志怎么记录呢，细分下来，有两种方式。<br  /><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">方式一:自己在接口里记录</em><br  />这种方式指的是在你的接口里，日志记录了能体现该接口特性的，并具有唯一性的字符串！<br  />例如，下面这一段代码</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code class=\"hljs kotlin\" style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;padding: 0.5em;background: rgb(30, 30, 30);color: rgb(220, 220, 220);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span class=\"hljs-meta\" style=\"font-size: inherit;line-height: inherit;color: rgb(155, 155, 155);overflow-wrap: inherit !important;word-break: inherit !important;\">@RestController</span>&nbsp;&nbsp;<br  /><span class=\"hljs-meta\" style=\"font-size: inherit;line-height: inherit;color: rgb(155, 155, 155);overflow-wrap: inherit !important;word-break: inherit !important;\">@RequestMapping(<span class=\"hljs-meta-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(214, 157, 133);overflow-wrap: inherit !important;word-break: inherit !important;\">\"/home\"</span>)</span>&nbsp;&nbsp;<br  /><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(86, 156, 214);overflow-wrap: inherit !important;word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(86, 156, 214);overflow-wrap: inherit !important;word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit;line-height: inherit;color: rgb(220, 220, 220);overflow-wrap: inherit !important;word-break: inherit !important;\">IndexController</span>&nbsp;</span>{<br  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit;line-height: inherit;color: rgb(87, 166, 74);font-style: italic;overflow-wrap: inherit !important;word-break: inherit !important;\">//省略</span><br  />&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit;line-height: inherit;color: rgb(155, 155, 155);overflow-wrap: inherit !important;word-break: inherit !important;\">@RequestMapping(<span class=\"hljs-meta-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(214, 157, 133);overflow-wrap: inherit !important;word-break: inherit !important;\">\"/index\"</span>)</span>&nbsp;&nbsp;<br  />&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;index()&nbsp;{&nbsp;&nbsp;<br  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.info(<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(214, 157, 133);overflow-wrap: inherit !important;word-break: inherit !important;\">\"渣渣烟\"</span>);<br  />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit;line-height: inherit;color: rgb(86, 156, 214);overflow-wrap: inherit !important;word-break: inherit !important;\">return</span>&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(214, 157, 133);overflow-wrap: inherit !important;word-break: inherit !important;\">\"index\"</span>;&nbsp;&nbsp;<br  />&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;<br  />}&nbsp;&nbsp;<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">假设现在我要统计index这个接口的QPS！<br  />OK，什么叫能体现该接口特性的字符串呢！就像上面的\"渣渣烟\"这个字符串，只在index这个接口里出现过，没在其他其他接口里出现过！因此，只要统计出\"渣渣烟\"这个字符串在日志里的出现次数，就能知道该接口的请求次数！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">什么叫具有唯一性的字符串呢！所谓唯一性，指的是\"渣渣烟\"这个字符串，在这个接口的一次调用流程中，只出现一次！如果出现两次，就会导致到时候统计出来的次数会多一倍，所以尽量选择具有唯一性的字段！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">方式二:利用tomcat的access log</em><br  />如果你的日志里没有我上面提到的字段。OK，那就用tomcat自带的access log功能吧！<br  />因为我平时内置的tomcat比较多，指定下面两个属性即可</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code class=\"hljs css\" style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;padding: 0.5em;background: rgb(30, 30, 30);color: rgb(220, 220, 220);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span class=\"hljs-selector-tag\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">server</span><span class=\"hljs-selector-class\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">.tomcat</span><span class=\"hljs-selector-class\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">.accesslog</span><span class=\"hljs-selector-class\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">.directory</span><br  />设定<span class=\"hljs-selector-tag\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">log</span>的目录，默认:&nbsp;<span class=\"hljs-selector-tag\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">logs</span><br  /><span class=\"hljs-selector-tag\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">server</span><span class=\"hljs-selector-class\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">.tomcat</span><span class=\"hljs-selector-class\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">.accesslog</span><span class=\"hljs-selector-class\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">.enabled</span><br  />是否开启<span class=\"hljs-selector-tag\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">access</span>&nbsp;<span class=\"hljs-selector-tag\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">log</span>，默认:&nbsp;<span class=\"hljs-selector-tag\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">false</span><br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">此时，你访问一次/home/index地址，会有下面这样日志</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code class=\"hljs bash\" style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;padding: 0.5em;background: rgb(30, 30, 30);color: rgb(220, 220, 220);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\">127.0.0.1&nbsp;-&nbsp;-&nbsp;[19/Aug/2019:23:55:27&nbsp;+0800]&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(214, 157, 133);overflow-wrap: inherit !important;word-break: inherit !important;\">\"POST&nbsp;/home/index&nbsp;HTTP/1.1\"</span>&nbsp;200&nbsp;138<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">那么，你就可以根据日志中，该记录的出现次数，统计index接口的QPS。</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">实战</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">假设，你这会日志已经拿到手了，名字为xxx.log。<br  />假设日志内容如下</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code class=\"hljs cpp\" style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;padding: 0.5em;background: rgb(30, 30, 30);color: rgb(220, 220, 220);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit;line-height: inherit;color: rgb(87, 166, 74);font-style: italic;overflow-wrap: inherit !important;word-break: inherit !important;\">//省略，都长差不多，贴其中一条就行</span><br  /><span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>:<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>:<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>:<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>:<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>:<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>:<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">0</span>:<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">1</span>&nbsp;-&nbsp;-&nbsp;[<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">27</span>/Dec/<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">2018</span>:<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">20</span>:<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">41</span>:<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">57</span>&nbsp;+<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">0800</span>]&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit;line-height: inherit;color: rgb(214, 157, 133);overflow-wrap: inherit !important;word-break: inherit !important;\">\"GET&nbsp;/mvc2/upload.do&nbsp;HTTP/1.1\"</span>&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">404</span>&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">949</span>&nbsp;http-bio<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">-8080</span>-exec<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">-5</span>&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit;line-height: inherit;color: rgb(184, 215, 163);overflow-wrap: inherit !important;word-break: inherit !important;\">43</span><br  /><span class=\"hljs-comment\" style=\"font-size: inherit;line-height: inherit;color: rgb(87, 166, 74);font-style: italic;overflow-wrap: inherit !important;word-break: inherit !important;\">//省略</span><br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这个时候，你执行一串命令长下面这样的，进行统计就行！<br  /><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">cat xx.log |grep \'GET /mvc2\'|cut -d \' \' -f4|uniq -c|sort -n -r</code><br  />出来等结果就是</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code class=\"hljs\" style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;padding: 0.5em;background: rgb(30, 30, 30);color: rgb(220, 220, 220);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\">2&nbsp;[27/Dec/2018:20:40:44<br  />1&nbsp;[27/Dec/2018:20:47:58<br  />1&nbsp;[27/Dec/2018:20:47:42<br  />1&nbsp;[27/Dec/2018:20:41:57<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">然后你就知道，原来在20:40:44 分。。这个接口的QPS最高，达到了惊人的2QPS！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">现在，来讲一下命令什么意思！<br  /><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">cat xxx.log</code>:读文件内容<br  /><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">grep \'GET /mvc2\'</code>:将文件内容按照<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">GET /mvc2</code>进行过滤<br  /><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">cut -d \' \' -f4</code>:过滤出来的内容按照空格进行分割，取第四列内容<br  /><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">uniq -c</code>:每列旁边显示该行重复出现的次数<br  /><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">sort -n -r</code>:依照数值的大小排序</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">那么，如果是其他日志格式，无外乎cut语句的处理不同而已，道理类似！此法可以估算出单机的某接口的QPS是多少！</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">估算</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">我们现在估计出了单机的QPS。接下来，估算集群的QPS。<br  />这就要根据负载均衡的策略来估计！<br  />比如，你部署了32台机器，负载均衡的策略恰巧为轮询，那集群的QPS就是单机的QPS乘32就好了。<br  />所以，根据具体的策略，来估计整个集群的QPS多大！<br  />然后接下来就是:<br  /></p><p style=\"text-align: center;\"><img class=\"rich_pages\"    style=\"\"   src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361834.png\" alt=\"面试官:知道你的接口QPS是多少么?\" title=\"面试官:知道你的接口QPS是多少么?\"  /></p><br  />多嘴一句，一般2000QPS够了！<h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">总结</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">渣渣烟写到此处，竟无语凝噎。希望大家有所收获！</p></section> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（孤独烟）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/iovC-XK_HxCZ__bztbLCcA\" rel=\"noopener noreferrer\">面试官:知道你的接口QPS是多少么?</a></p></blockquote></div>', '面试官:知道你的接口QPS是多少么?', '', 'inherit', 'closed', 'closed', '', '163-revision-v1', '', '', '2020-03-28 10:17:14', '2020-03-28 02:17:14', '', 163, 'https://www.javashitang.com/?p=167', 0, 'revision', '', 0);
INSERT INTO `wp_posts` VALUES (168, 1, '2019-09-03 03:22:24', '2020-03-28 02:17:50', '<div class=\"bpp-post-content\">                                                                                                                            <p><br  /></p><section class=\"output_wrapper\" style=\"font-size: 15px;color: rgb(62, 62, 62);line-height: 1.8;word-spacing: 2px;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">本文故事绝对真实，如有雷同，绝对不是巧合！<br  />话说前几天有一次，某大厂的二面。然后呢，烟哥那天刚好有事，所以去不了。于是就约了一场视频面试了！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">于是呢，烟哥提前十分钟在公司里头找了一个<strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">厕所</strong>的坑位，然后进去随手一锁门….(以下省略10000字)…</p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress2-1585361871.jpeg\" alt=\"一次失败的面试，复习一次一致性哈希算法\" title=\"一次失败的面试，复习一次一致性哈希算法\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">唉…<br  />我竟然…<br  />我竟然…</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">我竟然又<strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">带薪上厕所了</strong>，而且上了一小时！我有罪！</p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361871.jpeg\" alt=\"一次失败的面试，复习一次一致性哈希算法\" title=\"一次失败的面试，复习一次一致性哈希算法\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">额，是这样的，大厂的厕所是有雅间的。所以环境还马马虎虎，鼻子还是正常的！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">OK，交待完背景，然后开始我们的主题！</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">全局Session</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">当时的情形是这样的，先介绍一下自己的项目。然后介绍完项目背景以后，因为有一个登陆模块。于是乎有了如下问题</p><blockquote style=\"line-height: inherit;padding: 15px 15px 15px 1rem;font-size: 0.9em;color: rgb(0, 0, 0);border-left-width: 5px;border-left-color: rgb(239, 112, 96);background: rgb(239, 235, 233);overflow: auto;overflow-wrap: normal;word-break: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;\"><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">面试官：“先说说全局Session干嘛用的，你们那边全局session是怎么做的？”</strong></p></blockquote><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这个问题还是很容易的。因为一个应用通常有多台服务器，在登陆成功后，Session只会在其中某一台存储。需要想办法让多台服务器都识别到这个Session，因此才有了这个全局Session的概念。我们用的是<em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">后端统一存储</em>的策略，有专门的用户管理系统，上面存储着用户信息以及Session状态。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">烟哥注</code>:目前业内在解决全局Sesssion上无外乎四种方法</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(1)服务端自己进行同步，例如早期的项目，大概是07年那会的(我司老古董项目啊)，那会Tomcat的集群能力不行。用的是Weblogic服务器，使用的就是Weblogic的Session复制功能。</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(2)客户端存储法，将session存储到浏览器cookie中，每次http请求都带session。这里摸着良心坦白说，该方案从没用过，安全性太差。</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(3)反向代理hash一致性，不需要修改应用代码。修改nginx的配置，保证同一个ip的请求落在同一个web-server上即可。</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(4)后端统一存储，后端统一找一个中间件将Session存起来即可，这个中间件是数据库或者缓存。</span></p></li></ul><blockquote style=\"line-height: inherit;padding: 15px 15px 15px 1rem;font-size: 0.9em;color: rgb(0, 0, 0);border-left-width: 5px;border-left-color: rgb(239, 112, 96);background: rgb(239, 235, 233);overflow: auto;overflow-wrap: normal;word-break: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;\"><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">面试官：“那你知道这个平台里Session怎么管理的么？”</strong></p></blockquote><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">必须不知道啊！对我们来说该平台只是一个黑盒，会调接口即可。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">于是乎，一个让我头疼的问题出现了！</p><blockquote style=\"line-height: inherit;padding: 15px 15px 15px 1rem;font-size: 0.9em;color: rgb(0, 0, 0);border-left-width: 5px;border-left-color: rgb(239, 112, 96);background: rgb(239, 235, 233);overflow: auto;overflow-wrap: normal;word-break: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;\"><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">面试官：“如果让你设计这样一个平台，管理这些Session,你会怎么设计？”</strong> &nbsp;</p></blockquote><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">用redis来存储Session，用sessionId作为key，用session当value进行存储。<br  />OK，这时我头脑浮现的架构是这样的</p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361872.png\" alt=\"一次失败的面试，复习一次一致性哈希算法\" title=\"一次失败的面试，复习一次一致性哈希算法\"  /></p><blockquote style=\"line-height: inherit;padding: 15px 15px 15px 1rem;font-size: 0.9em;color: rgb(0, 0, 0);border-left-width: 5px;border-left-color: rgb(239, 112, 96);background: rgb(239, 235, 233);overflow: auto;overflow-wrap: normal;word-break: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;\"><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">面试官:\"如果redis挂了呢？\"</strong></p></blockquote><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">咦，这个时候，我突然懵了。面试官到底想问我什么？难道挂了，不是redis从服务器顶上么？这个问题莫非有什么玄机？</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">然后我是这样答的。<br  />一般情况，主redis挂了，由从redis顶上。如果redis某个slot的主从节点全挂了，<br  />那么我们在rediscluster中有一个配置叫</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code class=\"hljs coffeescript\" style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;padding: 0.5em;background: rgb(30, 30, 30);color: rgb(220, 220, 220);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\">cluster-<span class=\"hljs-built_in\" style=\"font-size: inherit;line-height: inherit;color: rgb(78, 201, 176);overflow-wrap: inherit !important;word-break: inherit !important;\">require</span>-full-coverage<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">当cluster-require-full-coverage为no时，表示当负责一个插槽的主库下线且没有相应的从库进行故障恢复时，集群仍然可用。但是该槽的相关命令不可用。<br  />当cluster-require-full-coverage为yes时，表示当负责一个插槽的主库下线且没有相应的从库进行故障恢复时，集群不可用。<br  />该值默认值为yes，也就是集群处于不可用的状态。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这个时候，可能出现了网络中断！</p><blockquote style=\"line-height: inherit;padding: 15px 15px 15px 1rem;font-size: 0.9em;color: rgb(0, 0, 0);border-left-width: 5px;border-left-color: rgb(239, 112, 96);background: rgb(239, 235, 233);overflow: auto;overflow-wrap: normal;word-break: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;\"><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">面试官:\"你的意思是，redis挂了，整个集群数据就不可用了？\"</strong></p></blockquote><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">我回答嗯嗯，是的！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这个时候，面试官</p><blockquote style=\"line-height: inherit;padding: 15px 15px 15px 1rem;font-size: 0.9em;color: rgb(0, 0, 0);border-left-width: 5px;border-left-color: rgb(239, 112, 96);background: rgb(239, 235, 233);overflow: auto;overflow-wrap: normal;word-break: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;\"><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">面试官:\"你不知道一致性哈希算法么？回去了解一下！\"</strong></p></blockquote><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">然后我突然懵了。原来是我想太多，他这样问完，我才get到他问的点。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">烟哥注</code>:所以我才说这个面试我有点失败，和面试官不在一个频道上。如果是现场面，可以现场画图，则不会出现这种问题！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">面试官想到的架构应该是这样的</p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361872.png\" alt=\"一次失败的面试，复习一次一致性哈希算法\" title=\"一次失败的面试，复习一次一致性哈希算法\"  /></p><br  />上图中，由于有4台服务器（排除从库），因此公式为hash(sessionId) % 4 = 2 ，可知定位到了第2号服务器。<p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">但是呢，普通的如果4台缓存服务器已经不能满足我们的缓存需求，那么我们应该怎么做呢？很简单，多增加几台缓存服务器不就行了！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">假设：我们增加了一台缓存服务器，那么缓存服务器的数量就由4台变成了5台。那么原本hash(sessionId) % 4 = 2 的公式就变成了hash(sessionId) % 5 = ？， 可想而知这个结果肯定不是2的，这种情况带来的结果就是当服务器数量变动时，所有缓存的位置都要发生改变！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">于是乎，他才想引我去答一致性哈希算法！总之，该死的破网络！导致两边不在一个频道上！</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">一致性哈希</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">既然都提到了一致性哈希算法了，就当复习一下吧～～<br  />一致性哈希算法的精髓只有一个:对2^32次方取模。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">我们将二的三十二次方想象成一个圆，这个圆上的数字就是即0~（2^32）-1。<br  />如下图所示</p><p style=\"text-align: center;\"><img class=\"rich_pages\"           style=\"width: 372px;height: 385px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361873.jpeg\" alt=\"一次失败的面试，复习一次一致性哈希算法\" title=\"一次失败的面试，复习一次一致性哈希算法\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这时候有三台缓存服务器A、B、C。<br  />我们<br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">hash（服务器A的IP地址） % &nbsp;2^32</strong></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">插播一下，写到这里，这里我又想起一道题了！</p><blockquote style=\"line-height: inherit;padding: 15px 15px 15px 1rem;font-size: 0.9em;color: rgb(0, 0, 0);border-left-width: 5px;border-left-color: rgb(239, 112, 96);background: rgb(239, 235, 233);overflow: auto;overflow-wrap: normal;word-break: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;\"><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">有哪些常见的hash算法啊？</strong></p></blockquote><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">OK，先继续我们的话题。经过上面的运算，我们算出的结果一定是一个0到2^32-1之间的一个整数，我们就用算出的这个整数，代表服务器A，既然这个整数肯定处于0到2^32-1之间，那么，上图中的hash环上必定有一个点与这个整数对应，我们使用这个整数代表服务器A，那么，服务器A就可以映射到这个环上。<br  />同理进行<br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">hash（服务器B的IP地址） % &nbsp;2^32</strong><br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">hash（服务器C的IP地址） % &nbsp;2^32</strong></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">于是，得到了下面这一张图</p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"width: 341px;height: 315px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585361873.png\" alt=\"一次失败的面试，复习一次一致性哈希算法\" title=\"一次失败的面试，复习一次一致性哈希算法\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">那么，我们要用服务器存储session，那么我们用sessionId做key，进行如下运算<br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">hash（sessionId） % &nbsp;2^32</strong><br  />得到的一个环上的值。那我们怎么知道session被存到哪个服务器上呢，OK，顺时针方向找到的第一个服务器就是。如下图所示</p><p style=\"text-align: center;\"><img class=\"rich_pages\"           style=\"width: 375px;height: 335px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361873.jpeg\" alt=\"一次失败的面试，复习一次一致性哈希算法\" title=\"一次失败的面试，复习一次一致性哈希算法\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">假设，我们现在有四个session，分别进行映射运算后得到如下的环</p><p style=\"text-align: center;\"><img class=\"rich_pages\"           style=\"width: 373px;height: 361px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361874.jpeg\" alt=\"一次失败的面试，复习一次一致性哈希算法\" title=\"一次失败的面试，复习一次一致性哈希算法\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">这么做的好处？</em><br  />使用一致性算法后，当服务器B移除的时候，服务器B上的数据会顺时针移动到服务器C上去。从而避免了当服务器数量发生改变当时候，所有的session都失效。<br  />如下所示</p><p style=\"text-align: center;\"><img class=\"rich_pages\"           style=\"width: 379px;height: 330px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361874.jpeg\" alt=\"一次失败的面试，复习一次一致性哈希算法\" title=\"一次失败的面试，复习一次一致性哈希算法\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">虚拟槽的应用？</em><br  />真实世界中，服务器可能映射的并不均匀。这就导致了数据可能是下面这样的，大量的数据在A服务器上，导致数据不均匀</p><p style=\"text-align: center;\"><img class=\"rich_pages\"           style=\"width: 364px;height: 362px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585361874.jpeg\" alt=\"一次失败的面试，复习一次一致性哈希算法\" title=\"一次失败的面试，复习一次一致性哈希算法\"  /></p><br  />为了解决这个问题，我们给A、B、C三台服务器引入虚拟节点。如下图所示(图中黄色节点为虚拟节点)<p style=\"text-align: center;\"><img class=\"rich_pages\"           style=\"width: 362px;height: 357px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361874-1.jpeg\" alt=\"一次失败的面试，复习一次一致性哈希算法\" title=\"一次失败的面试，复习一次一致性哈希算法\"  /></p><br  />如图所示，2号session和3号session映射到了虚拟B节点，就会存储到真实的B节点上。通过引入虚拟节点的方式，实现数据的均匀分配！<p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><br  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">最后，本文内容全当复习一次一致性哈希算法。希望大家有所收获。</p></section> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（孤独烟）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/VNr6pOygrzICXUi2YXRchA\" rel=\"noopener noreferrer\">一次失败的面试，复习一次一致性哈希算法</a></p></blockquote></div>', '一次失败的面试，复习一次一致性哈希算法', '', 'publish', 'open', 'open', '', '975b1930a8', '', '', '2020-03-28 10:17:55', '2020-03-28 02:17:55', '', 0, 'https://www.javashitang.com/?p=168', 0, 'post', '', 0);
INSERT INTO `wp_posts` VALUES (169, 1, '2020-03-28 10:17:50', '2020-03-28 02:17:50', '', 'beepress5-1585361870', '', 'inherit', 'open', 'closed', '', 'beepress5-1585361870', '', '', '2020-03-28 10:17:50', '2020-03-28 02:17:50', '', 168, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585361870.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (170, 1, '2020-03-28 10:17:51', '2020-03-28 02:17:51', '', 'beepress2-1585361871', '', 'inherit', 'open', 'closed', '', 'beepress2-1585361871', '', '', '2020-03-28 10:17:51', '2020-03-28 02:17:51', '', 168, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress2-1585361871.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (171, 1, '2020-03-28 10:17:51', '2020-03-28 02:17:51', '', 'beepress3-1585361871', '', 'inherit', 'open', 'closed', '', 'beepress3-1585361871', '', '', '2020-03-28 10:17:51', '2020-03-28 02:17:51', '', 168, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361871.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (172, 1, '2020-03-28 10:17:52', '2020-03-28 02:17:52', '', 'beepress9-1585361872', '', 'inherit', 'open', 'closed', '', 'beepress9-1585361872', '', '', '2020-03-28 10:17:52', '2020-03-28 02:17:52', '', 168, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361872.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (173, 1, '2020-03-28 10:17:52', '2020-03-28 02:17:52', '', 'beepress8-1585361872', '', 'inherit', 'open', 'closed', '', 'beepress8-1585361872', '', '', '2020-03-28 10:17:52', '2020-03-28 02:17:52', '', 168, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361872.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (174, 1, '2020-03-28 10:17:53', '2020-03-28 02:17:53', '', 'beepress9-1585361873', '', 'inherit', 'open', 'closed', '', 'beepress9-1585361873', '', '', '2020-03-28 10:17:53', '2020-03-28 02:17:53', '', 168, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361873.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (175, 1, '2020-03-28 10:17:53', '2020-03-28 02:17:53', '', 'beepress5-1585361873', '', 'inherit', 'open', 'closed', '', 'beepress5-1585361873', '', '', '2020-03-28 10:17:53', '2020-03-28 02:17:53', '', 168, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585361873.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (176, 1, '2020-03-28 10:17:53', '2020-03-28 02:17:53', '', 'beepress3-1585361873', '', 'inherit', 'open', 'closed', '', 'beepress3-1585361873', '', '', '2020-03-28 10:17:53', '2020-03-28 02:17:53', '', 168, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361873.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (177, 1, '2020-03-28 10:17:54', '2020-03-28 02:17:54', '', 'beepress0-1585361874', '', 'inherit', 'open', 'closed', '', 'beepress0-1585361874', '', '', '2020-03-28 10:17:54', '2020-03-28 02:17:54', '', 168, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361874.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (178, 1, '2020-03-28 10:17:54', '2020-03-28 02:17:54', '', 'beepress4-1585361874', '', 'inherit', 'open', 'closed', '', 'beepress4-1585361874', '', '', '2020-03-28 10:17:54', '2020-03-28 02:17:54', '', 168, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361874.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (179, 1, '2020-03-28 10:17:54', '2020-03-28 02:17:54', '', 'beepress7-1585361874', '', 'inherit', 'open', 'closed', '', 'beepress7-1585361874', '', '', '2020-03-28 10:17:54', '2020-03-28 02:17:54', '', 168, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585361874.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (180, 1, '2020-03-28 10:17:54', '2020-03-28 02:17:54', '', 'beepress0-1585361874-1', '', 'inherit', 'open', 'closed', '', 'beepress0-1585361874-1', '', '', '2020-03-28 10:17:54', '2020-03-28 02:17:54', '', 168, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361874-1.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (181, 1, '2020-03-28 10:17:55', '2020-03-28 02:17:55', '<div class=\"bpp-post-content\">                                                                                                                            <p><br  /></p><section class=\"output_wrapper\" style=\"font-size: 15px;color: rgb(62, 62, 62);line-height: 1.8;word-spacing: 2px;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">本文故事绝对真实，如有雷同，绝对不是巧合！<br  />话说前几天有一次，某大厂的二面。然后呢，烟哥那天刚好有事，所以去不了。于是就约了一场视频面试了！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">于是呢，烟哥提前十分钟在公司里头找了一个<strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">厕所</strong>的坑位，然后进去随手一锁门….(以下省略10000字)…</p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress2-1585361871.jpeg\" alt=\"一次失败的面试，复习一次一致性哈希算法\" title=\"一次失败的面试，复习一次一致性哈希算法\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">唉…<br  />我竟然…<br  />我竟然…</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">我竟然又<strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">带薪上厕所了</strong>，而且上了一小时！我有罪！</p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361871.jpeg\" alt=\"一次失败的面试，复习一次一致性哈希算法\" title=\"一次失败的面试，复习一次一致性哈希算法\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">额，是这样的，大厂的厕所是有雅间的。所以环境还马马虎虎，鼻子还是正常的！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">OK，交待完背景，然后开始我们的主题！</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">全局Session</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">当时的情形是这样的，先介绍一下自己的项目。然后介绍完项目背景以后，因为有一个登陆模块。于是乎有了如下问题</p><blockquote style=\"line-height: inherit;padding: 15px 15px 15px 1rem;font-size: 0.9em;color: rgb(0, 0, 0);border-left-width: 5px;border-left-color: rgb(239, 112, 96);background: rgb(239, 235, 233);overflow: auto;overflow-wrap: normal;word-break: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;\"><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">面试官：“先说说全局Session干嘛用的，你们那边全局session是怎么做的？”</strong></p></blockquote><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这个问题还是很容易的。因为一个应用通常有多台服务器，在登陆成功后，Session只会在其中某一台存储。需要想办法让多台服务器都识别到这个Session，因此才有了这个全局Session的概念。我们用的是<em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">后端统一存储</em>的策略，有专门的用户管理系统，上面存储着用户信息以及Session状态。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">烟哥注</code>:目前业内在解决全局Sesssion上无外乎四种方法</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(1)服务端自己进行同步，例如早期的项目，大概是07年那会的(我司老古董项目啊)，那会Tomcat的集群能力不行。用的是Weblogic服务器，使用的就是Weblogic的Session复制功能。</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(2)客户端存储法，将session存储到浏览器cookie中，每次http请求都带session。这里摸着良心坦白说，该方案从没用过，安全性太差。</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(3)反向代理hash一致性，不需要修改应用代码。修改nginx的配置，保证同一个ip的请求落在同一个web-server上即可。</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(4)后端统一存储，后端统一找一个中间件将Session存起来即可，这个中间件是数据库或者缓存。</span></p></li></ul><blockquote style=\"line-height: inherit;padding: 15px 15px 15px 1rem;font-size: 0.9em;color: rgb(0, 0, 0);border-left-width: 5px;border-left-color: rgb(239, 112, 96);background: rgb(239, 235, 233);overflow: auto;overflow-wrap: normal;word-break: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;\"><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">面试官：“那你知道这个平台里Session怎么管理的么？”</strong></p></blockquote><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">必须不知道啊！对我们来说该平台只是一个黑盒，会调接口即可。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">于是乎，一个让我头疼的问题出现了！</p><blockquote style=\"line-height: inherit;padding: 15px 15px 15px 1rem;font-size: 0.9em;color: rgb(0, 0, 0);border-left-width: 5px;border-left-color: rgb(239, 112, 96);background: rgb(239, 235, 233);overflow: auto;overflow-wrap: normal;word-break: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;\"><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">面试官：“如果让你设计这样一个平台，管理这些Session,你会怎么设计？”</strong> &nbsp;</p></blockquote><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">用redis来存储Session，用sessionId作为key，用session当value进行存储。<br  />OK，这时我头脑浮现的架构是这样的</p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361872.png\" alt=\"一次失败的面试，复习一次一致性哈希算法\" title=\"一次失败的面试，复习一次一致性哈希算法\"  /></p><blockquote style=\"line-height: inherit;padding: 15px 15px 15px 1rem;font-size: 0.9em;color: rgb(0, 0, 0);border-left-width: 5px;border-left-color: rgb(239, 112, 96);background: rgb(239, 235, 233);overflow: auto;overflow-wrap: normal;word-break: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;\"><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">面试官:\"如果redis挂了呢？\"</strong></p></blockquote><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">咦，这个时候，我突然懵了。面试官到底想问我什么？难道挂了，不是redis从服务器顶上么？这个问题莫非有什么玄机？</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">然后我是这样答的。<br  />一般情况，主redis挂了，由从redis顶上。如果redis某个slot的主从节点全挂了，<br  />那么我们在rediscluster中有一个配置叫</p><pre style=\"font-size: inherit;color: inherit;line-height: inherit;\"><code class=\"hljs coffeescript\" style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;padding: 0.5em;background: rgb(30, 30, 30);color: rgb(220, 220, 220);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\">cluster-<span class=\"hljs-built_in\" style=\"font-size: inherit;line-height: inherit;color: rgb(78, 201, 176);overflow-wrap: inherit !important;word-break: inherit !important;\">require</span>-full-coverage<br  /></code></pre><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">当cluster-require-full-coverage为no时，表示当负责一个插槽的主库下线且没有相应的从库进行故障恢复时，集群仍然可用。但是该槽的相关命令不可用。<br  />当cluster-require-full-coverage为yes时，表示当负责一个插槽的主库下线且没有相应的从库进行故障恢复时，集群不可用。<br  />该值默认值为yes，也就是集群处于不可用的状态。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这个时候，可能出现了网络中断！</p><blockquote style=\"line-height: inherit;padding: 15px 15px 15px 1rem;font-size: 0.9em;color: rgb(0, 0, 0);border-left-width: 5px;border-left-color: rgb(239, 112, 96);background: rgb(239, 235, 233);overflow: auto;overflow-wrap: normal;word-break: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;\"><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">面试官:\"你的意思是，redis挂了，整个集群数据就不可用了？\"</strong></p></blockquote><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">我回答嗯嗯，是的！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这个时候，面试官</p><blockquote style=\"line-height: inherit;padding: 15px 15px 15px 1rem;font-size: 0.9em;color: rgb(0, 0, 0);border-left-width: 5px;border-left-color: rgb(239, 112, 96);background: rgb(239, 235, 233);overflow: auto;overflow-wrap: normal;word-break: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;\"><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">面试官:\"你不知道一致性哈希算法么？回去了解一下！\"</strong></p></blockquote><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">然后我突然懵了。原来是我想太多，他这样问完，我才get到他问的点。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">烟哥注</code>:所以我才说这个面试我有点失败，和面试官不在一个频道上。如果是现场面，可以现场画图，则不会出现这种问题！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">面试官想到的架构应该是这样的</p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361872.png\" alt=\"一次失败的面试，复习一次一致性哈希算法\" title=\"一次失败的面试，复习一次一致性哈希算法\"  /></p><br  />上图中，由于有4台服务器（排除从库），因此公式为hash(sessionId) % 4 = 2 ，可知定位到了第2号服务器。<p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">但是呢，普通的如果4台缓存服务器已经不能满足我们的缓存需求，那么我们应该怎么做呢？很简单，多增加几台缓存服务器不就行了！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">假设：我们增加了一台缓存服务器，那么缓存服务器的数量就由4台变成了5台。那么原本hash(sessionId) % 4 = 2 的公式就变成了hash(sessionId) % 5 = ？， 可想而知这个结果肯定不是2的，这种情况带来的结果就是当服务器数量变动时，所有缓存的位置都要发生改变！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">于是乎，他才想引我去答一致性哈希算法！总之，该死的破网络！导致两边不在一个频道上！</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">一致性哈希</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">既然都提到了一致性哈希算法了，就当复习一下吧～～<br  />一致性哈希算法的精髓只有一个:对2^32次方取模。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">我们将二的三十二次方想象成一个圆，这个圆上的数字就是即0~（2^32）-1。<br  />如下图所示</p><p style=\"text-align: center;\"><img class=\"rich_pages\"           style=\"width: 372px;height: 385px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361873.jpeg\" alt=\"一次失败的面试，复习一次一致性哈希算法\" title=\"一次失败的面试，复习一次一致性哈希算法\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这时候有三台缓存服务器A、B、C。<br  />我们<br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">hash（服务器A的IP地址） % &nbsp;2^32</strong></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">插播一下，写到这里，这里我又想起一道题了！</p><blockquote style=\"line-height: inherit;padding: 15px 15px 15px 1rem;font-size: 0.9em;color: rgb(0, 0, 0);border-left-width: 5px;border-left-color: rgb(239, 112, 96);background: rgb(239, 235, 233);overflow: auto;overflow-wrap: normal;word-break: normal;\"><p style=\"font-size: inherit;color: inherit;line-height: inherit;\"><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">有哪些常见的hash算法啊？</strong></p></blockquote><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">OK，先继续我们的话题。经过上面的运算，我们算出的结果一定是一个0到2^32-1之间的一个整数，我们就用算出的这个整数，代表服务器A，既然这个整数肯定处于0到2^32-1之间，那么，上图中的hash环上必定有一个点与这个整数对应，我们使用这个整数代表服务器A，那么，服务器A就可以映射到这个环上。<br  />同理进行<br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">hash（服务器B的IP地址） % &nbsp;2^32</strong><br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">hash（服务器C的IP地址） % &nbsp;2^32</strong></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">于是，得到了下面这一张图</p><p style=\"text-align: center;\"><img class=\"rich_pages\"      style=\"width: 341px;height: 315px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585361873.png\" alt=\"一次失败的面试，复习一次一致性哈希算法\" title=\"一次失败的面试，复习一次一致性哈希算法\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">那么，我们要用服务器存储session，那么我们用sessionId做key，进行如下运算<br  /><strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">hash（sessionId） % &nbsp;2^32</strong><br  />得到的一个环上的值。那我们怎么知道session被存到哪个服务器上呢，OK，顺时针方向找到的第一个服务器就是。如下图所示</p><p style=\"text-align: center;\"><img class=\"rich_pages\"           style=\"width: 375px;height: 335px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361873.jpeg\" alt=\"一次失败的面试，复习一次一致性哈希算法\" title=\"一次失败的面试，复习一次一致性哈希算法\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">假设，我们现在有四个session，分别进行映射运算后得到如下的环</p><p style=\"text-align: center;\"><img class=\"rich_pages\"           style=\"width: 373px;height: 361px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361874.jpeg\" alt=\"一次失败的面试，复习一次一致性哈希算法\" title=\"一次失败的面试，复习一次一致性哈希算法\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">这么做的好处？</em><br  />使用一致性算法后，当服务器B移除的时候，服务器B上的数据会顺时针移动到服务器C上去。从而避免了当服务器数量发生改变当时候，所有的session都失效。<br  />如下所示</p><p style=\"text-align: center;\"><img class=\"rich_pages\"           style=\"width: 379px;height: 330px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361874.jpeg\" alt=\"一次失败的面试，复习一次一致性哈希算法\" title=\"一次失败的面试，复习一次一致性哈希算法\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">虚拟槽的应用？</em><br  />真实世界中，服务器可能映射的并不均匀。这就导致了数据可能是下面这样的，大量的数据在A服务器上，导致数据不均匀</p><p style=\"text-align: center;\"><img class=\"rich_pages\"           style=\"width: 364px;height: 362px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress7-1585361874.jpeg\" alt=\"一次失败的面试，复习一次一致性哈希算法\" title=\"一次失败的面试，复习一次一致性哈希算法\"  /></p><br  />为了解决这个问题，我们给A、B、C三台服务器引入虚拟节点。如下图所示(图中黄色节点为虚拟节点)<p style=\"text-align: center;\"><img class=\"rich_pages\"           style=\"width: 362px;height: 357px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361874-1.jpeg\" alt=\"一次失败的面试，复习一次一致性哈希算法\" title=\"一次失败的面试，复习一次一致性哈希算法\"  /></p><br  />如图所示，2号session和3号session映射到了虚拟B节点，就会存储到真实的B节点上。通过引入虚拟节点的方式，实现数据的均匀分配！<p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><br  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">最后，本文内容全当复习一次一致性哈希算法。希望大家有所收获。</p></section> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（孤独烟）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/VNr6pOygrzICXUi2YXRchA\" rel=\"noopener noreferrer\">一次失败的面试，复习一次一致性哈希算法</a></p></blockquote></div>', '一次失败的面试，复习一次一致性哈希算法', '', 'inherit', 'closed', 'closed', '', '168-revision-v1', '', '', '2020-03-28 10:17:55', '2020-03-28 02:17:55', '', 168, 'https://www.javashitang.com/?p=181', 0, 'revision', '', 0);
INSERT INTO `wp_posts` VALUES (182, 1, '2019-08-22 05:51:51', '2020-03-28 02:18:30', '<div class=\"bpp-post-content\">                                                                                                                            <p><br  /></p><section class=\"output_wrapper\" style=\"font-size: 15px;color: rgb(62, 62, 62);line-height: 1.8;word-spacing: 2px;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\"><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">引言</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">今天我们来聊聊DNS。<br  />所谓域名系统（Domain Name System缩写DNS，Domain Name被译为域名）是因特网的一项核心服务，它作为可以将域名和IP地址相互映射的一个分布式数据库,可以balabala..省略一万字不表，因为这都不是重点！<br  />重点只有一个，<strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">大厂经常问！</strong><br  />没错，正是因为DNS包含着很多大厂常考面试知识点！因此，烟哥认为很有必要再开一文说明。</p><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">正文</span></h2><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">概念</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">DNS 的全称是 Domain Name System 或者 Domain Name Service，它主要的作用就是将人们所熟悉的网址 (域名) “翻译”成电脑可以理解的 IP 地址，这个过程叫做 DNS 域名解析。<br  />打个比方，我们登百度的地址的时候，都是敲<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">www.baidu.com</code>，进行登陆，难道你会去敲IP地址登百度？明显，域名容易记忆。<br  />而且，一个域名往往对应多个DNS地址，如下图所示</p><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361911.jpg\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><br  />如果要全部都记住，嗯，我相信兄台记忆力一定十分惊人！<h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">流程</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">接下来，就不得不说一道经典面试题了</p><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585361911.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p>其实回答很简单(俗称天龙八步)<ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">1.根据域名，进行DNS域名解析；</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">2.拿到解析的IP地址，建立TCP连接；</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">3.向IP地址，发送HTTP请求；</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">4.服务器处理请求；</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">5.返回响应结果；</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">6.关闭TCP连接；</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">7.浏览器解析HTML；</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">8.浏览器布局渲染；</span></p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">ps:</code>由于本文不是讲HTTP请求，我提几个思考题，读者自己去思考(没错，我就是故意不说，咬我啊！)</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">1、一个 TCP 连接可以对应几个 HTTP 请求？(提示，这在问你HTTP1.0和1.1的区别)</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">2、一个 TCP 连接中 HTTP 请求发送可以一起发送么（比如一起发三个请求，再三个响应一起接收）？(提示，这就是在问你HTTP2.0和HTTP1.1协议的区别)</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">3、浏览器对同一Host建立TCP连接到数量有没有限制？(拜托，一个网站那么多图片，开一个TCP连接，按顺序下载？那不是等到死？)</span></p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">好了，不扯了，本文不是在讲Http协议。<br  />下面我们着重来说DNS解析这块</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">解析</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">OK，着重说DNS解析这块，流程图如下</p><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361912.jpg\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><br  />如图所示，大致就是:浏览器输入地址，然后浏览器这个进程去调操作系统某个库里的gethostbyname函数(例如，Linux GNU glibc标准库的gethostbyname函数)，然后呢这个函数通过网卡给DNS服务器发UDP请求，接收结果，然后将结果给返回给浏览器。<p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这张图其实已经讲明白大致的流程，但是细节上可能有些差异。<br  />例如</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(1)我们在用chrome浏览器的时候，其实会先去浏览器的dns缓存里头查询，dns缓存中没有，再去调用gethostbyname函数</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(2)gethostbyname函数在试图进行DNS解析之前首先检查域名是否在本地 Hosts 里，如果没找到再去DNS服务器上查</span></p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">不过，看到这里！请回忆下这两道面试题？</p><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361912.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p>现在，会回答了么？<p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">什么，你还不懂怎么答？把文章拉到开头。从头看过。<br  />不过呢，需要补充说明一下，DNS中也有一个地方用到了TCP协议。那就是<strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">区域传送</strong>！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">DNS的规范规定了2种类型的DNS服务器，一个叫主DNS服务器，一个叫辅助DNS服务器。在一个区中主DNS服务器从自己本机的数据文件中读取该区的DNS数据信息，而辅助DNS服务器则从区的主DNS服务器中读取该区的DNS数据信息。当一个辅助DNS服务器启动时，它需要与主DNS服务器通信，并加载数据信息，这就叫做区传送（zone transfer）。这种情况下，使用TCP协议。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">讲到这里。其实面试官是可以深入追问的，如下所示</p><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361913.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">针对第一问，<em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">为什么域名解析用UDP协议?</em><br  />因为UDP快啊！UDP的DNS协议只要一个请求、一个应答就好了。而使用基于TCP的DNS协议要三次握手、发送数据以及应答、四次挥手。但是UDP协议传输内容不能超过512字节。不过客户端向DNS服务器查询域名，一般返回的内容都不超过512字节，用UDP传输即可。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">针对第二问，<em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">为什么区域传送用TCP协议？</em><br  />因为TCP协议可靠性好啊！你要从主DNS上复制内容啊，你用不可靠的UDP？<br  />因为TCP协议传输的内容大啊，你用最大只能传512字节的UDP协议？万一同步的数据大于512字节，你怎么办？</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">讲到这里，我突然想到一个段子(没办法，头脑中知识太多)！</p><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361914.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><br  />这个问题，我们这里当段子来讲，改天写一篇《TCP/IP面试指南》！<br  />三次握手：</section><section class=\"output_wrapper\" style=\"line-height: 1.8;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\"><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361914-1.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><span style=\"color:#3e3e3e;font-family:Helvetica Neue, Helvetica, Hiragino Sans GB, Microsoft YaHei, Arial, sans-serif;\"><span style=\"font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">两次握手:</span></span></section><section class=\"output_wrapper\" style=\"line-height: 1.8;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\"><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361915.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><span style=\"color:#3e3e3e;font-family:Helvetica Neue, Helvetica, Hiragino Sans GB, Microsoft YaHei, Arial, sans-serif;\"><span style=\"font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">四次握手：</span></span></section><section class=\"output_wrapper\" style=\"line-height: 1.8;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\"><p style=\"text-align: center;\"><img class=\"rich_pages\"     style=\"\"   src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361915.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><p><span style=\"color: rgb(153, 153, 153);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 11.9px;letter-spacing: 2px;word-spacing: 2px;\"></span></p><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">所以啊。三次握手资源最省(当段子看看就好)！扯回我们的DNS话题！</span></p><h3 style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 1.3em;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">原理</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">现在，讲最后一块DNS解析域名的原理！这块是重中之重！</span><br  /><span style=\"font-size: 15px;\">先介绍linux下一个</span><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">dig</span></code><span style=\"font-size: 15px;\">命令，以显示解析域名的过程。</span><br  /><span style=\"font-size: 15px;\">为了便于说明，我们来</span><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">dig</span></code><span style=\"font-size: 15px;\">一下天猫的过程</span></p><pre style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;\"><code class=\"hljs css\" style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;padding: 0.5em;background: rgb(30, 30, 30);color: rgb(220, 220, 220);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span class=\"hljs-selector-tag\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">dig</span>&nbsp;<span class=\"hljs-selector-tag\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">www.tmall.com</span><br  /></code></pre><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">结果如下图所示</span><br  /></p><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361916.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><br  /><span style=\"letter-spacing: 2px;word-spacing: 2px;color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;\">莫方，看不懂没事。</span><br  /><span style=\"letter-spacing: 2px;word-spacing: 2px;color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;\">现在我们来读重点的两段。第一段代表请求参数如下图所示</span><span style=\"letter-spacing: 2px;word-spacing: 2px;color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 17px;\"></span></section><section class=\"output_wrapper\" style=\"line-height: 1.8;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\"><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"width: 574px;height: 67px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361916.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><p><span style=\"font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;color: rgb(153, 153, 153);letter-spacing: 2px;word-spacing: 2px;font-size: 11.9px;\"></span></p><br  /><span style=\"letter-spacing: 2px;word-spacing: 2px;color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;\">这段为查询内容。</span><br  /><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 15px;\">DNS的查询参数一般有三个</span><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: 15px;color: inherit;line-height: inherit;\">(1)域名:服务器、邮件服务器(邮件地址中 @ 后面的部分)的名称</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 15px;\">(2)Class:在设置DNS方案时，互联网之外的网络也考虑到了，而Class就是用来识别网络的，不过现在只有互联网，所以它的值永远都是代表互联网的IN</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 15px;\">(3)记录类型:标识域名对应何种类型的记录。类型为A,表示域名对应的IP地址。类型为MX时,表示域名对应的是邮件服务器。类型为PTR,表示根据IP地址反查域名。类型为CNAME,表示查询域名相关别名。</span></p></li></ul><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">当然，你这个时候要问我一个问题啦(注意上图红框)</span><br  /><span style=\"font-size: 15px;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">烟哥，我输入的明明是www.tmall.com可是命令里解析的地址是www.tmall.com.啊,多了一个.的符号啊?这个.符号是什么意思呢？</em></span><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\"></em></p><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">于是乎，又扯了一道经典面试题</span></p><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"width: 574px;height: 147px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361916.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">OK，好，要讲明白这个问题。</span><span style=\"font-size: 15px;\">我们要先把域名的结构讲清楚！</span><br  /><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">www.tmall.com</span></code><span style=\"font-size: 15px;\">对应的真正的域名为</span><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">www.tmall.com.</span></code><span style=\"font-size: 15px;\">。</span><span style=\"font-size: 15px;\">末尾的</span><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">.</span></code><span style=\"font-size: 15px;\">称为根域名，因为每个域名都有根域名，因此我们通常省略。</span></p><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">根域名的下一级，叫做\"顶级域名\"（top-level domain，缩写为TLD），比如</span><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">.com、.net</span></code><span style=\"font-size: 15px;\">；</span></p><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">再下一级叫做\"次级域名\"（second-level domain，缩写为SLD），比如</span><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">www.tmall.com</span></code><span style=\"font-size: 15px;\">里面的</span><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">.tmall</span></code><span style=\"font-size: 15px;\">，这一级域名是用户可以注册的；</span></p><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">再下一级是主机名（host），比如</span><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">www.tmall.com</span></code><span style=\"font-size: 15px;\">里面的</span><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">www</span></code><span style=\"font-size: 15px;\">，又称为\"三级域名\"，这是用户在自己的域里面为服务器分配的名称，是用户可以任意分配的。</span></p><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">那么解析流程就是<strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">分级查询</strong>！</span><br  /><span style=\"font-size: 15px;\"> (1)先在本机的DNS里头查，如果存在就直接返回了。</span><span style=\"font-size: 15px;\">本机DNS就是下面这个东东</span></p><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361916.jpg\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><br  /><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 15px;\">(2)本机DNS里头发现没有，就去根服务器里查。根服务器发现这个域名是属于</span><code style=\"color: rgb(248, 35, 117);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">com</span></code><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 15px;\">域，因此根域DNS服务器会返回它所管理的</span><code style=\"color: rgb(248, 35, 117);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">com</span></code><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 15px;\">域中的DNS 服务器的IP地址，意思是“虽然我不知道你要查的那个域名的地址，但你可以去</span><code style=\"color: rgb(248, 35, 117);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">com</span></code><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 15px;\">域问问看”</span><br  /><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 15px;\"> (3)本机的DNS接到又会向</span><code style=\"color: rgb(248, 35, 117);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">com</span></code><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 15px;\">域的DNS服务器发送查询消息。</span><code style=\"color: rgb(248, 35, 117);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">com</span></code><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 15px;\"> 域中也没有</span><code style=\"color: rgb(248, 35, 117);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">www.tmall.com</span></code><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 15px;\">这个域名的信息，和刚才一样，</span><code style=\"color: rgb(248, 35, 117);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">com</span></code><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 15px;\">域服务器会返回它下面的</span><code style=\"color: rgb(248, 35, 117);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">tmall.com</span></code><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 15px;\">域的DNS服务器的IP地址。</span><br  /><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 15px;\">以此类推，只要重复前面的步骤，就可以顺藤摸瓜找到目标DNS服务器</span><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 17px;\"></span><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">ps</span></code><span style=\"font-size: 15px;\">:温馨提醒，</span><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">dig +trace www.tmall.com</span></code><span style=\"font-size: 15px;\"> 可以看到解析过程。</span><span style=\"font-size: 15px;\">有兴趣的读者，自己实验一下。</span></p><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">扯了那么多东西，我们来看第二段内容，也就是响应体的部分！</span><br  /><span style=\"font-size: 15px;\">如下所示</span></p><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress2-1585361917.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><br  /><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">很明显，第一行就是说</span><code style=\"color: rgb(248, 35, 117);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background: rgb(248, 248, 248);\">www.tmall.com</code><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">这个域名地址拥有一个别名是</span><code style=\"color: rgb(248, 35, 117);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background: rgb(248, 248, 248);\">www.tmall.com.danuoyi.tbcache.com</code><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">。那么，很显然，后面几行就是这个</span><code style=\"color: rgb(248, 35, 117);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background: rgb(248, 248, 248);\">www.tmall.com.danuoyi.tbcache.com</code><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">地址的真实IP。</span><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">为什么天猫要设一个别名到www.tmall.com.danuoyi.tbcache.com地址呢？</em><br  />于是乎，又一道经典面试题出现</p><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361917.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><br  /><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">说句实在话，我当初第一眼，见到这题的时候，我觉得应该是方便cdn配置。</span><br  /><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">回到我们的例子，如果烟哥的猜测正确，</span><code style=\"color: rgb(248, 35, 117);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background: rgb(248, 248, 248);\">www.tmall.com.danuoyi.tbcache.com</code><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">这个地址，应该是淘宝的一个cdn地址。</span><br  /><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">因此，我特意去查了域名备案记录。如下图所示</span></section><section class=\"output_wrapper\" style=\"line-height: 1.8;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\"><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361917.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">果然，就是一个淘宝的cdn环境。</span><br  /><em style=\"color: rgb(98, 0, 234);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;\">那么这么配有什么好处呢？</em><br  /><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">唉，这题当思考题，快过来探讨留言！</span><h2 style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 1.4em;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">总结</span></h2><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">本文讲了DNS的一些常见知识点，希望大家有所收获。</span><span style=\"font-size: 15px;\">如果有其他关于DNS的问题，欢迎留言咨询。</span></p><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">(啊，呸，我就随便说说，不要当真，千万别问，万一我不会，不是暴露了我是个水货)</span>！</p></section> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（孤独烟）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/4LYtnFe8Ry-WBydTISUI4A\" rel=\"noopener noreferrer\">关于DNS不得不说的一些事</a></p></blockquote></div>', '关于DNS不得不说的一些事', '', 'publish', 'open', 'open', '', '112856f981', '', '', '2020-03-28 10:18:38', '2020-03-28 02:18:38', '', 0, 'https://www.javashitang.com/?p=182', 0, 'post', '', 0);
INSERT INTO `wp_posts` VALUES (183, 1, '2020-03-28 10:18:30', '2020-03-28 02:18:30', '', 'beepress5-1585361910', '', 'inherit', 'open', 'closed', '', 'beepress5-1585361910', '', '', '2020-03-28 10:18:30', '2020-03-28 02:18:30', '', 182, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585361910.jpeg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (184, 1, '2020-03-28 10:18:31', '2020-03-28 02:18:31', '', 'beepress3-1585361911', '', 'inherit', 'open', 'closed', '', 'beepress3-1585361911', '', '', '2020-03-28 10:18:31', '2020-03-28 02:18:31', '', 182, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361911.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (185, 1, '2020-03-28 10:18:31', '2020-03-28 02:18:31', '', 'beepress5-1585361911', '', 'inherit', 'open', 'closed', '', 'beepress5-1585361911', '', '', '2020-03-28 10:18:31', '2020-03-28 02:18:31', '', 182, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585361911.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (186, 1, '2020-03-28 10:18:32', '2020-03-28 02:18:32', '', 'beepress1-1585361912', '', 'inherit', 'open', 'closed', '', 'beepress1-1585361912', '', '', '2020-03-28 10:18:32', '2020-03-28 02:18:32', '', 182, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361912.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (187, 1, '2020-03-28 10:18:32', '2020-03-28 02:18:32', '', 'beepress3-1585361912', '', 'inherit', 'open', 'closed', '', 'beepress3-1585361912', '', '', '2020-03-28 10:18:32', '2020-03-28 02:18:32', '', 182, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361912.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (188, 1, '2020-03-28 10:18:33', '2020-03-28 02:18:33', '', 'beepress0-1585361913', '', 'inherit', 'open', 'closed', '', 'beepress0-1585361913', '', '', '2020-03-28 10:18:33', '2020-03-28 02:18:33', '', 182, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361913.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (189, 1, '2020-03-28 10:18:34', '2020-03-28 02:18:34', '', 'beepress8-1585361914', '', 'inherit', 'open', 'closed', '', 'beepress8-1585361914', '', '', '2020-03-28 10:18:34', '2020-03-28 02:18:34', '', 182, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361914.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (190, 1, '2020-03-28 10:18:34', '2020-03-28 02:18:34', '', 'beepress8-1585361914-1', '', 'inherit', 'open', 'closed', '', 'beepress8-1585361914-1', '', '', '2020-03-28 10:18:34', '2020-03-28 02:18:34', '', 182, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361914-1.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (191, 1, '2020-03-28 10:18:35', '2020-03-28 02:18:35', '', 'beepress4-1585361915', '', 'inherit', 'open', 'closed', '', 'beepress4-1585361915', '', '', '2020-03-28 10:18:35', '2020-03-28 02:18:35', '', 182, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361915.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (192, 1, '2020-03-28 10:18:35', '2020-03-28 02:18:35', '', 'beepress9-1585361915', '', 'inherit', 'open', 'closed', '', 'beepress9-1585361915', '', '', '2020-03-28 10:18:35', '2020-03-28 02:18:35', '', 182, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361915.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (193, 1, '2020-03-28 10:18:36', '2020-03-28 02:18:36', '', 'beepress10-1585361916', '', 'inherit', 'open', 'closed', '', 'beepress10-1585361916', '', '', '2020-03-28 10:18:36', '2020-03-28 02:18:36', '', 182, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361916.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (194, 1, '2020-03-28 10:18:36', '2020-03-28 02:18:36', '', 'beepress4-1585361916', '', 'inherit', 'open', 'closed', '', 'beepress4-1585361916', '', '', '2020-03-28 10:18:36', '2020-03-28 02:18:36', '', 182, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361916.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (195, 1, '2020-03-28 10:18:36', '2020-03-28 02:18:36', '', 'beepress3-1585361916', '', 'inherit', 'open', 'closed', '', 'beepress3-1585361916', '', '', '2020-03-28 10:18:36', '2020-03-28 02:18:36', '', 182, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361916.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (196, 1, '2020-03-28 10:18:36', '2020-03-28 02:18:36', '', 'beepress0-1585361916', '', 'inherit', 'open', 'closed', '', 'beepress0-1585361916', '', '', '2020-03-28 10:18:36', '2020-03-28 02:18:36', '', 182, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361916.jpg', 0, 'attachment', 'image/jpeg', 0);
INSERT INTO `wp_posts` VALUES (197, 1, '2020-03-28 10:18:37', '2020-03-28 02:18:37', '', 'beepress2-1585361917', '', 'inherit', 'open', 'closed', '', 'beepress2-1585361917', '', '', '2020-03-28 10:18:37', '2020-03-28 02:18:37', '', 182, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress2-1585361917.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (198, 1, '2020-03-28 10:18:37', '2020-03-28 02:18:37', '', 'beepress3-1585361917', '', 'inherit', 'open', 'closed', '', 'beepress3-1585361917', '', '', '2020-03-28 10:18:37', '2020-03-28 02:18:37', '', 182, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361917.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (199, 1, '2020-03-28 10:18:37', '2020-03-28 02:18:37', '', 'beepress9-1585361917', '', 'inherit', 'open', 'closed', '', 'beepress9-1585361917', '', '', '2020-03-28 10:18:37', '2020-03-28 02:18:37', '', 182, 'https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361917.png', 0, 'attachment', 'image/png', 0);
INSERT INTO `wp_posts` VALUES (200, 1, '2020-03-28 10:18:38', '2020-03-28 02:18:38', '<div class=\"bpp-post-content\">                                                                                                                            <p><br  /></p><section class=\"output_wrapper\" style=\"font-size: 15px;color: rgb(62, 62, 62);line-height: 1.8;word-spacing: 2px;letter-spacing: 2px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\"><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">引言</span></h2><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">今天我们来聊聊DNS。<br  />所谓域名系统（Domain Name System缩写DNS，Domain Name被译为域名）是因特网的一项核心服务，它作为可以将域名和IP地址相互映射的一个分布式数据库,可以balabala..省略一万字不表，因为这都不是重点！<br  />重点只有一个，<strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">大厂经常问！</strong><br  />没错，正是因为DNS包含着很多大厂常考面试知识点！因此，烟哥认为很有必要再开一文说明。</p><h2 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;font-size: 1.4em;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">正文</span></h2><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">概念</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">DNS 的全称是 Domain Name System 或者 Domain Name Service，它主要的作用就是将人们所熟悉的网址 (域名) “翻译”成电脑可以理解的 IP 地址，这个过程叫做 DNS 域名解析。<br  />打个比方，我们登百度的地址的时候，都是敲<code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">www.baidu.com</code>，进行登陆，难道你会去敲IP地址登百度？明显，域名容易记忆。<br  />而且，一个域名往往对应多个DNS地址，如下图所示</p><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361911.jpg\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><br  />如果要全部都记住，嗯，我相信兄台记忆力一定十分惊人！<h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">流程</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">接下来，就不得不说一道经典面试题了</p><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress5-1585361911.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p>其实回答很简单(俗称天龙八步)<ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">1.根据域名，进行DNS域名解析；</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">2.拿到解析的IP地址，建立TCP连接；</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">3.向IP地址，发送HTTP请求；</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">4.服务器处理请求；</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">5.返回响应结果；</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">6.关闭TCP连接；</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">7.浏览器解析HTML；</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">8.浏览器布局渲染；</span></p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\">ps:</code>由于本文不是讲HTTP请求，我提几个思考题，读者自己去思考(没错，我就是故意不说，咬我啊！)</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">1、一个 TCP 连接可以对应几个 HTTP 请求？(提示，这在问你HTTP1.0和1.1的区别)</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">2、一个 TCP 连接中 HTTP 请求发送可以一起发送么（比如一起发三个请求，再三个响应一起接收）？(提示，这就是在问你HTTP2.0和HTTP1.1协议的区别)</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">3、浏览器对同一Host建立TCP连接到数量有没有限制？(拜托，一个网站那么多图片，开一个TCP连接，按顺序下载？那不是等到死？)</span></p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">好了，不扯了，本文不是在讲Http协议。<br  />下面我们着重来说DNS解析这块</p><h3 style=\"color: inherit;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);font-size: 1.3em;\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">解析</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">OK，着重说DNS解析这块，流程图如下</p><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress1-1585361912.jpg\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><br  />如图所示，大致就是:浏览器输入地址，然后浏览器这个进程去调操作系统某个库里的gethostbyname函数(例如，Linux GNU glibc标准库的gethostbyname函数)，然后呢这个函数通过网卡给DNS服务器发UDP请求，接收结果，然后将结果给返回给浏览器。<p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">这张图其实已经讲明白大致的流程，但是细节上可能有些差异。<br  />例如</p><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(1)我们在用chrome浏览器的时候，其实会先去浏览器的dns缓存里头查询，dns缓存中没有，再去调用gethostbyname函数</span></p></li><li><p><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">(2)gethostbyname函数在试图进行DNS解析之前首先检查域名是否在本地 Hosts 里，如果没找到再去DNS服务器上查</span></p></li></ul><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">不过，看到这里！请回忆下这两道面试题？</p><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361912.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p>现在，会回答了么？<p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">什么，你还不懂怎么答？把文章拉到开头。从头看过。<br  />不过呢，需要补充说明一下，DNS中也有一个地方用到了TCP协议。那就是<strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">区域传送</strong>！</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">DNS的规范规定了2种类型的DNS服务器，一个叫主DNS服务器，一个叫辅助DNS服务器。在一个区中主DNS服务器从自己本机的数据文件中读取该区的DNS数据信息，而辅助DNS服务器则从区的主DNS服务器中读取该区的DNS数据信息。当一个辅助DNS服务器启动时，它需要与主DNS服务器通信，并加载数据信息，这就叫做区传送（zone transfer）。这种情况下，使用TCP协议。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">讲到这里。其实面试官是可以深入追问的，如下所示</p><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361913.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">针对第一问，<em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">为什么域名解析用UDP协议?</em><br  />因为UDP快啊！UDP的DNS协议只要一个请求、一个应答就好了。而使用基于TCP的DNS协议要三次握手、发送数据以及应答、四次挥手。但是UDP协议传输内容不能超过512字节。不过客户端向DNS服务器查询域名，一般返回的内容都不超过512字节，用UDP传输即可。</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">针对第二问，<em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">为什么区域传送用TCP协议？</em><br  />因为TCP协议可靠性好啊！你要从主DNS上复制内容啊，你用不可靠的UDP？<br  />因为TCP协议传输的内容大啊，你用最大只能传512字节的UDP协议？万一同步的数据大于512字节，你怎么办？</p><p style=\"font-size: inherit;color: inherit;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\">讲到这里，我突然想到一个段子(没办法，头脑中知识太多)！</p><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361914.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><br  />这个问题，我们这里当段子来讲，改天写一篇《TCP/IP面试指南》！<br  />三次握手：</section><section class=\"output_wrapper\" style=\"line-height: 1.8;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\"><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress8-1585361914-1.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><span style=\"color:#3e3e3e;font-family:Helvetica Neue, Helvetica, Hiragino Sans GB, Microsoft YaHei, Arial, sans-serif;\"><span style=\"font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">两次握手:</span></span></section><section class=\"output_wrapper\" style=\"line-height: 1.8;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\"><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361915.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><span style=\"color:#3e3e3e;font-family:Helvetica Neue, Helvetica, Hiragino Sans GB, Microsoft YaHei, Arial, sans-serif;\"><span style=\"font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">四次握手：</span></span></section><section class=\"output_wrapper\" style=\"line-height: 1.8;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\"><p style=\"text-align: center;\"><img class=\"rich_pages\"     style=\"\"   src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361915.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><p><span style=\"color: rgb(153, 153, 153);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 11.9px;letter-spacing: 2px;word-spacing: 2px;\"></span></p><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">所以啊。三次握手资源最省(当段子看看就好)！扯回我们的DNS话题！</span></p><h3 style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 1.3em;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;border-bottom: 2px solid rgb(239, 112, 96);\"><span style=\"font-size: inherit;line-height: inherit;display: inline-block;font-weight: normal;background: rgb(239, 112, 96);color: rgb(255, 255, 255);padding: 3px 10px 1px;border-top-right-radius: 3px;border-top-left-radius: 3px;margin-right: 3px;\">原理</span><span style=\"display: inline-block;vertical-align: bottom;border-bottom: 36px solid rgb(239, 235, 233);border-right: 20px solid transparent;\"> </span></h3><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">现在，讲最后一块DNS解析域名的原理！这块是重中之重！</span><br  /><span style=\"font-size: 15px;\">先介绍linux下一个</span><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">dig</span></code><span style=\"font-size: 15px;\">命令，以显示解析域名的过程。</span><br  /><span style=\"font-size: 15px;\">为了便于说明，我们来</span><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">dig</span></code><span style=\"font-size: 15px;\">一下天猫的过程</span></p><pre style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;\"><code class=\"hljs css\" style=\"margin-right: 2px;margin-left: 2px;line-height: 18px;font-size: 14px;word-spacing: 0px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;padding: 0.5em;background: rgb(30, 30, 30);color: rgb(220, 220, 220);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;\"><span class=\"hljs-selector-tag\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">dig</span>&nbsp;<span class=\"hljs-selector-tag\" style=\"font-size: inherit;line-height: inherit;color: rgb(215, 186, 125);overflow-wrap: inherit !important;word-break: inherit !important;\">www.tmall.com</span><br  /></code></pre><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">结果如下图所示</span><br  /></p><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress10-1585361916.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><br  /><span style=\"letter-spacing: 2px;word-spacing: 2px;color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;\">莫方，看不懂没事。</span><br  /><span style=\"letter-spacing: 2px;word-spacing: 2px;color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;\">现在我们来读重点的两段。第一段代表请求参数如下图所示</span><span style=\"letter-spacing: 2px;word-spacing: 2px;color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 17px;\"></span></section><section class=\"output_wrapper\" style=\"line-height: 1.8;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\"><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"width: 574px;height: 67px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress4-1585361916.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><p><span style=\"font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;color: rgb(153, 153, 153);letter-spacing: 2px;word-spacing: 2px;font-size: 11.9px;\"></span></p><br  /><span style=\"letter-spacing: 2px;word-spacing: 2px;color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;\">这段为查询内容。</span><br  /><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 15px;\">DNS的查询参数一般有三个</span><ul style=\"\" class=\"list-paddingleft-2\"><li><p><span style=\"font-size: 15px;color: inherit;line-height: inherit;\">(1)域名:服务器、邮件服务器(邮件地址中 @ 后面的部分)的名称</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 15px;\">(2)Class:在设置DNS方案时，互联网之外的网络也考虑到了，而Class就是用来识别网络的，不过现在只有互联网，所以它的值永远都是代表互联网的IN</span></p></li><li><p><span style=\"color: inherit;line-height: inherit;font-size: 15px;\">(3)记录类型:标识域名对应何种类型的记录。类型为A,表示域名对应的IP地址。类型为MX时,表示域名对应的是邮件服务器。类型为PTR,表示根据IP地址反查域名。类型为CNAME,表示查询域名相关别名。</span></p></li></ul><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">当然，你这个时候要问我一个问题啦(注意上图红框)</span><br  /><span style=\"font-size: 15px;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">烟哥，我输入的明明是www.tmall.com可是命令里解析的地址是www.tmall.com.啊,多了一个.的符号啊?这个.符号是什么意思呢？</em></span><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\"></em></p><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">于是乎，又扯了一道经典面试题</span></p><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"width: 574px;height: 147px;\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361916.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">OK，好，要讲明白这个问题。</span><span style=\"font-size: 15px;\">我们要先把域名的结构讲清楚！</span><br  /><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">www.tmall.com</span></code><span style=\"font-size: 15px;\">对应的真正的域名为</span><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">www.tmall.com.</span></code><span style=\"font-size: 15px;\">。</span><span style=\"font-size: 15px;\">末尾的</span><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">.</span></code><span style=\"font-size: 15px;\">称为根域名，因为每个域名都有根域名，因此我们通常省略。</span></p><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">根域名的下一级，叫做\"顶级域名\"（top-level domain，缩写为TLD），比如</span><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">.com、.net</span></code><span style=\"font-size: 15px;\">；</span></p><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">再下一级叫做\"次级域名\"（second-level domain，缩写为SLD），比如</span><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">www.tmall.com</span></code><span style=\"font-size: 15px;\">里面的</span><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">.tmall</span></code><span style=\"font-size: 15px;\">，这一级域名是用户可以注册的；</span></p><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">再下一级是主机名（host），比如</span><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">www.tmall.com</span></code><span style=\"font-size: 15px;\">里面的</span><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">www</span></code><span style=\"font-size: 15px;\">，又称为\"三级域名\"，这是用户在自己的域里面为服务器分配的名称，是用户可以任意分配的。</span></p><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">那么解析流程就是<strong style=\"font-size: inherit;line-height: inherit;color: rgb(233, 105, 0);\">分级查询</strong>！</span><br  /><span style=\"font-size: 15px;\"> (1)先在本机的DNS里头查，如果存在就直接返回了。</span><span style=\"font-size: 15px;\">本机DNS就是下面这个东东</span></p><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress0-1585361916.jpg\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><br  /><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 15px;\">(2)本机DNS里头发现没有，就去根服务器里查。根服务器发现这个域名是属于</span><code style=\"color: rgb(248, 35, 117);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">com</span></code><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 15px;\">域，因此根域DNS服务器会返回它所管理的</span><code style=\"color: rgb(248, 35, 117);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">com</span></code><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 15px;\">域中的DNS 服务器的IP地址，意思是“虽然我不知道你要查的那个域名的地址，但你可以去</span><code style=\"color: rgb(248, 35, 117);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">com</span></code><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 15px;\">域问问看”</span><br  /><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 15px;\"> (3)本机的DNS接到又会向</span><code style=\"color: rgb(248, 35, 117);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">com</span></code><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 15px;\">域的DNS服务器发送查询消息。</span><code style=\"color: rgb(248, 35, 117);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">com</span></code><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 15px;\"> 域中也没有</span><code style=\"color: rgb(248, 35, 117);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">www.tmall.com</span></code><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 15px;\">这个域名的信息，和刚才一样，</span><code style=\"color: rgb(248, 35, 117);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">com</span></code><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 15px;\">域服务器会返回它下面的</span><code style=\"color: rgb(248, 35, 117);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">tmall.com</span></code><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 15px;\">域的DNS服务器的IP地址。</span><br  /><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 15px;\">以此类推，只要重复前面的步骤，就可以顺藤摸瓜找到目标DNS服务器</span><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 2px;word-spacing: 2px;font-size: 17px;\"></span><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">ps</span></code><span style=\"font-size: 15px;\">:温馨提醒，</span><code style=\"font-size: inherit;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;color: rgb(248, 35, 117);background: rgb(248, 248, 248);\"><span style=\"font-size: 15px;\">dig +trace www.tmall.com</span></code><span style=\"font-size: 15px;\"> 可以看到解析过程。</span><span style=\"font-size: 15px;\">有兴趣的读者，自己实验一下。</span></p><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">扯了那么多东西，我们来看第二段内容，也就是响应体的部分！</span><br  /><span style=\"font-size: 15px;\">如下所示</span></p><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress2-1585361917.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><br  /><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">很明显，第一行就是说</span><code style=\"color: rgb(248, 35, 117);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background: rgb(248, 248, 248);\">www.tmall.com</code><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">这个域名地址拥有一个别名是</span><code style=\"color: rgb(248, 35, 117);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background: rgb(248, 248, 248);\">www.tmall.com.danuoyi.tbcache.com</code><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">。那么，很显然，后面几行就是这个</span><code style=\"color: rgb(248, 35, 117);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background: rgb(248, 248, 248);\">www.tmall.com.danuoyi.tbcache.com</code><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">地址的真实IP。</span><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><em style=\"font-size: inherit;line-height: inherit;color: rgb(98, 0, 234);\">为什么天猫要设一个别名到www.tmall.com.danuoyi.tbcache.com地址呢？</em><br  />于是乎，又一道经典面试题出现</p><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress3-1585361917.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><br  /><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">说句实在话，我当初第一眼，见到这题的时候，我觉得应该是方便cdn配置。</span><br  /><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">回到我们的例子，如果烟哥的猜测正确，</span><code style=\"color: rgb(248, 35, 117);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;overflow-wrap: break-word;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background: rgb(248, 248, 248);\">www.tmall.com.danuoyi.tbcache.com</code><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">这个地址，应该是淘宝的一个cdn地址。</span><br  /><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">因此，我特意去查了域名备案记录。如下图所示</span></section><section class=\"output_wrapper\" style=\"line-height: 1.8;background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%);background-size: 20px 20px;background-position: center center;\"><p style=\"text-align: center;\"><img class=\"rich_pages\"       style=\"\" src=\"https://www.javashitang.com/wp-content/uploads/2020/03/beepress9-1585361917.png\" alt=\"关于DNS不得不说的一些事\" title=\"关于DNS不得不说的一些事\"  /></p><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">果然，就是一个淘宝的cdn环境。</span><br  /><em style=\"color: rgb(98, 0, 234);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;\">那么这么配有什么好处呢？</em><br  /><span style=\"color: rgb(62, 62, 62);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 2px;word-spacing: 2px;\">唉，这题当思考题，快过来探讨留言！</span><h2 style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 1.4em;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.6em;margin-bottom: 1.6em;font-weight: bold;\"><span style=\"font-size: inherit;color: inherit;line-height: inherit;\">总结</span></h2><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">本文讲了DNS的一些常见知识点，希望大家有所收获。</span><span style=\"font-size: 15px;\">如果有其他关于DNS的问题，欢迎留言咨询。</span></p><p style=\"color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: 2px;word-spacing: 2px;line-height: inherit;margin-top: 1.7em;margin-bottom: 1.7em;\"><span style=\"font-size: 15px;\">(啊，呸，我就随便说说，不要当真，千万别问，万一我不会，不是暴露了我是个水货)</span>！</p></section> 				<blockquote class=\"keep-source\"><p>原文始发于微信公众号（孤独烟）：<a target=\"_blank\" href=\"http://mp.weixin.qq.com/s/4LYtnFe8Ry-WBydTISUI4A\" rel=\"noopener noreferrer\">关于DNS不得不说的一些事</a></p></blockquote></div>', '关于DNS不得不说的一些事', '', 'inherit', 'closed', 'closed', '', '182-revision-v1', '', '', '2020-03-28 10:18:38', '2020-03-28 02:18:38', '', 182, 'https://www.javashitang.com/?p=200', 0, 'revision', '', 0);

-- ----------------------------
-- Table structure for wp_statistics_exclusions
-- ----------------------------
DROP TABLE IF EXISTS `wp_statistics_exclusions`;
CREATE TABLE `wp_statistics_exclusions`  (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `date` date NOT NULL,
  `reason` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `count` bigint(20) NOT NULL,
  PRIMARY KEY (`ID`) USING BTREE,
  INDEX `date`(`date`) USING BTREE,
  INDEX `reason`(`reason`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for wp_statistics_historical
-- ----------------------------
DROP TABLE IF EXISTS `wp_statistics_historical`;
CREATE TABLE `wp_statistics_historical`  (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `category` varchar(25) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `page_id` bigint(20) NOT NULL,
  `uri` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `value` bigint(20) NOT NULL,
  PRIMARY KEY (`ID`) USING BTREE,
  UNIQUE INDEX `page_id`(`page_id`) USING BTREE,
  UNIQUE INDEX `uri`(`uri`) USING BTREE,
  INDEX `category`(`category`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for wp_statistics_pages
-- ----------------------------
DROP TABLE IF EXISTS `wp_statistics_pages`;
CREATE TABLE `wp_statistics_pages`  (
  `page_id` bigint(20) NOT NULL AUTO_INCREMENT,
  `uri` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `type` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `date` date NOT NULL,
  `count` int(11) NOT NULL,
  `id` int(11) NOT NULL,
  PRIMARY KEY (`page_id`) USING BTREE,
  UNIQUE INDEX `date_2`(`date`, `uri`) USING BTREE,
  INDEX `url`(`uri`) USING BTREE,
  INDEX `date`(`date`) USING BTREE,
  INDEX `id`(`id`) USING BTREE,
  INDEX `uri`(`uri`, `count`, `id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 8 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of wp_statistics_pages
-- ----------------------------
INSERT INTO `wp_statistics_pages` VALUES (1, '/', 'home', '2020-03-27', 9, 0);
INSERT INTO `wp_statistics_pages` VALUES (2, '/?p=1', 'post', '2020-03-27', 2, 1);
INSERT INTO `wp_statistics_pages` VALUES (3, '/?p=11', 'post', '2020-03-27', 2, 11);
INSERT INTO `wp_statistics_pages` VALUES (4, '/?p=27', 'post', '2020-03-27', 3, 27);
INSERT INTO `wp_statistics_pages` VALUES (5, '/?p=31', 'post', '2020-03-27', 3, 31);
INSERT INTO `wp_statistics_pages` VALUES (6, '/', 'home', '2020-03-28', 14, 0);
INSERT INTO `wp_statistics_pages` VALUES (7, '/?p=31', 'post', '2020-03-28', 1, 31);

-- ----------------------------
-- Table structure for wp_statistics_search
-- ----------------------------
DROP TABLE IF EXISTS `wp_statistics_search`;
CREATE TABLE `wp_statistics_search`  (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `last_counter` date NOT NULL,
  `engine` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `host` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `words` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `visitor` bigint(20) NULL DEFAULT NULL,
  PRIMARY KEY (`ID`) USING BTREE,
  INDEX `last_counter`(`last_counter`) USING BTREE,
  INDEX `engine`(`engine`) USING BTREE,
  INDEX `host`(`host`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of wp_statistics_search
-- ----------------------------
INSERT INTO `wp_statistics_search` VALUES (1, '2020-03-27', 'google', 'www.google.com.hk', '', 9);

-- ----------------------------
-- Table structure for wp_statistics_useronline
-- ----------------------------
DROP TABLE IF EXISTS `wp_statistics_useronline`;
CREATE TABLE `wp_statistics_useronline`  (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `ip` varchar(60) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `created` int(11) NULL DEFAULT NULL,
  `timestamp` int(10) NOT NULL,
  `date` datetime(0) NULL,
  `referred` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `agent` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `platform` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `version` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `location` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `user_id` bigint(48) NOT NULL,
  `page_id` bigint(48) NOT NULL,
  `type` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  PRIMARY KEY (`ID`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 75 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for wp_statistics_visit
-- ----------------------------
DROP TABLE IF EXISTS `wp_statistics_visit`;
CREATE TABLE `wp_statistics_visit`  (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `last_visit` datetime(0) NULL,
  `last_counter` date NOT NULL,
  `visit` int(10) NOT NULL,
  PRIMARY KEY (`ID`) USING BTREE,
  UNIQUE INDEX `unique_date`(`last_counter`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 60 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of wp_statistics_visit
-- ----------------------------
INSERT INTO `wp_statistics_visit` VALUES (1, '2020-03-27 10:18:16', '2020-03-27', 58);
INSERT INTO `wp_statistics_visit` VALUES (2, '2020-03-28 10:01:48', '2020-03-28', 31);

-- ----------------------------
-- Table structure for wp_statistics_visitor
-- ----------------------------
DROP TABLE IF EXISTS `wp_statistics_visitor`;
CREATE TABLE `wp_statistics_visitor`  (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `last_counter` date NOT NULL,
  `referred` text CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `agent` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `platform` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `version` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `UAString` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `ip` varchar(60) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `location` varchar(10) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `hits` int(11) NULL DEFAULT NULL,
  `honeypot` int(11) NULL DEFAULT NULL,
  PRIMARY KEY (`ID`) USING BTREE,
  UNIQUE INDEX `date_ip_agent`(`last_counter`, `ip`, `agent`(75), `platform`(75), `version`(75)) USING BTREE,
  INDEX `agent`(`agent`) USING BTREE,
  INDEX `platform`(`platform`) USING BTREE,
  INDEX `version`(`version`) USING BTREE,
  INDEX `location`(`location`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 35 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of wp_statistics_visitor
-- ----------------------------
INSERT INTO `wp_statistics_visitor` VALUES (1, '2020-03-27', 'https://www.javashitang.com/wp-admin/plugins.php', 'Chrome', 'Windows', '10.0', NULL, '120.244.56.209', '000', NULL, 0);
INSERT INTO `wp_statistics_visitor` VALUES (2, '2020-03-27', 'https://www.javashitang.com', 'Firefox', 'Ubuntu', 'Unknown', '', '47.93.50.126', '000', 7, 0);
INSERT INTO `wp_statistics_visitor` VALUES (3, '2020-03-27', 'https://www.javashitang.com', 'Chrome', 'Windows', '10.0', '', '39.106.8.162', '000', 4, 0);
INSERT INTO `wp_statistics_visitor` VALUES (4, '2020-03-27', 'https://www.javashitang.com', 'Chrome', 'Windows', '10.0', '', '60.205.204.207', '000', 6, 0);
INSERT INTO `wp_statistics_visitor` VALUES (5, '2020-03-27', 'https://www.javashitang.com', 'Chrome', 'Windows', '10.0', '', '101.201.37.35', '000', 3, 0);
INSERT INTO `wp_statistics_visitor` VALUES (6, '2020-03-27', 'https://www.javashitang.com', 'Chrome', 'Windows', '10.0', '', '101.201.39.58', '000', 12, 0);
INSERT INTO `wp_statistics_visitor` VALUES (7, '2020-03-27', 'https://www.javashitang.com', 'Firefox', 'Ubuntu', 'Unknown', '', '47.93.7.171', '000', 3, 0);
INSERT INTO `wp_statistics_visitor` VALUES (8, '2020-03-27', 'http://baidu.com/', 'UC Browser', 'Android', '8.1.0', '', '180.163.220.66', '000', 1, 0);
INSERT INTO `wp_statistics_visitor` VALUES (9, '2020-03-27', 'https://www.google.com.hk/', 'Chrome', 'Windows', '10.0', '', '123.77.0.2', '000', 1, 0);
INSERT INTO `wp_statistics_visitor` VALUES (10, '2020-03-27', 'https://www.javashitang.com', 'Chrome', 'Linux', 'Unknown', '', '182.138.137.28', '000', 1, 0);
INSERT INTO `wp_statistics_visitor` VALUES (11, '2020-03-27', 'http://baidu.com/', 'UC Browser', 'Android', '8.1.0', '', '42.236.10.117', '000', 1, 0);
INSERT INTO `wp_statistics_visitor` VALUES (12, '2020-03-27', 'https://www.javashitang.com', 'Chrome', 'Windows', '10.0', '', '117.147.47.48', '000', 1, 0);
INSERT INTO `wp_statistics_visitor` VALUES (13, '2020-03-27', 'https://www.javashitang.com', 'Safari', 'iOS', '11.0', '', '117.132.183.17', '000', 1, 0);
INSERT INTO `wp_statistics_visitor` VALUES (14, '2020-03-27', 'https://www.javashitang.com', 'Firefox', 'Windows', '10.0', '', '117.28.206.241', '000', 4, 0);
INSERT INTO `wp_statistics_visitor` VALUES (15, '2020-03-27', 'https://www.javashitang.com', 'QQ Browser', 'Android', '10', '', '117.173.134.31', '000', 2, 0);
INSERT INTO `wp_statistics_visitor` VALUES (16, '2020-03-27', 'https://www.javashitang.com', 'Chrome', 'Windows', '10.0', '', '117.132.191.30', '000', 8, 0);
INSERT INTO `wp_statistics_visitor` VALUES (17, '2020-03-28', 'https://www.javashitang.com', 'Firefox', 'Ubuntu', 'Unknown', '', '47.93.7.171', '000', 4, 0);
INSERT INTO `wp_statistics_visitor` VALUES (18, '2020-03-28', 'https://www.javashitang.com', 'Firefox', 'Ubuntu', 'Unknown', '', '101.201.39.58', '000', 5, 0);
INSERT INTO `wp_statistics_visitor` VALUES (19, '2020-03-28', 'https://www.javashitang.com', 'Firefox', 'Ubuntu', 'Unknown', '', '101.201.37.35', '000', 3, 0);
INSERT INTO `wp_statistics_visitor` VALUES (20, '2020-03-28', 'https://www.javashitang.com', 'Firefox', 'Ubuntu', 'Unknown', '', '39.106.8.162', '000', 2, 0);
INSERT INTO `wp_statistics_visitor` VALUES (21, '2020-03-28', 'https://www.javashitang.com', 'Chrome', 'Windows', '10.0', '', '192.99.36.177', '000', 2, 0);
INSERT INTO `wp_statistics_visitor` VALUES (22, '2020-03-28', 'http://www.javashitang.com/', 'Firefox', 'Windows', '6.1', '', '182.254.52.17', '000', 1, 0);
INSERT INTO `wp_statistics_visitor` VALUES (23, '2020-03-28', 'http://www.javashitang.com/?feed%3Drss2', 'Firefox', 'Windows', '6.1', '', '14.18.182.223', '000', 1, 0);
INSERT INTO `wp_statistics_visitor` VALUES (24, '2020-03-28', 'https://www.javashitang.com', 'Safari', 'iOS', '11.0', '', '117.132.183.17', '000', 1, 0);
INSERT INTO `wp_statistics_visitor` VALUES (25, '2020-03-28', 'https://www.javashitang.com', 'QQ Browser', 'Android', '10', '', '117.173.134.31', '000', 1, 0);
INSERT INTO `wp_statistics_visitor` VALUES (26, '2020-03-28', 'https://www.javashitang.com', 'QQ Browser', 'Android', '9', '', '223.104.20.158', '000', 1, 0);
INSERT INTO `wp_statistics_visitor` VALUES (27, '2020-03-28', 'https://www.javashitang.com', 'Safari', 'OS X', '10.10.4', '', '116.203.250.8', '000', 1, 0);
INSERT INTO `wp_statistics_visitor` VALUES (28, '2020-03-28', 'https://www.javashitang.com', 'WeChat', 'Android', '9', '', '120.228.236.157', '000', 1, 0);
INSERT INTO `wp_statistics_visitor` VALUES (29, '2020-03-28', 'http://www.javashitang.com/?feed%3Drss2', 'Firefox', 'Windows', '6.1', '', '59.36.132.240', '000', 1, 0);
INSERT INTO `wp_statistics_visitor` VALUES (30, '2020-03-28', 'https://www.javashitang.com', 'WeChat', 'Android', '9', '', '112.96.167.211', '000', 1, 0);
INSERT INTO `wp_statistics_visitor` VALUES (31, '2020-03-28', 'https://www.javashitang.com', 'Chrome', 'Windows', '10.0', '', '111.207.123.51', '000', 1, 0);
INSERT INTO `wp_statistics_visitor` VALUES (32, '2020-03-28', 'https://www.javashitang.com', 'WeChat', 'Android', '9', '', '223.104.172.26', '000', 2, 0);
INSERT INTO `wp_statistics_visitor` VALUES (33, '2020-03-28', 'https://www.javashitang.com', 'Firefox', 'Ubuntu', 'Unknown', '', '47.93.50.126', '000', 1, 0);
INSERT INTO `wp_statistics_visitor` VALUES (34, '2020-03-28', 'https://www.javashitang.com/', 'Chrome', 'Windows', '6.2', '', '49.232.51.103', '000', 2, 0);

-- ----------------------------
-- Table structure for wp_term_relationships
-- ----------------------------
DROP TABLE IF EXISTS `wp_term_relationships`;
CREATE TABLE `wp_term_relationships`  (
  `object_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `term_taxonomy_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `term_order` int(11) NOT NULL DEFAULT 0,
  PRIMARY KEY (`object_id`, `term_taxonomy_id`) USING BTREE,
  INDEX `term_taxonomy_id`(`term_taxonomy_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_520_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of wp_term_relationships
-- ----------------------------
INSERT INTO `wp_term_relationships` VALUES (1, 1, 0);
INSERT INTO `wp_term_relationships` VALUES (6, 7, 0);
INSERT INTO `wp_term_relationships` VALUES (7, 7, 0);
INSERT INTO `wp_term_relationships` VALUES (8, 7, 0);
INSERT INTO `wp_term_relationships` VALUES (9, 7, 0);
INSERT INTO `wp_term_relationships` VALUES (10, 7, 0);
INSERT INTO `wp_term_relationships` VALUES (11, 2, 0);
INSERT INTO `wp_term_relationships` VALUES (11, 4, 0);
INSERT INTO `wp_term_relationships` VALUES (27, 2, 0);
INSERT INTO `wp_term_relationships` VALUES (27, 4, 0);
INSERT INTO `wp_term_relationships` VALUES (31, 2, 0);
INSERT INTO `wp_term_relationships` VALUES (31, 4, 0);
INSERT INTO `wp_term_relationships` VALUES (43, 7, 0);
INSERT INTO `wp_term_relationships` VALUES (47, 7, 0);
INSERT INTO `wp_term_relationships` VALUES (48, 9, 0);
INSERT INTO `wp_term_relationships` VALUES (60, 5, 0);
INSERT INTO `wp_term_relationships` VALUES (71, 5, 0);
INSERT INTO `wp_term_relationships` VALUES (77, 3, 0);
INSERT INTO `wp_term_relationships` VALUES (91, 3, 0);
INSERT INTO `wp_term_relationships` VALUES (104, 2, 0);
INSERT INTO `wp_term_relationships` VALUES (113, 2, 0);
INSERT INTO `wp_term_relationships` VALUES (123, 5, 0);
INSERT INTO `wp_term_relationships` VALUES (150, 9, 0);
INSERT INTO `wp_term_relationships` VALUES (157, 4, 0);
INSERT INTO `wp_term_relationships` VALUES (163, 2, 0);
INSERT INTO `wp_term_relationships` VALUES (168, 2, 0);
INSERT INTO `wp_term_relationships` VALUES (182, 2, 0);

-- ----------------------------
-- Table structure for wp_term_taxonomy
-- ----------------------------
DROP TABLE IF EXISTS `wp_term_taxonomy`;
CREATE TABLE `wp_term_taxonomy`  (
  `term_taxonomy_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `taxonomy` varchar(32) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `description` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL,
  `parent` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `count` bigint(20) NOT NULL DEFAULT 0,
  PRIMARY KEY (`term_taxonomy_id`) USING BTREE,
  UNIQUE INDEX `term_id_taxonomy`(`term_id`, `taxonomy`) USING BTREE,
  INDEX `taxonomy`(`taxonomy`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 10 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_520_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of wp_term_taxonomy
-- ----------------------------
INSERT INTO `wp_term_taxonomy` VALUES (1, 1, 'category', '', 0, 0);
INSERT INTO `wp_term_taxonomy` VALUES (2, 2, 'category', '', 0, 8);
INSERT INTO `wp_term_taxonomy` VALUES (3, 3, 'category', '', 0, 2);
INSERT INTO `wp_term_taxonomy` VALUES (4, 4, 'category', '', 0, 4);
INSERT INTO `wp_term_taxonomy` VALUES (5, 5, 'category', '', 0, 3);
INSERT INTO `wp_term_taxonomy` VALUES (6, 6, 'category', '', 0, 0);
INSERT INTO `wp_term_taxonomy` VALUES (7, 7, 'nav_menu', '', 0, 7);
INSERT INTO `wp_term_taxonomy` VALUES (8, 8, 'category', '', 0, 0);
INSERT INTO `wp_term_taxonomy` VALUES (9, 9, 'category', '', 0, 2);

-- ----------------------------
-- Table structure for wp_termmeta
-- ----------------------------
DROP TABLE IF EXISTS `wp_termmeta`;
CREATE TABLE `wp_termmeta`  (
  `meta_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `term_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `meta_key` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NULL DEFAULT NULL,
  `meta_value` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NULL,
  PRIMARY KEY (`meta_id`) USING BTREE,
  INDEX `term_id`(`term_id`) USING BTREE,
  INDEX `meta_key`(`meta_key`(191)) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_520_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Table structure for wp_terms
-- ----------------------------
DROP TABLE IF EXISTS `wp_terms`;
CREATE TABLE `wp_terms`  (
  `term_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `name` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `slug` varchar(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `term_group` bigint(10) NOT NULL DEFAULT 0,
  PRIMARY KEY (`term_id`) USING BTREE,
  INDEX `slug`(`slug`(191)) USING BTREE,
  INDEX `name`(`name`(191)) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 10 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_520_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of wp_terms
-- ----------------------------
INSERT INTO `wp_terms` VALUES (1, '未分类', 'uncategorized', 0);
INSERT INTO `wp_terms` VALUES (2, 'Java面试', 'java%e9%9d%a2%e8%af%95', 0);
INSERT INTO `wp_terms` VALUES (3, 'Java框架', 'java%e6%a1%86%e6%9e%b6', 0);
INSERT INTO `wp_terms` VALUES (4, '数据库', '%e6%95%b0%e6%8d%ae%e5%ba%93', 0);
INSERT INTO `wp_terms` VALUES (5, '设计模式', '%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f', 0);
INSERT INTO `wp_terms` VALUES (6, '算法', '%e7%ae%97%e6%b3%95', 0);
INSERT INTO `wp_terms` VALUES (7, '顶部菜单', '%e9%a1%b6%e9%83%a8%e8%8f%9c%e5%8d%95', 0);
INSERT INTO `wp_terms` VALUES (8, 'Linux', 'linux', 0);
INSERT INTO `wp_terms` VALUES (9, 'Java语言', 'java%e8%af%ad%e8%a8%80', 0);

-- ----------------------------
-- Table structure for wp_usermeta
-- ----------------------------
DROP TABLE IF EXISTS `wp_usermeta`;
CREATE TABLE `wp_usermeta`  (
  `umeta_id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) UNSIGNED NOT NULL DEFAULT 0,
  `meta_key` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NULL DEFAULT NULL,
  `meta_value` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NULL,
  PRIMARY KEY (`umeta_id`) USING BTREE,
  INDEX `user_id`(`user_id`) USING BTREE,
  INDEX `meta_key`(`meta_key`(191)) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 28 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_520_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of wp_usermeta
-- ----------------------------
INSERT INTO `wp_usermeta` VALUES (1, 1, 'nickname', 'root');
INSERT INTO `wp_usermeta` VALUES (2, 1, 'first_name', '');
INSERT INTO `wp_usermeta` VALUES (3, 1, 'last_name', '');
INSERT INTO `wp_usermeta` VALUES (4, 1, 'description', '');
INSERT INTO `wp_usermeta` VALUES (5, 1, 'rich_editing', 'true');
INSERT INTO `wp_usermeta` VALUES (6, 1, 'syntax_highlighting', 'true');
INSERT INTO `wp_usermeta` VALUES (7, 1, 'comment_shortcuts', 'false');
INSERT INTO `wp_usermeta` VALUES (8, 1, 'admin_color', 'fresh');
INSERT INTO `wp_usermeta` VALUES (9, 1, 'use_ssl', '0');
INSERT INTO `wp_usermeta` VALUES (10, 1, 'show_admin_bar_front', 'true');
INSERT INTO `wp_usermeta` VALUES (11, 1, 'locale', '');
INSERT INTO `wp_usermeta` VALUES (12, 1, 'wp_capabilities', 'a:1:{s:13:\"administrator\";b:1;}');
INSERT INTO `wp_usermeta` VALUES (13, 1, 'wp_user_level', '10');
INSERT INTO `wp_usermeta` VALUES (14, 1, 'dismissed_wp_pointers', '');
INSERT INTO `wp_usermeta` VALUES (15, 1, 'show_welcome_panel', '1');
INSERT INTO `wp_usermeta` VALUES (16, 1, 'session_tokens', 'a:1:{s:64:\"6264f3d2a23ccc78e6d4f4ecb0ad85ab7604a0ab386fef5a6cf4bc49bffdb909\";a:4:{s:10:\"expiration\";i:1586483683;s:2:\"ip\";s:14:\"120.244.56.209\";s:2:\"ua\";s:115:\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\";s:5:\"login\";i:1585274083;}}');
INSERT INTO `wp_usermeta` VALUES (17, 1, 'wp_user-settings', 'libraryContent=browse&hidetb=1');
INSERT INTO `wp_usermeta` VALUES (18, 1, 'wp_user-settings-time', '1585274090');
INSERT INTO `wp_usermeta` VALUES (19, 1, 'wp_dashboard_quick_press_last_post_id', '4');
INSERT INTO `wp_usermeta` VALUES (20, 1, 'community-events-location', 'a:1:{s:2:\"ip\";s:12:\"120.244.56.0\";}');
INSERT INTO `wp_usermeta` VALUES (21, 1, 'wp_statistics', 'a:2:{s:13:\"dashboard_set\";s:7:\"12.6.12\";s:10:\"editor_set\";s:7:\"12.6.12\";}');
INSERT INTO `wp_usermeta` VALUES (22, 1, 'metaboxhidden_dashboard', 'a:11:{i:0;s:28:\"wp-statistics-summary-widget\";i:1;s:29:\"wp-statistics-browsers-widget\";i:2;s:30:\"wp-statistics-countries-widget\";i:3;s:25:\"wp-statistics-hits-widget\";i:4;s:26:\"wp-statistics-pages-widget\";i:5;s:30:\"wp-statistics-referring-widget\";i:6;s:27:\"wp-statistics-search-widget\";i:7;s:26:\"wp-statistics-words-widget\";i:8;s:33:\"wp-statistics-top-visitors-widget\";i:9;s:27:\"wp-statistics-recent-widget\";i:10;s:28:\"wp-statistics-hitsmap-widget\";}');
INSERT INTO `wp_usermeta` VALUES (23, 1, 'managenav-menuscolumnshidden', 'a:5:{i:0;s:11:\"link-target\";i:1;s:11:\"css-classes\";i:2;s:3:\"xfn\";i:3;s:11:\"description\";i:4;s:15:\"title-attribute\";}');
INSERT INTO `wp_usermeta` VALUES (24, 1, 'metaboxhidden_nav-menus', 'a:2:{i:0;s:12:\"add-post_tag\";i:1;s:15:\"add-post_format\";}');
INSERT INTO `wp_usermeta` VALUES (25, 1, 'metaboxhidden_post', 'a:1:{i:0;s:29:\"wp_statistics_editor_meta_box\";}');
INSERT INTO `wp_usermeta` VALUES (26, 1, 'metaboxhidden_page', 'a:1:{i:0;s:29:\"wp_statistics_editor_meta_box\";}');
INSERT INTO `wp_usermeta` VALUES (27, 1, 'nav_menu_recently_edited', '7');

-- ----------------------------
-- Table structure for wp_users
-- ----------------------------
DROP TABLE IF EXISTS `wp_users`;
CREATE TABLE `wp_users`  (
  `ID` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_login` varchar(60) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_pass` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_nicename` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_email` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_url` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_registered` datetime(0) NOT NULL DEFAULT '0000-00-00 00:00:00',
  `user_activation_key` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  `user_status` int(11) NOT NULL DEFAULT 0,
  `display_name` varchar(250) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_520_ci NOT NULL DEFAULT '',
  PRIMARY KEY (`ID`) USING BTREE,
  INDEX `user_login_key`(`user_login`) USING BTREE,
  INDEX `user_nicename`(`user_nicename`) USING BTREE,
  INDEX `user_email`(`user_email`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_520_ci ROW_FORMAT = Compact;

-- ----------------------------
-- Records of wp_users
-- ----------------------------
INSERT INTO `wp_users` VALUES (1, 'root', '$P$BaXObiZ13skd.dpjv8aNgPD2b98oZS/', 'root', '290059742@qq.com', '', '2020-03-27 01:54:36', '', 0, 'root');

SET FOREIGN_KEY_CHECKS = 1;
